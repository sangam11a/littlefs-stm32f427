
littlefs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012224  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb8  080123d4  080123d4  000223d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801338c  0801338c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801338c  0801338c  0002338c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013394  08013394  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013394  08013394  00023394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013398  08013398  00023398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801339c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e4  2**0
                  CONTENTS
 10 .bss          00001fac  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002194  20002194  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025978  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004706  00000000  00000000  00055b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  0005a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001aa0  00000000  00000000  0005bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006ac3  00000000  00000000  0005d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d28c  00000000  00000000  00064163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e71e0  00000000  00000000  000813ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001685cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078a0  00000000  00000000  00168624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080123bc 	.word	0x080123bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	080123bc 	.word	0x080123bc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b982 	b.w	80005dc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f81a 	bl	8000318 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__popcountsi2>:
 80002f0:	0843      	lsrs	r3, r0, #1
 80002f2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002fe:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000302:	4418      	add	r0, r3
 8000304:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000308:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 800030c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000310:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000314:	0e00      	lsrs	r0, r0, #24
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468c      	mov	ip, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8083 	bne.w	800042e <__udivmoddi4+0x116>
 8000328:	428a      	cmp	r2, r1
 800032a:	4617      	mov	r7, r2
 800032c:	d947      	bls.n	80003be <__udivmoddi4+0xa6>
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	b142      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000334:	f1c2 0020 	rsb	r0, r2, #32
 8000338:	fa24 f000 	lsr.w	r0, r4, r0
 800033c:	4091      	lsls	r1, r2
 800033e:	4097      	lsls	r7, r2
 8000340:	ea40 0c01 	orr.w	ip, r0, r1
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbbc f6f8 	udiv	r6, ip, r8
 8000350:	fa1f fe87 	uxth.w	lr, r7
 8000354:	fb08 c116 	mls	r1, r8, r6, ip
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb06 f10e 	mul.w	r1, r6, lr
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f106 30ff 	add.w	r0, r6, #4294967295
 800036a:	f080 8119 	bcs.w	80005a0 <__udivmoddi4+0x288>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8116 	bls.w	80005a0 <__udivmoddi4+0x288>
 8000374:	3e02      	subs	r6, #2
 8000376:	443b      	add	r3, r7
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fe0e 	mul.w	lr, r0, lr
 800038c:	45a6      	cmp	lr, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8105 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8102 	bls.w	80005a4 <__udivmoddi4+0x28c>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	2600      	movs	r6, #0
 80003ae:	b11d      	cbz	r5, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c5 4300 	strd	r4, r3, [r5]
 80003b8:	4631      	mov	r1, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	b902      	cbnz	r2, 80003c2 <__udivmoddi4+0xaa>
 80003c0:	deff      	udf	#255	; 0xff
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	d150      	bne.n	800046c <__udivmoddi4+0x154>
 80003ca:	1bcb      	subs	r3, r1, r7
 80003cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	2601      	movs	r6, #1
 80003d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003da:	0c21      	lsrs	r1, r4, #16
 80003dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb08 f30c 	mul.w	r3, r8, ip
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0xe4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0xe2>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	f200 80e9 	bhi.w	80005cc <__udivmoddi4+0x2b4>
 80003fa:	4684      	mov	ip, r0
 80003fc:	1ac9      	subs	r1, r1, r3
 80003fe:	b2a3      	uxth	r3, r4
 8000400:	fbb1 f0fe 	udiv	r0, r1, lr
 8000404:	fb0e 1110 	mls	r1, lr, r0, r1
 8000408:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800040c:	fb08 f800 	mul.w	r8, r8, r0
 8000410:	45a0      	cmp	r8, r4
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x10c>
 8000414:	193c      	adds	r4, r7, r4
 8000416:	f100 33ff 	add.w	r3, r0, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x10a>
 800041c:	45a0      	cmp	r8, r4
 800041e:	f200 80d9 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 8000422:	4618      	mov	r0, r3
 8000424:	eba4 0408 	sub.w	r4, r4, r8
 8000428:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800042c:	e7bf      	b.n	80003ae <__udivmoddi4+0x96>
 800042e:	428b      	cmp	r3, r1
 8000430:	d909      	bls.n	8000446 <__udivmoddi4+0x12e>
 8000432:	2d00      	cmp	r5, #0
 8000434:	f000 80b1 	beq.w	800059a <__udivmoddi4+0x282>
 8000438:	2600      	movs	r6, #0
 800043a:	e9c5 0100 	strd	r0, r1, [r5]
 800043e:	4630      	mov	r0, r6
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	fab3 f683 	clz	r6, r3
 800044a:	2e00      	cmp	r6, #0
 800044c:	d14a      	bne.n	80004e4 <__udivmoddi4+0x1cc>
 800044e:	428b      	cmp	r3, r1
 8000450:	d302      	bcc.n	8000458 <__udivmoddi4+0x140>
 8000452:	4282      	cmp	r2, r0
 8000454:	f200 80b8 	bhi.w	80005c8 <__udivmoddi4+0x2b0>
 8000458:	1a84      	subs	r4, r0, r2
 800045a:	eb61 0103 	sbc.w	r1, r1, r3
 800045e:	2001      	movs	r0, #1
 8000460:	468c      	mov	ip, r1
 8000462:	2d00      	cmp	r5, #0
 8000464:	d0a8      	beq.n	80003b8 <__udivmoddi4+0xa0>
 8000466:	e9c5 4c00 	strd	r4, ip, [r5]
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f603 	lsr.w	r6, r0, r3
 8000474:	4097      	lsls	r7, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047e:	40d9      	lsrs	r1, r3
 8000480:	4330      	orrs	r0, r6
 8000482:	0c03      	lsrs	r3, r0, #16
 8000484:	fbb1 f6fe 	udiv	r6, r1, lr
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000490:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000494:	fb06 f108 	mul.w	r1, r6, r8
 8000498:	4299      	cmp	r1, r3
 800049a:	fa04 f402 	lsl.w	r4, r4, r2
 800049e:	d909      	bls.n	80004b4 <__udivmoddi4+0x19c>
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80004a6:	f080 808d 	bcs.w	80005c4 <__udivmoddi4+0x2ac>
 80004aa:	4299      	cmp	r1, r3
 80004ac:	f240 808a 	bls.w	80005c4 <__udivmoddi4+0x2ac>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	443b      	add	r3, r7
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b281      	uxth	r1, r0
 80004b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c4:	fb00 f308 	mul.w	r3, r0, r8
 80004c8:	428b      	cmp	r3, r1
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x1c4>
 80004cc:	1879      	adds	r1, r7, r1
 80004ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d2:	d273      	bcs.n	80005bc <__udivmoddi4+0x2a4>
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d971      	bls.n	80005bc <__udivmoddi4+0x2a4>
 80004d8:	3802      	subs	r0, #2
 80004da:	4439      	add	r1, r7
 80004dc:	1acb      	subs	r3, r1, r3
 80004de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e2:	e778      	b.n	80003d6 <__udivmoddi4+0xbe>
 80004e4:	f1c6 0c20 	rsb	ip, r6, #32
 80004e8:	fa03 f406 	lsl.w	r4, r3, r6
 80004ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f0:	431c      	orrs	r4, r3
 80004f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004f6:	fa01 f306 	lsl.w	r3, r1, r6
 80004fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000502:	431f      	orrs	r7, r3
 8000504:	0c3b      	lsrs	r3, r7, #16
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fa1f f884 	uxth.w	r8, r4
 800050e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000512:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000516:	fb09 fa08 	mul.w	sl, r9, r8
 800051a:	458a      	cmp	sl, r1
 800051c:	fa02 f206 	lsl.w	r2, r2, r6
 8000520:	fa00 f306 	lsl.w	r3, r0, r6
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x220>
 8000526:	1861      	adds	r1, r4, r1
 8000528:	f109 30ff 	add.w	r0, r9, #4294967295
 800052c:	d248      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 800052e:	458a      	cmp	sl, r1
 8000530:	d946      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000532:	f1a9 0902 	sub.w	r9, r9, #2
 8000536:	4421      	add	r1, r4
 8000538:	eba1 010a 	sub.w	r1, r1, sl
 800053c:	b2bf      	uxth	r7, r7
 800053e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000542:	fb0e 1110 	mls	r1, lr, r0, r1
 8000546:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054a:	fb00 f808 	mul.w	r8, r0, r8
 800054e:	45b8      	cmp	r8, r7
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x24a>
 8000552:	19e7      	adds	r7, r4, r7
 8000554:	f100 31ff 	add.w	r1, r0, #4294967295
 8000558:	d22e      	bcs.n	80005b8 <__udivmoddi4+0x2a0>
 800055a:	45b8      	cmp	r8, r7
 800055c:	d92c      	bls.n	80005b8 <__udivmoddi4+0x2a0>
 800055e:	3802      	subs	r0, #2
 8000560:	4427      	add	r7, r4
 8000562:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000566:	eba7 0708 	sub.w	r7, r7, r8
 800056a:	fba0 8902 	umull	r8, r9, r0, r2
 800056e:	454f      	cmp	r7, r9
 8000570:	46c6      	mov	lr, r8
 8000572:	4649      	mov	r1, r9
 8000574:	d31a      	bcc.n	80005ac <__udivmoddi4+0x294>
 8000576:	d017      	beq.n	80005a8 <__udivmoddi4+0x290>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x27a>
 800057a:	ebb3 020e 	subs.w	r2, r3, lr
 800057e:	eb67 0701 	sbc.w	r7, r7, r1
 8000582:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000586:	40f2      	lsrs	r2, r6
 8000588:	ea4c 0202 	orr.w	r2, ip, r2
 800058c:	40f7      	lsrs	r7, r6
 800058e:	e9c5 2700 	strd	r2, r7, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e70b      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e9      	b.n	8000378 <__udivmoddi4+0x60>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6fd      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005a8:	4543      	cmp	r3, r8
 80005aa:	d2e5      	bcs.n	8000578 <__udivmoddi4+0x260>
 80005ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b0:	eb69 0104 	sbc.w	r1, r9, r4
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7df      	b.n	8000578 <__udivmoddi4+0x260>
 80005b8:	4608      	mov	r0, r1
 80005ba:	e7d2      	b.n	8000562 <__udivmoddi4+0x24a>
 80005bc:	4660      	mov	r0, ip
 80005be:	e78d      	b.n	80004dc <__udivmoddi4+0x1c4>
 80005c0:	4681      	mov	r9, r0
 80005c2:	e7b9      	b.n	8000538 <__udivmoddi4+0x220>
 80005c4:	4666      	mov	r6, ip
 80005c6:	e775      	b.n	80004b4 <__udivmoddi4+0x19c>
 80005c8:	4630      	mov	r0, r6
 80005ca:	e74a      	b.n	8000462 <__udivmoddi4+0x14a>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	4439      	add	r1, r7
 80005d2:	e713      	b.n	80003fc <__udivmoddi4+0xe4>
 80005d4:	3802      	subs	r0, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e724      	b.n	8000424 <__udivmoddi4+0x10c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4293      	cmp	r3, r2
 80005f0:	bf38      	it	cc
 80005f2:	4613      	movcc	r3, r2
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4293      	cmp	r3, r2
 8000610:	bf28      	it	cs
 8000612:	4613      	movcs	r3, r2
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	fb01 f202 	mul.w	r2, r1, r2
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	1ad3      	subs	r3, r2, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	4413      	add	r3, r2
 800065a:	3b01      	subs	r3, #1
 800065c:	6839      	ldr	r1, [r7, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ffde 	bl	8000620 <lfs_aligndown>
 8000664:	4603      	mov	r3, r0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3b01      	subs	r3, #1
 800067a:	fab3 f383 	clz	r3, r3
 800067e:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	fa93 f3a3 	rbit	r3, r3
 800069c:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fe1b 	bl	80002f0 <__popcountsi2>
 80006ba:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	1ad3      	subs	r3, r2, r3
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80006e8:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff ffee 	bl	80006e0 <lfs_fromle32>
 8000704:	4603      	mov	r3, r0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ffed 	bl	800070e <lfs_frombe32>
 8000734:	4603      	mov	r3, r0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f010 fbc6 	bl	8010ed8 <malloc>
 800074c:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f010 fbc2 	bl	8010ee8 <free>
#else
    (void)p;
#endif
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	f04f 32ff 	mov.w	r2, #4294967295
 800077c:	601a      	str	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	68d8      	ldr	r0, [r3, #12]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800079c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079e:	461a      	mov	r2, r3
 80007a0:	21ff      	movs	r1, #255	; 0xff
 80007a2:	f010 fbc5 	bl	8010f30 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ac:	601a      	str	r2, [r3, #0]
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af02      	add	r7, sp, #8
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80007c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007c8:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 80007ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007ce:	441a      	add	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d80a      	bhi.n	80007f0 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f000 8124 	beq.w	8000a2c <lfs_bd_read+0x274>
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80007e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007ea:	429a      	cmp	r2, r3
 80007ec:	f0c0 811e 	bcc.w	8000a2c <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 80007f0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80007f4:	e11f      	b.n	8000a36 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80007f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007f8:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d03f      	beq.n	8000880 <lfs_bd_read+0xc8>
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000806:	429a      	cmp	r2, r3
 8000808:	d13a      	bne.n	8000880 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	685a      	ldr	r2, [r3, #4]
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000816:	429a      	cmp	r2, r3
 8000818:	d232      	bcs.n	8000880 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000820:	429a      	cmp	r2, r3
 8000822:	d324      	bcc.n	800086e <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	689a      	ldr	r2, [r3, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	6859      	ldr	r1, [r3, #4]
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	1acb      	subs	r3, r1, r3
 8000830:	4413      	add	r3, r2
 8000832:	4619      	mov	r1, r3
 8000834:	69b8      	ldr	r0, [r7, #24]
 8000836:	f7ff fee3 	bl	8000600 <lfs_min>
 800083a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	68da      	ldr	r2, [r3, #12]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000846:	1acb      	subs	r3, r1, r3
 8000848:	4413      	add	r3, r2
 800084a:	69ba      	ldr	r2, [r7, #24]
 800084c:	4619      	mov	r1, r3
 800084e:	69f8      	ldr	r0, [r7, #28]
 8000850:	f010 fb60 	bl	8010f14 <memcpy>

                data += diff;
 8000854:	69fa      	ldr	r2, [r7, #28]
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	4413      	add	r3, r2
 800085a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800085c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	4413      	add	r3, r2
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800086c:	e0de      	b.n	8000a2c <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4619      	mov	r1, r3
 8000878:	69b8      	ldr	r0, [r7, #24]
 800087a:	f7ff fec1 	bl	8000600 <lfs_min>
 800087e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000886:	429a      	cmp	r2, r3
 8000888:	d13a      	bne.n	8000900 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000896:	429a      	cmp	r2, r3
 8000898:	d232      	bcs.n	8000900 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d324      	bcc.n	80008ee <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ae:	1acb      	subs	r3, r1, r3
 80008b0:	4413      	add	r3, r2
 80008b2:	4619      	mov	r1, r3
 80008b4:	69b8      	ldr	r0, [r7, #24]
 80008b6:	f7ff fea3 	bl	8000600 <lfs_min>
 80008ba:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80008c6:	1acb      	subs	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4619      	mov	r1, r3
 80008ce:	69f8      	ldr	r0, [r7, #28]
 80008d0:	f010 fb20 	bl	8010f14 <memcpy>

                data += diff;
 80008d4:	69fa      	ldr	r2, [r7, #28]
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	4413      	add	r3, r2
 80008da:	61fb      	str	r3, [r7, #28]
                off += diff;
 80008dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	4413      	add	r3, r2
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80008e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80008ec:	e09e      	b.n	8000a2c <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	69b8      	ldr	r0, [r7, #24]
 80008fa:	f7ff fe81 	bl	8000600 <lfs_min>
 80008fe:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d336      	bcc.n	8000976 <lfs_bd_read+0x1be>
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000910:	fbb3 f1f2 	udiv	r1, r3, r2
 8000914:	fb02 f201 	mul.w	r2, r2, r1
 8000918:	1a9b      	subs	r3, r3, r2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d12b      	bne.n	8000976 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000922:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000926:	429a      	cmp	r2, r3
 8000928:	d325      	bcc.n	8000976 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	4619      	mov	r1, r3
 8000932:	69b8      	ldr	r0, [r7, #24]
 8000934:	f7ff fe74 	bl	8000620 <lfs_aligndown>
 8000938:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800093e:	685c      	ldr	r4, [r3, #4]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800094c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800094e:	47a0      	blx	r4
 8000950:	6178      	str	r0, [r7, #20]
            if (err) {
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <lfs_bd_read+0x1a4>
                return err;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	e06c      	b.n	8000a36 <lfs_bd_read+0x27e>
            }

            data += diff;
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	4413      	add	r3, r2
 8000962:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4413      	add	r3, r2
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800096c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000974:	e05a      	b.n	8000a2c <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00a      	beq.n	8000994 <lfs_bd_read+0x1dc>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000984:	429a      	cmp	r2, r3
 8000986:	d305      	bcc.n	8000994 <lfs_bd_read+0x1dc>
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <lfs_bd_read+0x288>)
 800098a:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <lfs_bd_read+0x28c>)
 800098c:	216b      	movs	r1, #107	; 0x6b
 800098e:	482e      	ldr	r0, [pc, #184]	; (8000a48 <lfs_bd_read+0x290>)
 8000990:	f010 fa48 	bl	8010e24 <__assert_func>
        rcache->block = block;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000998:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4619      	mov	r1, r3
 80009a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80009a4:	f7ff fe3c 	bl	8000620 <lfs_aligndown>
 80009a8:	4602      	mov	r2, r0
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 80009ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4619      	mov	r1, r3
 80009bc:	4610      	mov	r0, r2
 80009be:	f7ff fe44 	bl	800064a <lfs_alignup>
 80009c2:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f7ff fe17 	bl	8000600 <lfs_min>
 80009d2:	4602      	mov	r2, r0
                - rcache->off,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 80009d8:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4610      	mov	r0, r2
 80009e4:	f7ff fe0c 	bl	8000600 <lfs_min>
 80009e8:	4602      	mov	r2, r0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80009f2:	685c      	ldr	r4, [r3, #4]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6819      	ldr	r1, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	462b      	mov	r3, r5
 8000a0c:	47a0      	blx	r4
 8000a0e:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	dd05      	ble.n	8000a22 <lfs_bd_read+0x26a>
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <lfs_bd_read+0x294>)
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <lfs_bd_read+0x28c>)
 8000a1a:	2176      	movs	r1, #118	; 0x76
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <lfs_bd_read+0x290>)
 8000a1e:	f010 fa01 	bl	8010e24 <__assert_func>
        if (err) {
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <lfs_bd_read+0x274>
            return err;
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	e004      	b.n	8000a36 <lfs_bd_read+0x27e>
    while (size > 0) {
 8000a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f47f aee1 	bne.w	80007f6 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	080123d4 	.word	0x080123d4
 8000a44:	080130f0 	.word	0x080130f0
 8000a48:	08012404 	.word	0x08012404
 8000a4c:	08012418 	.word	0x08012418

08000a50 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b090      	sub	sp, #64	; 0x40
 8000a54:	af04      	add	r7, sp, #16
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a6a:	e039      	b.n	8000ae0 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2108      	movs	r1, #8
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fdc3 	bl	8000600 <lfs_min>
 8000a7a:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a80:	1ad1      	subs	r1, r2, r3
 8000a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a86:	4413      	add	r3, r2
 8000a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a8a:	9203      	str	r2, [sp, #12]
 8000a8c:	f107 0214 	add.w	r2, r7, #20
 8000a90:	9202      	str	r2, [sp, #8]
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff fe8a 	bl	80007b8 <lfs_bd_read>
 8000aa4:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <lfs_bd_cmp+0x60>
            return err;
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	e01c      	b.n	8000aea <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	18d1      	adds	r1, r2, r3
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000abc:	4618      	mov	r0, r3
 8000abe:	f010 fa1b 	bl	8010ef8 <memcmp>
 8000ac2:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	da01      	bge.n	8000ad4 <lfs_bd_cmp+0x84>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e00a      	b.n	8000aea <lfs_bd_cmp+0x9a>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	e008      	b.n	8000aea <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	4413      	add	r3, r2
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d3c1      	bcc.n	8000a6c <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3730      	adds	r7, #48	; 0x30
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b08e      	sub	sp, #56	; 0x38
 8000af6:	af04      	add	r7, sp, #16
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
 8000b08:	e030      	b.n	8000b6c <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	2108      	movs	r1, #8
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd74 	bl	8000600 <lfs_min>
 8000b18:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	1ad1      	subs	r1, r2, r3
 8000b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	4413      	add	r3, r2
 8000b26:	6a3a      	ldr	r2, [r7, #32]
 8000b28:	9203      	str	r2, [sp, #12]
 8000b2a:	f107 0214 	add.w	r2, r7, #20
 8000b2e:	9202      	str	r2, [sp, #8]
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	460b      	mov	r3, r1
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff fe3b 	bl	80007b8 <lfs_bd_read>
 8000b42:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <lfs_bd_crc+0x5c>
            return err;
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	e013      	b.n	8000b76 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f107 0114 	add.w	r1, r7, #20
 8000b56:	6a3a      	ldr	r2, [r7, #32]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f006 fd35 	bl	80075c8 <lfs_crc>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b62:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	4413      	add	r3, r2
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d3ca      	bcc.n	8000b0a <lfs_bd_crc+0x18>
    }

    return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b08c      	sub	sp, #48	; 0x30
 8000b84:	af04      	add	r7, sp, #16
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b96:	d060      	beq.n	8000c5a <lfs_bd_flush+0xda>
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f113 0f02 	cmn.w	r3, #2
 8000ba0:	d05b      	beq.n	8000c5a <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d305      	bcc.n	8000bba <lfs_bd_flush+0x3a>
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <lfs_bd_flush+0xe4>)
 8000bb0:	4a2d      	ldr	r2, [pc, #180]	; (8000c68 <lfs_bd_flush+0xe8>)
 8000bb2:	21b3      	movs	r1, #179	; 0xb3
 8000bb4:	482d      	ldr	r0, [pc, #180]	; (8000c6c <lfs_bd_flush+0xec>)
 8000bb6:	f010 f935 	bl	8010e24 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	f7ff fd3f 	bl	800064a <lfs_alignup>
 8000bcc:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bd2:	689c      	ldr	r4, [r3, #8]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	6819      	ldr	r1, [r3, #0]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	462b      	mov	r3, r5
 8000bea:	47a0      	blx	r4
 8000bec:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	dd05      	ble.n	8000c00 <lfs_bd_flush+0x80>
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <lfs_bd_flush+0xf0>)
 8000bf6:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <lfs_bd_flush+0xe8>)
 8000bf8:	21b7      	movs	r1, #183	; 0xb7
 8000bfa:	481c      	ldr	r0, [pc, #112]	; (8000c6c <lfs_bd_flush+0xec>)
 8000bfc:	f010 f912 	bl	8010e24 <__assert_func>
        if (err) {
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <lfs_bd_flush+0x8a>
            return err;
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	e028      	b.n	8000c5c <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8000c0a:	78fb      	ldrb	r3, [r7, #3]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d020      	beq.n	8000c52 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f7ff fdaa 	bl	800076c <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000c24:	69f8      	ldr	r0, [r7, #28]
 8000c26:	9003      	str	r0, [sp, #12]
 8000c28:	9102      	str	r1, [sp, #8]
 8000c2a:	9201      	str	r2, [sp, #4]
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	2100      	movs	r1, #0
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff ff0b 	bl	8000a50 <lfs_bd_cmp>
 8000c3a:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	da01      	bge.n	8000c46 <lfs_bd_flush+0xc6>
                return res;
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8000c4c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000c50:	e004      	b.n	8000c5c <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000c52:	68b9      	ldr	r1, [r7, #8]
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f7ff fd98 	bl	800078a <lfs_cache_zero>
    }

    return 0;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bdb0      	pop	{r4, r5, r7, pc}
 8000c64:	08012424 	.word	0x08012424
 8000c68:	080130fc 	.word	0x080130fc
 8000c6c:	08012404 	.word	0x08012404
 8000c70:	08012418 	.word	0x08012418

08000c74 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff fd71 	bl	800076c <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000c8a:	78fb      	ldrb	r3, [r7, #3]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f7ff ff75 	bl	8000b80 <lfs_bd_flush>
 8000c96:	6178      	str	r0, [r7, #20]
    if (err) {
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <lfs_bd_sync+0x2e>
        return err;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	e011      	b.n	8000cc6 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000cac:	4610      	mov	r0, r2
 8000cae:	4798      	blx	r3
 8000cb0:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	dd05      	ble.n	8000cc4 <lfs_bd_sync+0x50>
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <lfs_bd_sync+0x5c>)
 8000cba:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <lfs_bd_sync+0x60>)
 8000cbc:	21dd      	movs	r1, #221	; 0xdd
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <lfs_bd_sync+0x64>)
 8000cc0:	f010 f8b0 	bl	8010e24 <__assert_func>
    return err;
 8000cc4:	697b      	ldr	r3, [r7, #20]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	08012418 	.word	0x08012418
 8000cd4:	0801310c 	.word	0x0801310c
 8000cd8:	08012404 	.word	0x08012404

08000cdc <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8000cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cec:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	f113 0f02 	cmn.w	r3, #2
 8000cf4:	d00a      	beq.n	8000d0c <lfs_bd_prog+0x30>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d305      	bcc.n	8000d0c <lfs_bd_prog+0x30>
 8000d00:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <lfs_bd_prog+0x144>)
 8000d02:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <lfs_bd_prog+0x148>)
 8000d04:	21e8      	movs	r1, #232	; 0xe8
 8000d06:	4848      	ldr	r0, [pc, #288]	; (8000e28 <lfs_bd_prog+0x14c>)
 8000d08:	f010 f88c 	bl	8010e24 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8000d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d10:	441a      	add	r2, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d978      	bls.n	8000e0e <lfs_bd_prog+0x132>
 8000d1c:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <lfs_bd_prog+0x150>)
 8000d1e:	4a41      	ldr	r2, [pc, #260]	; (8000e24 <lfs_bd_prog+0x148>)
 8000d20:	21e9      	movs	r1, #233	; 0xe9
 8000d22:	4841      	ldr	r0, [pc, #260]	; (8000e28 <lfs_bd_prog+0x14c>)
 8000d24:	f010 f87e 	bl	8010e24 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d151      	bne.n	8000dd6 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8000d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d34c      	bcc.n	8000dd6 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	4413      	add	r3, r2
                off >= pcache->off &&
 8000d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d243      	bcs.n	8000dd6 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	6859      	ldr	r1, [r3, #4]
 8000d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5a:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d62:	f7ff fc4d 	bl	8000600 <lfs_min>
 8000d66:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	69f9      	ldr	r1, [r7, #28]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f010 f8ca 	bl	8010f14 <memcpy>

            data += diff;
 8000d80:	69fa      	ldr	r2, [r7, #28]
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4413      	add	r3, r2
 8000d86:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8000d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	6898      	ldr	r0, [r3, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4619      	mov	r1, r3
 8000da6:	f7ff fc1b 	bl	80005e0 <lfs_max>
 8000daa:	4602      	mov	r2, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d127      	bne.n	8000e0e <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fedb 	bl	8000b80 <lfs_bd_flush>
 8000dca:	6178      	str	r0, [r7, #20]
                if (err) {
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d01d      	beq.n	8000e0e <lfs_bd_prog+0x132>
                    return err;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	e01f      	b.n	8000e16 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dde:	d006      	beq.n	8000dee <lfs_bd_prog+0x112>
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <lfs_bd_prog+0x154>)
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <lfs_bd_prog+0x148>)
 8000de4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <lfs_bd_prog+0x14c>)
 8000dea:	f010 f81b 	bl	8010e24 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000df2:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dfe:	f7ff fc0f 	bl	8000620 <lfs_aligndown>
 8000e02:	4602      	mov	r2, r0
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d189      	bne.n	8000d28 <lfs_bd_prog+0x4c>
    }

    return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	08012448 	.word	0x08012448
 8000e24:	08013118 	.word	0x08013118
 8000e28:	08012404 	.word	0x08012404
 8000e2c:	08012480 	.word	0x08012480
 8000e30:	080124a4 	.word	0x080124a4

08000e34 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d306      	bcc.n	8000e56 <lfs_bd_erase+0x22>
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <lfs_bd_erase+0x54>)
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <lfs_bd_erase+0x58>)
 8000e4c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <lfs_bd_erase+0x5c>)
 8000e52:	f00f ffe7 	bl	8010e24 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000e60:	6839      	ldr	r1, [r7, #0]
 8000e62:	4610      	mov	r0, r2
 8000e64:	4798      	blx	r3
 8000e66:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	dd06      	ble.n	8000e7c <lfs_bd_erase+0x48>
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <lfs_bd_erase+0x60>)
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <lfs_bd_erase+0x58>)
 8000e72:	f44f 718b 	mov.w	r1, #278	; 0x116
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <lfs_bd_erase+0x5c>)
 8000e78:	f00f ffd4 	bl	8010e24 <__assert_func>
    return err;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	080124c8 	.word	0x080124c8
 8000e8c:	08013124 	.word	0x08013124
 8000e90:	08012404 	.word	0x08012404
 8000e94:	08012418 	.word	0x08012418

08000e98 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed2:	d005      	beq.n	8000ee0 <lfs_pair_isnull+0x1e>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ede:	d101      	bne.n	8000ee4 <lfs_pair_isnull+0x22>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <lfs_pair_isnull+0x24>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d017      	beq.n	8000f3e <lfs_pair_cmp+0x46>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3304      	adds	r3, #4
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3304      	adds	r3, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d00f      	beq.n	8000f3e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3304      	adds	r3, #4
 8000f26:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d008      	beq.n	8000f3e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d001      	beq.n	8000f3e <lfs_pair_cmp+0x46>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <lfs_pair_cmp+0x48>
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d107      	bne.n	8000f72 <lfs_pair_issync+0x26>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d00d      	beq.n	8000f8e <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d108      	bne.n	8000f92 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3304      	adds	r3, #4
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d101      	bne.n	8000f92 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <lfs_pair_issync+0x48>
 8000f92:	2300      	movs	r3, #0
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8000fa6:	b590      	push	{r4, r7, lr}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fb94 	bl	80006e0 <lfs_fromle32>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	1d1c      	adds	r4, r3, #4
 8000fc8:	4610      	mov	r0, r2
 8000fca:	f7ff fb89 	bl	80006e0 <lfs_fromle32>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6023      	str	r3, [r4, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}

08000fda <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8000fda:	b590      	push	{r4, r7, lr}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fb85 	bl	80006f6 <lfs_tole32>
 8000fec:	4602      	mov	r2, r0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	1d1c      	adds	r4, r3, #4
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	f7ff fb7a 	bl	80006f6 <lfs_tole32>
 8001002:	4603      	mov	r3, r0
 8001004:	6023      	str	r3, [r4, #0]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}

0800100e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	43db      	mvns	r3, r3
 800101a:	0fdb      	lsrs	r3, r3, #31
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	059b      	lsls	r3, r3, #22
 8001036:	159b      	asrs	r3, r3, #22
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0d1b      	lsrs	r3, r3, #20
 800105c:	b29b      	uxth	r3, r3
 800105e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001062:	b29b      	uxth	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	0d1b      	lsrs	r3, r3, #20
 800107c:	b29b      	uxth	r3, r3
 800107e:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8001082:	b29b      	uxth	r3, r3
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	0d1b      	lsrs	r3, r3, #20
 800109c:	b29b      	uxth	r3, r3
 800109e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010a2:	b29b      	uxth	r3, r3
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	0d1b      	lsrs	r3, r3, #20
 80010bc:	b2db      	uxtb	r3, r3
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffec 	bl	80010b0 <lfs_tag_chunk>
 80010d8:	4603      	mov	r3, r0
 80010da:	b25b      	sxtb	r3, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	0a9b      	lsrs	r3, r3, #10
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010f6:	b29b      	uxth	r3, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff7f 	bl	800102a <lfs_tag_isdelete>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ffe5 	bl	8001104 <lfs_tag_size>
 800113a:	4603      	mov	r3, r0
 800113c:	3304      	adds	r3, #4
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e012      	b.n	800117c <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	4403      	add	r3, r0
 8001172:	404a      	eors	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b02      	cmp	r3, #2
 8001180:	dde9      	ble.n	8001156 <lfs_gstate_xor+0x10>
    }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e00b      	b.n	80011b6 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <lfs_gstate_iszero+0x20>
            return false;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e006      	b.n	80011be <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	ddf0      	ble.n	800119e <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80011bc:	2301      	movs	r3, #1
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff94 	bl	8001104 <lfs_tag_size>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf14      	ite	ne
 80011e2:	2301      	movne	r3, #1
 80011e4:	2300      	moveq	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff81 	bl	8001104 <lfs_tag_size>
 8001202:	4603      	mov	r3, r0
 8001204:	b2db      	uxtb	r3, r3
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff18 	bl	8001050 <lfs_tag_type1>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5f 	bl	8001104 <lfs_tag_size>
 8001246:	4603      	mov	r3, r0
 8001248:	0a5b      	lsrs	r3, r3, #9
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fef0 	bl	8001050 <lfs_tag_type1>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <lfs_gstate_hasmovehere+0x30>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3304      	adds	r3, #4
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe3b 	bl	8000ef8 <lfs_pair_cmp>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <lfs_gstate_hasmovehere+0x30>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <lfs_gstate_hasmovehere+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fa19 	bl	80006e0 <lfs_fromle32>
 80012ae:	4602      	mov	r2, r0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fa11 	bl	80006e0 <lfs_fromle32>
 80012be:	4602      	mov	r2, r0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fa09 	bl	80006e0 <lfs_fromle32>
 80012ce:	4602      	mov	r2, r0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fa04 	bl	80006f6 <lfs_tole32>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f9fc 	bl	80006f6 <lfs_tole32>
 80012fe:	4602      	mov	r2, r0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f9f4 	bl	80006f6 <lfs_tole32>
 800130e:	4602      	mov	r2, r0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f9d9 	bl	80006e0 <lfs_fromle32>
 800132e:	4602      	mov	r2, r0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f9d1 	bl	80006e0 <lfs_fromle32>
 800133e:	4602      	mov	r2, r0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	605a      	str	r2, [r3, #4]
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f9cc 	bl	80006f6 <lfs_tole32>
 800135e:	4602      	mov	r2, r0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f9c4 	bl	80006f6 <lfs_tole32>
 800136e:	4602      	mov	r2, r0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	605a      	str	r2, [r3, #4]
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f9a9 	bl	80006e0 <lfs_fromle32>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f9a1 	bl	80006e0 <lfs_fromle32>
 800139e:	4602      	mov	r2, r0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f99c 	bl	80006f6 <lfs_tole32>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f994 	bl	80006f6 <lfs_tole32>
 80013ce:	4602      	mov	r2, r0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	605a      	str	r2, [r3, #4]
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f979 	bl	80006e0 <lfs_fromle32>
 80013ee:	4602      	mov	r2, r0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f971 	bl	80006e0 <lfs_fromle32>
 80013fe:	4602      	mov	r2, r0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f969 	bl	80006e0 <lfs_fromle32>
 800140e:	4602      	mov	r2, r0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f961 	bl	80006e0 <lfs_fromle32>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f959 	bl	80006e0 <lfs_fromle32>
 800142e:	4602      	mov	r2, r0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f951 	bl	80006e0 <lfs_fromle32>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	615a      	str	r2, [r3, #20]
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f94c 	bl	80006f6 <lfs_tole32>
 800145e:	4602      	mov	r2, r0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f944 	bl	80006f6 <lfs_tole32>
 800146e:	4602      	mov	r2, r0
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f93c 	bl	80006f6 <lfs_tole32>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f934 	bl	80006f6 <lfs_tole32>
 800148e:	4602      	mov	r2, r0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f92c 	bl	80006f6 <lfs_tole32>
 800149e:	4602      	mov	r2, r0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f924 	bl	80006f6 <lfs_tole32>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	615a      	str	r2, [r3, #20]
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e009      	b.n	80014e0 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d101      	bne.n	80014da <lfs_mlist_isopen+0x1e>
            return true;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e007      	b.n	80014ea <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f1      	bne.n	80014cc <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3328      	adds	r3, #40	; 0x28
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e00d      	b.n	8001524 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d105      	bne.n	800151e <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	601a      	str	r2, [r3, #0]
            break;
 800151c:	e007      	b.n	800152e <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ed      	bne.n	8001508 <lfs_mlist_remove+0x12>
        }
    }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <lfs_fs_disk_version+0x18>)
    }
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	00020001 	.word	0x00020001

0800157c <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ffeb 	bl	8001560 <lfs_fs_disk_version>
 800158a:	4603      	mov	r3, r0
 800158c:	0c1b      	lsrs	r3, r3, #16
 800158e:	b29b      	uxth	r3, r3

}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ffdd 	bl	8001560 <lfs_fs_disk_version>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29b      	uxth	r3, r3
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015cc:	4413      	add	r3, r2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->free.off)
 80015d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80015d6:	fb02 f201 	mul.w	r2, r2, r1
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d212      	bcs.n	800160e <lfs_alloc_lookahead+0x5c>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	009a      	lsls	r2, r3, #2
 80015f2:	440a      	add	r2, r1
 80015f4:	6811      	ldr	r1, [r2, #0]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f002 021f 	and.w	r2, r2, #31
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4403      	add	r3, r0
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->block_count;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ffe5 	bl	800161c <lfs_alloc_ack>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <lfs_fs_rawgc>:

#ifndef LFS_READONLY
static int lfs_fs_rawgc(lfs_t *lfs) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    // Move free offset at the first unused block (lfs->free.i)
    // lfs->free.i is equal lfs->free.size when all blocks are used
    lfs->free.off = (lfs->free.off + lfs->free.i) % lfs->block_count;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	4413      	add	r3, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001672:	fbb3 f1f2 	udiv	r1, r3, r2
 8001676:	fb02 f201 	mul.w	r2, r2, r1
 800167a:	1a9a      	subs	r2, r3, r2
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	00da      	lsls	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f7fe ffb6 	bl	8000600 <lfs_min>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	65da      	str	r2, [r3, #92]	; 0x5c

    // find mask of free blocks from tree
    memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	461a      	mov	r2, r3
 80016ac:	2100      	movs	r1, #0
 80016ae:	f00f fc3f 	bl	8010f30 <memset>
    int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 80016b2:	2301      	movs	r3, #1
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4909      	ldr	r1, [pc, #36]	; (80016dc <lfs_fs_rawgc+0x80>)
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f004 fffd 	bl	80066b8 <lfs_fs_rawtraverse>
 80016be:	60f8      	str	r0, [r7, #12]
    if (err) {
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <lfs_fs_rawgc+0x74>
        lfs_alloc_drop(lfs);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffb6 	bl	8001638 <lfs_alloc_drop>
        return err;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	e000      	b.n	80016d2 <lfs_fs_rawgc+0x76>
    }

    return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	080015b3 	.word	0x080015b3

080016e0 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80016ea:	e04e      	b.n	800178a <lfs_alloc+0xaa>
            lfs_block_t off = lfs->free.i;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	095b      	lsrs	r3, r3, #5
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d131      	bne.n	800178a <lfs_alloc+0xaa>
                // found a free block
                *block = (lfs->free.off + off) % lfs->block_count;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001732:	fbb3 f1f2 	udiv	r1, r3, r2
 8001736:	fb02 f201 	mul.w	r2, r2, r1
 800173a:	1a9a      	subs	r2, r3, r2
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8001740:	e009      	b.n	8001756 <lfs_alloc+0x76>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	429a      	cmp	r2, r3
 8001760:	d011      	beq.n	8001786 <lfs_alloc+0xa6>
                        (lfs->free.buffer[lfs->free.i / 32]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	2101      	movs	r1, #1
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1dd      	bne.n	8001742 <lfs_alloc+0x62>
                }

                return 0;
 8001786:	2300      	movs	r3, #0
 8001788:	e021      	b.n	80017ce <lfs_alloc+0xee>
        while (lfs->free.i != lfs->free.size) {
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	429a      	cmp	r2, r3
 8001794:	d1aa      	bne.n	80016ec <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10f      	bne.n	80017be <lfs_alloc+0xde>
            LFS_ERROR("No more free space %"PRIu32,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a6:	4413      	add	r3, r2
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <lfs_alloc+0xf8>)
 80017aa:	9200      	str	r2, [sp, #0]
 80017ac:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 80017b0:	490a      	ldr	r1, [pc, #40]	; (80017dc <lfs_alloc+0xfc>)
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <lfs_alloc+0x100>)
 80017b4:	f00f ff5c 	bl	8011670 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80017b8:	f06f 031b 	mvn.w	r3, #27
 80017bc:	e007      	b.n	80017ce <lfs_alloc+0xee>
        }

        int err = lfs_fs_rawgc(lfs);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff4c 	bl	800165c <lfs_fs_rawgc>
 80017c4:	60f8      	str	r0, [r7, #12]
        if(err) {
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d08e      	beq.n	80016ea <lfs_alloc+0xa>
            return err;
 80017cc:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	0801250c 	.word	0x0801250c
 80017dc:	08012404 	.word	0x08012404
 80017e0:	080124e4 	.word	0x080124e4

080017e4 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b08f      	sub	sp, #60	; 0x3c
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	333c      	adds	r3, #60	; 0x3c
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fd26 	bl	800125c <lfs_gstate_hasmovehere>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80b9 	beq.w	800198a <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fc63 	bl	80010e4 <lfs_tag_id>
 800181e:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80b2 	beq.w	800198a <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc5a 	bl	80010e4 <lfs_tag_id>
 8001830:	4603      	mov	r3, r0
 8001832:	461c      	mov	r4, r3
 8001834:	6838      	ldr	r0, [r7, #0]
 8001836:	f7ff fc55 	bl	80010e4 <lfs_tag_id>
 800183a:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800183c:	429c      	cmp	r4, r3
 800183e:	f200 80a4 	bhi.w	800198a <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001848:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800184a:	e09e      	b.n	800198a <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fc65 	bl	800111e <lfs_tag_dsize>
 8001854:	4602      	mov	r2, r0
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001860:	68f9      	ldr	r1, [r7, #12]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2204      	movs	r2, #4
 8001868:	9203      	str	r2, [sp, #12]
 800186a:	f107 0210 	add.w	r2, r7, #16
 800186e:	9202      	str	r2, [sp, #8]
 8001870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001872:	9201      	str	r2, [sp, #4]
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2304      	movs	r3, #4
 8001878:	460a      	mov	r2, r1
 800187a:	2100      	movs	r1, #0
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7fe ff9b 	bl	80007b8 <lfs_bd_read>
 8001882:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <lfs_dir_getslice+0xaa>
            return err;
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	e089      	b.n	80019a2 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe ff3c 	bl	800070e <lfs_frombe32>
 8001896:	4602      	mov	r2, r0
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4053      	eors	r3, r2
 800189c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018a0:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fc1e 	bl	80010e4 <lfs_tag_id>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d02b      	beq.n	8001906 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80018ae:	69f8      	ldr	r0, [r7, #28]
 80018b0:	f7ff fbce 	bl	8001050 <lfs_tag_type1>
 80018b4:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80018b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ba:	d124      	bne.n	8001906 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80018bc:	69f8      	ldr	r0, [r7, #28]
 80018be:	f7ff fc11 	bl	80010e4 <lfs_tag_id>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461c      	mov	r4, r3
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fc09 	bl	80010e4 <lfs_tag_id>
 80018d2:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80018d4:	429c      	cmp	r4, r3
 80018d6:	d816      	bhi.n	8001906 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	1ad2      	subs	r2, r2, r3
 80018de:	4b33      	ldr	r3, [pc, #204]	; (80019ac <lfs_dir_getslice+0x1c8>)
 80018e0:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80018e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d102      	bne.n	80018f6 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 80018f0:	f06f 0301 	mvn.w	r3, #1
 80018f4:	e055      	b.n	80019a2 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80018f6:	69f8      	ldr	r0, [r7, #28]
 80018f8:	f7ff fbe7 	bl	80010ca <lfs_tag_splice>
 80018fc:	4603      	mov	r3, r0
 80018fe:	029a      	lsls	r2, r3, #10
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	4413      	add	r3, r2
 8001904:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	1ad2      	subs	r2, r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	405a      	eors	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d138      	bne.n	800198a <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8001918:	69f8      	ldr	r0, [r7, #28]
 800191a:	f7ff fb86 	bl	800102a <lfs_tag_isdelete>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8001924:	f06f 0301 	mvn.w	r3, #1
 8001928:	e03b      	b.n	80019a2 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800192a:	69f8      	ldr	r0, [r7, #28]
 800192c:	f7ff fbea 	bl	8001104 <lfs_tag_size>
 8001930:	4603      	mov	r3, r0
 8001932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe63 	bl	8000600 <lfs_min>
 800193a:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001946:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001948:	3204      	adds	r2, #4
 800194a:	6979      	ldr	r1, [r7, #20]
 800194c:	9103      	str	r1, [sp, #12]
 800194e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001950:	9102      	str	r1, [sp, #8]
 8001952:	9201      	str	r2, [sp, #4]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	4602      	mov	r2, r0
 800195a:	2100      	movs	r1, #0
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7fe ff2b 	bl	80007b8 <lfs_bd_read>
 8001962:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <lfs_dir_getslice+0x18a>
                return err;
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	e019      	b.n	80019a2 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800196e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	18d0      	adds	r0, r2, r3
 8001974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	461a      	mov	r2, r3
 800197c:	2100      	movs	r1, #0
 800197e:	f00f fad7 	bl	8010f30 <memset>

            return tag + gdiff;
 8001982:	6a3a      	ldr	r2, [r7, #32]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	e00b      	b.n	80019a2 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fbc6 	bl	800111e <lfs_tag_dsize>
 8001992:	4603      	mov	r3, r0
 8001994:	3304      	adds	r3, #4
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	429a      	cmp	r2, r3
 800199a:	f4bf af57 	bcs.w	800184c <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800199e:	f06f 0301 	mvn.w	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	372c      	adds	r7, #44	; 0x2c
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}
 80019aa:	bf00      	nop
 80019ac:	000ffc00 	.word	0x000ffc00

080019b0 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 80019be:	6838      	ldr	r0, [r7, #0]
 80019c0:	f7ff fba0 	bl	8001104 <lfs_tag_size>
 80019c4:	4603      	mov	r3, r0
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff ff04 	bl	80017e4 <lfs_dir_getslice>
 80019dc:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b08c      	sub	sp, #48	; 0x30
 80019ea:	af04      	add	r7, sp, #16
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80019f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f6:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 80019f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019fc:	441a      	add	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f240 80c0 	bls.w	8001b8a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001a0a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001a0e:	e0c1      	b.n	8001b94 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a12:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d03f      	beq.n	8001a9a <lfs_dir_getread+0xb4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f113 0f02 	cmn.w	r3, #2
 8001a22:	d13a      	bne.n	8001a9a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d232      	bcs.n	8001a9a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d324      	bcc.n	8001a88 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6859      	ldr	r1, [r3, #4]
 8001a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a48:	1acb      	subs	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	69b8      	ldr	r0, [r7, #24]
 8001a50:	f7fe fdd6 	bl	8000600 <lfs_min>
 8001a54:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a60:	1acb      	subs	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4619      	mov	r1, r3
 8001a68:	69f8      	ldr	r0, [r7, #28]
 8001a6a:	f00f fa53 	bl	8010f14 <memcpy>

                data += diff;
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	4413      	add	r3, r2
 8001a74:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001a86:	e080      	b.n	8001b8a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	4619      	mov	r1, r3
 8001a92:	69b8      	ldr	r0, [r7, #24]
 8001a94:	f7fe fdb4 	bl	8000600 <lfs_min>
 8001a98:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f113 0f02 	cmn.w	r3, #2
 8001aa2:	d13a      	bne.n	8001b1a <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d232      	bcs.n	8001b1a <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d324      	bcc.n	8001b08 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	1acb      	subs	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	69b8      	ldr	r0, [r7, #24]
 8001ad0:	f7fe fd96 	bl	8000600 <lfs_min>
 8001ad4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ae0:	1acb      	subs	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	69f8      	ldr	r0, [r7, #28]
 8001aea:	f00f fa13 	bl	8010f14 <memcpy>

                data += diff;
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	4413      	add	r3, r2
 8001af4:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	4413      	add	r3, r2
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001b06:	e040      	b.n	8001b8a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4619      	mov	r1, r3
 8001b12:	69b8      	ldr	r0, [r7, #24]
 8001b14:	f7fe fd74 	bl	8000600 <lfs_min>
 8001b18:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f06f 0201 	mvn.w	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b2c:	f7fe fd78 	bl	8000620 <lfs_aligndown>
 8001b30:	4602      	mov	r2, r0
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	441a      	add	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4619      	mov	r1, r3
 8001b44:	4610      	mov	r0, r2
 8001b46:	f7fe fd80 	bl	800064a <lfs_alignup>
 8001b4a:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7fe fd53 	bl	8000600 <lfs_min>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	6889      	ldr	r1, [r1, #8]
 8001b6c:	9102      	str	r1, [sp, #8]
 8001b6e:	9201      	str	r2, [sp, #4]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fe33 	bl	80017e4 <lfs_dir_getslice>
 8001b7e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da01      	bge.n	8001b8a <lfs_dir_getread+0x1a4>
            return err;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	e004      	b.n	8001b94 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f af3f 	bne.w	8001a10 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <lfs_dir_traverse_filter+0x1e>
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <lfs_dir_traverse_filter+0xac>)
 8001bb8:	e000      	b.n	8001bbc <lfs_dir_traverse_filter+0x20>
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001bbc:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	405a      	eors	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d014      	beq.n	8001bf8 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fa29 	bl	800102a <lfs_tag_isdelete>
 8001bd8:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <lfs_dir_traverse_filter+0xac>)
 8001be2:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	6819      	ldr	r1, [r3, #0]
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <lfs_dir_traverse_filter+0xb4>)
 8001bea:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001bec:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001bf0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d104      	bne.n	8001c02 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
        return true;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e01e      	b.n	8001c40 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	f7ff fa24 	bl	8001050 <lfs_tag_type1>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d116      	bne.n	8001c3e <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001c10:	68b8      	ldr	r0, [r7, #8]
 8001c12:	f7ff fa67 	bl	80010e4 <lfs_tag_id>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461c      	mov	r4, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fa60 	bl	80010e4 <lfs_tag_id>
 8001c24:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001c26:	429c      	cmp	r4, r3
 8001c28:	d809      	bhi.n	8001c3e <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f7ff fa4d 	bl	80010ca <lfs_tag_splice>
 8001c30:	4603      	mov	r3, r0
 8001c32:	029a      	lsls	r2, r3, #10
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	441a      	add	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	7ffffc00 	.word	0x7ffffc00
 8001c4c:	700ffc00 	.word	0x700ffc00
 8001c50:	000ffc00 	.word	0x000ffc00

08001c54 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b0c1      	sub	sp, #260	; 0x104
 8001c58:	af04      	add	r7, sp, #16
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001c68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001c72:	6838      	ldr	r0, [r7, #0]
 8001c74:	f7ff fa53 	bl	800111e <lfs_tag_dsize>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	441a      	add	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d237      	bcs.n	8001cf6 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	f7ff fa49 	bl	800111e <lfs_tag_dsize>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	9203      	str	r2, [sp, #12]
 8001c9e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001ca2:	9202      	str	r2, [sp, #8]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	9201      	str	r2, [sp, #4]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2304      	movs	r3, #4
 8001cac:	460a      	mov	r2, r1
 8001cae:	2100      	movs	r1, #0
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7fe fd81 	bl	80007b8 <lfs_bd_read>
 8001cb6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8001cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <lfs_dir_traverse+0x74>
                    return err;
 8001cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cc6:	e3d0      	b.n	800246a <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fd1f 	bl	800070e <lfs_frombe32>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	4053      	eors	r3, r2
 8001cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cda:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8001ce8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	e01b      	b.n	8001d2e <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8001cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	dd13      	ble.n	8001d26 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8001cfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8001d06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8001d10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001d14:	3308      	adds	r3, #8
 8001d16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8001d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d24:	e003      	b.n	8001d2e <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8001d2c:	e2bd      	b.n	80022aa <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8001d2e:	4b86      	ldr	r3, [pc, #536]	; (8001f48 <lfs_dir_traverse+0x2f4>)
 8001d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8001d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d3a:	405a      	eors	r2, r3
 8001d3c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001d40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d44:	400b      	ands	r3, r1
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 82a1 	bne.w	8002290 <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8001d4e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001d52:	f7ff f9c7 	bl	80010e4 <lfs_tag_id>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80ff 	beq.w	8001f5c <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8001d5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d906      	bls.n	8001d74 <lfs_dir_traverse+0x120>
 8001d66:	4b79      	ldr	r3, [pc, #484]	; (8001f4c <lfs_dir_traverse+0x2f8>)
 8001d68:	4a79      	ldr	r2, [pc, #484]	; (8001f50 <lfs_dir_traverse+0x2fc>)
 8001d6a:	f240 319f 	movw	r1, #927	; 0x39f
 8001d6e:	4879      	ldr	r0, [pc, #484]	; (8001f54 <lfs_dir_traverse+0x300>)
 8001d70:	f00f f858 	bl	8010e24 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8001d74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d86:	4413      	add	r3, r2
 8001d88:	3b98      	subs	r3, #152	; 0x98
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d92:	4613      	mov	r3, r2
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b94      	subs	r3, #148	; 0x94
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001daa:	4613      	mov	r3, r2
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001db6:	4413      	add	r3, r2
 8001db8:	3b90      	subs	r3, #144	; 0x90
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b8c      	subs	r3, #140	; 0x8c
 8001dd2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001de8:	4413      	add	r3, r2
 8001dea:	3b88      	subs	r3, #136	; 0x88
 8001dec:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001df6:	4613      	mov	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e02:	4413      	add	r3, r2
 8001e04:	3b84      	subs	r3, #132	; 0x84
 8001e06:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e10:	4613      	mov	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b80      	subs	r3, #128	; 0x80
 8001e20:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e36:	4413      	add	r3, r2
 8001e38:	3b7c      	subs	r3, #124	; 0x7c
 8001e3a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001e3e:	801a      	strh	r2, [r3, #0]
 8001e40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e44:	4613      	mov	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e50:	4413      	add	r3, r2
 8001e52:	3b7a      	subs	r3, #122	; 0x7a
 8001e54:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b78      	subs	r3, #120	; 0x78
 8001e6e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e78:	4613      	mov	r3, r2
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e84:	4413      	add	r3, r2
 8001e86:	3b74      	subs	r3, #116	; 0x74
 8001e88:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b70      	subs	r3, #112	; 0x70
 8001ea2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b6c      	subs	r3, #108	; 0x6c
 8001ebc:	6019      	str	r1, [r3, #0]
 8001ebe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b68      	subs	r3, #104	; 0x68
 8001ed2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b68      	subs	r3, #104	; 0x68
 8001eec:	3304      	adds	r3, #4
 8001eee:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001ef2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef6:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8001efa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001efe:	3301      	adds	r3, #1
 8001f00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <lfs_dir_traverse+0x304>)
 8001f24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8001f28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f2c:	1e5a      	subs	r2, r3, #1
 8001f2e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001f32:	4613      	mov	r3, r2
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	3328      	adds	r3, #40	; 0x28
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3304      	adds	r3, #4
 8001f40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f44:	e695      	b.n	8001c72 <lfs_dir_traverse+0x1e>
 8001f46:	bf00      	nop
 8001f48:	7ff00000 	.word	0x7ff00000
 8001f4c:	08012510 	.word	0x08012510
 8001f50:	08013134 	.word	0x08013134
 8001f54:	08012404 	.word	0x08012404
 8001f58:	08001b9d 	.word	0x08001b9d
                continue;
            }
        }

popped:
 8001f5c:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8001f5e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001f62:	f7ff f8bf 	bl	80010e4 <lfs_tag_id>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f8b8 	bl	80010e4 <lfs_tag_id>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8001f78:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	f200 8189 	bhi.w	8002294 <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f8ad 	bl	80010e4 <lfs_tag_id>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f240 817e 	bls.w	8002294 <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8001f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f878 	bl	8001090 <lfs_tag_type3>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f43f ae65 	beq.w	8001c72 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8001fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f870 	bl	8001090 <lfs_tag_type3>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f240 1301 	movw	r3, #257	; 0x101
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 80ed 	bne.w	8002198 <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8001fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fc2:	4ab7      	ldr	r2, [pc, #732]	; (80022a0 <lfs_dir_traverse+0x64c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	f000 8167 	beq.w	8002298 <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8001fca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fce:	4613      	mov	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b98      	subs	r3, #152	; 0x98
 8001fde:	4618      	mov	r0, r3
 8001fe0:	233c      	movs	r3, #60	; 0x3c
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f00e ffa3 	bl	8010f30 <memset>
 8001fea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b98      	subs	r3, #152	; 0x98
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002012:	4413      	add	r3, r2
 8002014:	3b94      	subs	r3, #148	; 0x94
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800202a:	4413      	add	r3, r2
 800202c:	3b90      	subs	r3, #144	; 0x90
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002042:	4413      	add	r3, r2
 8002044:	3b8c      	subs	r3, #140	; 0x8c
 8002046:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002050:	4613      	mov	r3, r2
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800205c:	4413      	add	r3, r2
 800205e:	3b88      	subs	r3, #136	; 0x88
 8002060:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002076:	4413      	add	r3, r2
 8002078:	3b84      	subs	r3, #132	; 0x84
 800207a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002084:	4613      	mov	r3, r2
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002090:	4413      	add	r3, r2
 8002092:	3b80      	subs	r3, #128	; 0x80
 8002094:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020aa:	4413      	add	r3, r2
 80020ac:	3b7c      	subs	r3, #124	; 0x7c
 80020ae:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80020b2:	801a      	strh	r2, [r3, #0]
 80020b4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020b8:	4613      	mov	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020c4:	4413      	add	r3, r2
 80020c6:	3b7a      	subs	r3, #122	; 0x7a
 80020c8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020d2:	4613      	mov	r3, r2
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020de:	4413      	add	r3, r2
 80020e0:	3b78      	subs	r3, #120	; 0x78
 80020e2:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020f8:	4413      	add	r3, r2
 80020fa:	3b74      	subs	r3, #116	; 0x74
 80020fc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002112:	4413      	add	r3, r2
 8002114:	3b70      	subs	r3, #112	; 0x70
 8002116:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800211a:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800211c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002120:	3301      	adds	r3, #1
 8002122:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ffeb 	bl	8001104 <lfs_tag_size>
 800212e:	4603      	mov	r3, r0
 8002130:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe ffd4 	bl	80010e4 <lfs_tag_id>
 800213c:	4603      	mov	r3, r0
 800213e:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8002142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002146:	60bb      	str	r3, [r7, #8]
            off = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800215e:	4b51      	ldr	r3, [pc, #324]	; (80022a4 <lfs_dir_traverse+0x650>)
 8002160:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002164:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002168:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 800216c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002170:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8002174:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002178:	3301      	adds	r3, #1
 800217a:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 800217e:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002182:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	b29a      	uxth	r2, r3
 800218a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800218e:	4413      	add	r3, r2
 8002190:	b29b      	uxth	r3, r3
 8002192:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8002196:	e56c      	b.n	8001c72 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe ff78 	bl	8001090 <lfs_tag_type3>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80021a6:	d159      	bne.n	800225c <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021ae:	e04b      	b.n	8002248 <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 80021b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80021b8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	461a      	mov	r2, r3
 80021c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80021d2:	051c      	lsls	r4, r3, #20
 80021d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe ff84 	bl	80010e4 <lfs_tag_id>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80021e4:	4413      	add	r3, r2
 80021e6:	029b      	lsls	r3, r3, #10
 80021e8:	ea44 0103 	orr.w	r1, r4, r3
 80021ec:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	461a      	mov	r2, r3
 80021fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021fe:	4413      	add	r3, r2
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8002204:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	461a      	mov	r2, r3
 8002212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002216:	4413      	add	r3, r2
 8002218:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800221a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800221e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002222:	4798      	blx	r3
 8002224:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8002228:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800222c:	2b00      	cmp	r3, #0
 800222e:	da02      	bge.n	8002236 <lfs_dir_traverse+0x5e2>
                    return res;
 8002230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002234:	e119      	b.n	800246a <lfs_dir_traverse+0x816>
                }

                if (res) {
 8002236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d12e      	bne.n	800229c <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800223e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002242:	3301      	adds	r3, #1
 8002244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ff5a 	bl	8001104 <lfs_tag_size>
 8002250:	4602      	mov	r2, r0
 8002252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002256:	4293      	cmp	r3, r2
 8002258:	d3aa      	bcc.n	80021b0 <lfs_dir_traverse+0x55c>
 800225a:	e50a      	b.n	8001c72 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800225c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002260:	029a      	lsls	r2, r3, #10
 8002262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002264:	18d1      	adds	r1, r2, r3
 8002266:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800226a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800226e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002272:	4798      	blx	r3
 8002274:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8002278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800227c:	2b00      	cmp	r3, #0
 800227e:	da02      	bge.n	8002286 <lfs_dir_traverse+0x632>
                return res;
 8002280:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002284:	e0f1      	b.n	800246a <lfs_dir_traverse+0x816>
            }

            if (res) {
 8002286:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <lfs_dir_traverse+0x654>
 800228e:	e4f0      	b.n	8001c72 <lfs_dir_traverse+0x1e>
                continue;
 8002290:	bf00      	nop
 8002292:	e4ee      	b.n	8001c72 <lfs_dir_traverse+0x1e>
            continue;
 8002294:	bf00      	nop
 8002296:	e4ec      	b.n	8001c72 <lfs_dir_traverse+0x1e>
                continue;
 8002298:	bf00      	nop
 800229a:	e4ea      	b.n	8001c72 <lfs_dir_traverse+0x1e>
                    break;
 800229c:	bf00      	nop
        {
 800229e:	e4e8      	b.n	8001c72 <lfs_dir_traverse+0x1e>
 80022a0:	08001b9d 	.word	0x08001b9d
 80022a4:	600ffc00 	.word	0x600ffc00
                break;
 80022a8:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80022aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80d9 	beq.w	8002466 <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80022b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022b8:	1e5a      	subs	r2, r3, #1
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022c6:	4413      	add	r3, r2
 80022c8:	3b98      	subs	r3, #152	; 0x98
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80022ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022e0:	4413      	add	r3, r2
 80022e2:	3b94      	subs	r3, #148	; 0x94
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80022e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022fa:	4413      	add	r3, r2
 80022fc:	3b90      	subs	r3, #144	; 0x90
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8002302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002306:	1e5a      	subs	r2, r3, #1
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002314:	4413      	add	r3, r2
 8002316:	3b8c      	subs	r3, #140	; 0x8c
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 800231e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002322:	1e5a      	subs	r2, r3, #1
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002330:	4413      	add	r3, r2
 8002332:	3b88      	subs	r3, #136	; 0x88
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 800233a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800233e:	1e5a      	subs	r2, r3, #1
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800234c:	4413      	add	r3, r2
 800234e:	3b84      	subs	r3, #132	; 0x84
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8002356:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002368:	4413      	add	r3, r2
 800236a:	3b80      	subs	r3, #128	; 0x80
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8002372:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002384:	4413      	add	r3, r2
 8002386:	3b7c      	subs	r3, #124	; 0x7c
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800238e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002392:	1e5a      	subs	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023a0:	4413      	add	r3, r2
 80023a2:	3b7a      	subs	r3, #122	; 0x7a
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80023aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023ae:	1e5a      	subs	r2, r3, #1
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023bc:	4413      	add	r3, r2
 80023be:	3b78      	subs	r3, #120	; 0x78
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80023c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023ca:	1e5a      	subs	r2, r3, #1
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023d8:	4413      	add	r3, r2
 80023da:	3b74      	subs	r3, #116	; 0x74
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80023e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	4613      	mov	r3, r2
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023f4:	4413      	add	r3, r2
 80023f6:	3b70      	subs	r3, #112	; 0x70
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80023fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002402:	1e5a      	subs	r2, r3, #1
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002410:	4413      	add	r3, r2
 8002412:	3b6c      	subs	r3, #108	; 0x6c
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8002418:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800242a:	4413      	add	r3, r2
 800242c:	3b68      	subs	r3, #104	; 0x68
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8002434:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002438:	1e5a      	subs	r2, r3, #1
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002446:	4413      	add	r3, r2
 8002448:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 800244c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002450:	3204      	adds	r2, #4
 8002452:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002456:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800245a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800245e:	3b01      	subs	r3, #1
 8002460:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8002464:	e57b      	b.n	8001f5e <lfs_dir_traverse+0x30a>
    } else {
        return res;
 8002466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 800246a:	4618      	mov	r0, r3
 800246c:	37f4      	adds	r7, #244	; 0xf4
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
 8002472:	bf00      	nop

08002474 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002476:	b0a5      	sub	sp, #148	; 0x94
 8002478:	af04      	add	r7, sp, #16
 800247a:	6178      	str	r0, [r7, #20]
 800247c:	6139      	str	r1, [r7, #16]
 800247e:	60fa      	str	r2, [r7, #12]
 8002480:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00f      	beq.n	80024b0 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002498:	429a      	cmp	r2, r3
 800249a:	d206      	bcs.n	80024aa <lfs_dir_fetchmatch+0x36>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3304      	adds	r3, #4
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d302      	bcc.n	80024b0 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 80024aa:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80024ae:	e39d      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80024b0:	2300      	movs	r3, #0
 80024b2:	647b      	str	r3, [r7, #68]	; 0x44
 80024b4:	2300      	movs	r3, #0
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80024bc:	2300      	movs	r3, #0
 80024be:	677b      	str	r3, [r7, #116]	; 0x74
 80024c0:	e056      	b.n	8002570 <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 80024c2:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80024c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80024cc:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80024ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80024d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80024d8:	2104      	movs	r1, #4
 80024da:	9103      	str	r1, [sp, #12]
 80024dc:	9202      	str	r2, [sp, #8]
 80024de:	2200      	movs	r2, #0
 80024e0:	9201      	str	r2, [sp, #4]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2304      	movs	r3, #4
 80024e6:	4602      	mov	r2, r0
 80024e8:	2100      	movs	r1, #0
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7fe f964 	bl	80007b8 <lfs_bd_read>
 80024f0:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 80024f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024fa:	4413      	add	r3, r2
 80024fc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f8ed 	bl	80006e0 <lfs_fromle32>
 8002506:	4602      	mov	r2, r0
 8002508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002510:	440b      	add	r3, r1
 8002512:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8002516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <lfs_dir_fetchmatch+0xb4>
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002522:	d001      	beq.n	8002528 <lfs_dir_fetchmatch+0xb4>
            return err;
 8002524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002526:	e361      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800252e:	d01c      	beq.n	800256a <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800253e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002540:	3301      	adds	r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	bfb8      	it	lt
 800254a:	425b      	neglt	r3, r3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002552:	440b      	add	r3, r1
 8002554:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f7fe f8b2 	bl	80006c4 <lfs_scmp>
 8002560:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	dd01      	ble.n	800256a <lfs_dir_fetchmatch+0xf6>
            r = i;
 8002566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002568:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 800256a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256c:	3301      	adds	r3, #1
 800256e:	677b      	str	r3, [r7, #116]	; 0x74
 8002570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002572:	2b01      	cmp	r3, #1
 8002574:	dda5      	ble.n	80024c2 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002578:	2b00      	cmp	r3, #0
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	bfb8      	it	lt
 8002580:	425b      	neglt	r3, r3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800258e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002590:	3301      	adds	r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	bfb8      	it	lt
 800259a:	425b      	neglt	r3, r3
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4413      	add	r3, r2
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80025a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	bfb8      	it	lt
 80025b2:	425b      	neglt	r3, r3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025ba:	4413      	add	r3, r2
 80025bc:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80025ca:	2300      	movs	r3, #0
 80025cc:	673b      	str	r3, [r7, #112]	; 0x70
 80025ce:	e2f9      	b.n	8002bc4 <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80025e0:	4aa8      	ldr	r2, [pc, #672]	; (8002884 <lfs_dir_fetchmatch+0x410>)
 80025e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025ea:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 80025f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025f6:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe f874 	bl	80006f6 <lfs_tole32>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	3308      	adds	r3, #8
 8002618:	2204      	movs	r2, #4
 800261a:	4619      	mov	r1, r3
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f004 ffd2 	bl	80075c8 <lfs_crc>
 8002624:	4603      	mov	r3, r0
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe f857 	bl	80006e0 <lfs_fromle32>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002638:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800263a:	f7fe fd70 	bl	800111e <lfs_tag_dsize>
 800263e:	4602      	mov	r2, r0
 8002640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002642:	4413      	add	r3, r2
 8002644:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8002646:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800264c:	69d8      	ldr	r0, [r3, #28]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2204      	movs	r2, #4
 8002654:	9203      	str	r2, [sp, #12]
 8002656:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800265a:	9202      	str	r2, [sp, #8]
 800265c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800265e:	9201      	str	r2, [sp, #4]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	4603      	mov	r3, r0
 8002664:	460a      	mov	r2, r1
 8002666:	2100      	movs	r1, #0
 8002668:	6978      	ldr	r0, [r7, #20]
 800266a:	f7fe f8a5 	bl	80007b8 <lfs_bd_read>
 800266e:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8002676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002678:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800267c:	f000 81d5 	beq.w	8002a2a <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 8002680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002682:	e2b3      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800268a:	2204      	movs	r2, #4
 800268c:	4618      	mov	r0, r3
 800268e:	f004 ff9b 	bl	80075c8 <lfs_crc>
 8002692:	4603      	mov	r3, r0
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe f838 	bl	800070e <lfs_frombe32>
 800269e:	4602      	mov	r2, r0
 80026a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a2:	4053      	eors	r3, r2
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fcb0 	bl	800100e <lfs_tag_isvalid>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 80026ba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80026bc:	f7fe fcd8 	bl	8001070 <lfs_tag_type2>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 80026d0:	e1ba      	b.n	8002a48 <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fd22 	bl	800111e <lfs_tag_dsize>
 80026da:	4602      	mov	r2, r0
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	441a      	add	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	f200 81a1 	bhi.w	8002a2e <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fcbc 	bl	8001070 <lfs_tag_type2>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80026fe:	d15e      	bne.n	80027be <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8002700:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002706:	69dc      	ldr	r4, [r3, #28]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800270e:	3204      	adds	r2, #4
 8002710:	2104      	movs	r1, #4
 8002712:	9103      	str	r1, [sp, #12]
 8002714:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002718:	9102      	str	r1, [sp, #8]
 800271a:	9201      	str	r2, [sp, #4]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4623      	mov	r3, r4
 8002720:	4602      	mov	r2, r0
 8002722:	2100      	movs	r1, #0
 8002724:	6978      	ldr	r0, [r7, #20]
 8002726:	f7fe f847 	bl	80007b8 <lfs_bd_read>
 800272a:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800272c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 8002732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002734:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002738:	f000 817b 	beq.w	8002a32 <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 800273c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 800273e:	e255      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd ffcc 	bl	80006e0 <lfs_fromle32>
 8002748:	4603      	mov	r3, r0
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 800274c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 8170 	bne.w	8002a36 <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fca9 	bl	80010b0 <lfs_tag_chunk>
 800275e:	4603      	mov	r3, r0
 8002760:	07db      	lsls	r3, r3, #31
 8002762:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002764:	4053      	eors	r3, r2
 8002766:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002770:	2204      	movs	r2, #4
 8002772:	4618      	mov	r0, r3
 8002774:	f004 ff28 	bl	80075c8 <lfs_crc>
 8002778:	4602      	mov	r2, r0
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800277e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002780:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fcca 	bl	800111e <lfs_tag_dsize>
 800278a:	4602      	mov	r2, r0
 800278c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278e:	441a      	add	r2, r3
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002798:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027a0:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80027a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80027a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80027b4:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
 80027bc:	e73c      	b.n	8002638 <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 80027be:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	681c      	ldr	r4, [r3, #0]
 80027cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ce:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fca3 	bl	800111e <lfs_tag_dsize>
 80027d8:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 80027da:	3b04      	subs	r3, #4
 80027dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027e0:	9203      	str	r2, [sp, #12]
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	9501      	str	r5, [sp, #4]
 80027e6:	9400      	str	r4, [sp, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4632      	mov	r2, r6
 80027ec:	2100      	movs	r1, #0
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7fe f97f 	bl	8000af2 <lfs_bd_crc>
 80027f4:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 80027f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 80027fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027fe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002802:	f000 811a 	beq.w	8002a3a <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 8002806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002808:	e1f0      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fc1f 	bl	8001050 <lfs_tag_type1>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d113      	bne.n	8002840 <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fc62 	bl	80010e4 <lfs_tag_id>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002828:	4293      	cmp	r3, r2
 800282a:	f200 80b5 	bhi.w	8002998 <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fc57 	bl	80010e4 <lfs_tag_id>
 8002836:	4603      	mov	r3, r0
 8002838:	3301      	adds	r3, #1
 800283a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800283e:	e0ab      	b.n	8002998 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fc04 	bl	8001050 <lfs_tag_type1>
 8002848:	4603      	mov	r3, r0
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284e:	d139      	bne.n	80028c4 <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fc39 	bl	80010ca <lfs_tag_splice>
 8002858:	4603      	mov	r3, r0
 800285a:	b29a      	uxth	r2, r3
 800285c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002860:	4413      	add	r3, r2
 8002862:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002866:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <lfs_dir_fetchmatch+0x414>)
 800286a:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800286c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002870:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002876:	4293      	cmp	r3, r2
 8002878:	d108      	bne.n	800288c <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 800287a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800287c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002880:	663b      	str	r3, [r7, #96]	; 0x60
 8002882:	e089      	b.n	8002998 <lfs_dir_fetchmatch+0x524>
 8002884:	08012550 	.word	0x08012550
 8002888:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800288c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	f000 8081 	beq.w	8002998 <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fc23 	bl	80010e4 <lfs_tag_id>
 800289e:	4603      	mov	r3, r0
 80028a0:	461c      	mov	r4, r3
 80028a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fc1d 	bl	80010e4 <lfs_tag_id>
 80028aa:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80028ac:	429c      	cmp	r4, r3
 80028ae:	d873      	bhi.n	8002998 <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fc09 	bl	80010ca <lfs_tag_splice>
 80028b8:	4603      	mov	r3, r0
 80028ba:	029a      	lsls	r2, r3, #10
 80028bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028be:	4413      	add	r3, r2
 80028c0:	663b      	str	r3, [r7, #96]	; 0x60
 80028c2:	e069      	b.n	8002998 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fbc2 	bl	8001050 <lfs_tag_type1>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028d2:	d132      	bne.n	800293a <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fbea 	bl	80010b0 <lfs_tag_chunk>
 80028dc:	4603      	mov	r3, r0
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 80028ee:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80028f4:	69dc      	ldr	r4, [r3, #28]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028fc:	3204      	adds	r2, #4
 80028fe:	2108      	movs	r1, #8
 8002900:	9103      	str	r1, [sp, #12]
 8002902:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002906:	9102      	str	r1, [sp, #8]
 8002908:	9201      	str	r2, [sp, #4]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	4623      	mov	r3, r4
 800290e:	4602      	mov	r2, r0
 8002910:	2100      	movs	r1, #0
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7fd ff50 	bl	80007b8 <lfs_bd_read>
 8002918:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800291a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 8002920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002922:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002926:	f000 808a 	beq.w	8002a3e <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800292a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292c:	e15e      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 800292e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fb37 	bl	8000fa6 <lfs_pair_fromle32>
 8002938:	e02e      	b.n	8002998 <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fba7 	bl	8001090 <lfs_tag_type3>
 8002942:	4603      	mov	r3, r0
 8002944:	461a      	mov	r2, r3
 8002946:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800294a:	429a      	cmp	r2, r3
 800294c:	d124      	bne.n	8002998 <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 800294e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002954:	69dc      	ldr	r4, [r3, #28]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800295c:	3204      	adds	r2, #4
 800295e:	2108      	movs	r1, #8
 8002960:	9103      	str	r1, [sp, #12]
 8002962:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002966:	9102      	str	r1, [sp, #8]
 8002968:	9201      	str	r2, [sp, #4]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	4623      	mov	r3, r4
 800296e:	4602      	mov	r2, r0
 8002970:	2100      	movs	r1, #0
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7fd ff20 	bl	80007b8 <lfs_bd_read>
 8002978:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800297a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 8002980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002982:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002986:	d05c      	beq.n	8002a42 <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fcc5 	bl	800131c <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800299e:	405a      	eors	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f ae47 	bne.w	8002638 <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80029aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80029b0:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80029b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b4:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
 80029b8:	f107 0220 	add.w	r2, r7, #32
 80029bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029c0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80029c4:	4798      	blx	r3
 80029c6:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 80029c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da05      	bge.n	80029da <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80029d4:	d037      	beq.n	8002a46 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 80029d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 80029d8:	e108      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 80029da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	663b      	str	r3, [r7, #96]	; 0x60
 80029e4:	e628      	b.n	8002638 <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80029e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ea:	405a      	eors	r2, r3
 80029ec:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <lfs_dir_fetchmatch+0x780>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	663b      	str	r3, [r7, #96]	; 0x60
 80029fa:	e61d      	b.n	8002638 <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 80029fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	f47f ae1a 	bne.w	8002638 <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fb6c 	bl	80010e4 <lfs_tag_id>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461c      	mov	r4, r3
 8002a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fb66 	bl	80010e4 <lfs_tag_id>
 8002a18:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002a1a:	429c      	cmp	r4, r3
 8002a1c:	f63f ae0c 	bhi.w	8002638 <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a26:	663b      	str	r3, [r7, #96]	; 0x60
 8002a28:	e606      	b.n	8002638 <lfs_dir_fetchmatch+0x1c4>
                    break;
 8002a2a:	bf00      	nop
 8002a2c:	e00c      	b.n	8002a48 <lfs_dir_fetchmatch+0x5d4>
                break;
 8002a2e:	bf00      	nop
 8002a30:	e00a      	b.n	8002a48 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002a32:	bf00      	nop
 8002a34:	e008      	b.n	8002a48 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002a36:	bf00      	nop
 8002a38:	e006      	b.n	8002a48 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002a3a:	bf00      	nop
 8002a3c:	e004      	b.n	8002a48 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002a3e:	bf00      	nop
 8002a40:	e002      	b.n	8002a48 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002a46:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d000      	beq.n	8002a52 <lfs_dir_fetchmatch+0x5de>
 8002a50:	e016      	b.n	8002a80 <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fa1f 	bl	8000e98 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	bfb8      	it	lt
 8002a66:	425b      	neglt	r3, r3
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a6e:	4413      	add	r3, r2
 8002a70:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a7e:	e0a1      	b.n	8002bc4 <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2200      	movs	r2, #0
 8002a84:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d03a      	beq.n	8002b04 <lfs_dir_fetchmatch+0x690>
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a96:	6992      	ldr	r2, [r2, #24]
 8002a98:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a9c:	fb02 f201 	mul.w	r2, r2, r1
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d12e      	bne.n	8002b04 <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002aa6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d02a      	beq.n	8002b04 <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab2:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002ab4:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 8002aba:	69dd      	ldr	r5, [r3, #28]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68d2      	ldr	r2, [r2, #12]
 8002ac4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ac6:	f107 001c 	add.w	r0, r7, #28
 8002aca:	9003      	str	r0, [sp, #12]
 8002acc:	9102      	str	r1, [sp, #8]
 8002ace:	9201      	str	r2, [sp, #4]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	6978      	ldr	r0, [r7, #20]
 8002ada:	f7fe f80a 	bl	8000af2 <lfs_bd_crc>
 8002ade:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <lfs_dir_fetchmatch+0x67e>
 8002ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002aec:	d001      	beq.n	8002af2 <lfs_dir_fetchmatch+0x67e>
                    return err;
 8002aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af0:	e07c      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	333c      	adds	r3, #60	; 0x3c
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fba5 	bl	800125c <lfs_gstate_hasmovehere>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d028      	beq.n	8002b6a <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fae1 	bl	80010e4 <lfs_tag_id>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461c      	mov	r4, r3
 8002b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fadb 	bl	80010e4 <lfs_tag_id>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	429c      	cmp	r4, r3
 8002b32:	d104      	bne.n	8002b3e <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 8002b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b3c:	e015      	b.n	8002b6a <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 8002b3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d011      	beq.n	8002b6a <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe faca 	bl	80010e4 <lfs_tag_id>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461c      	mov	r4, r3
 8002b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fac4 	bl	80010e4 <lfs_tag_id>
 8002b5c:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d203      	bcs.n	8002b6a <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b64:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002b68:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002b72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fab5 	bl	80010e4 <lfs_tag_id>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	8a9b      	ldrh	r3, [r3, #20]
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f7fd fd3b 	bl	8000600 <lfs_min>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b92:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002b94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fa39 	bl	800100e <lfs_tag_isvalid>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <lfs_dir_fetchmatch+0x732>
            return besttag;
 8002ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ba4:	e022      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe fa9b 	bl	80010e4 <lfs_tag_id>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	8a9b      	ldrh	r3, [r3, #20]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d202      	bcs.n	8002bc0 <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 8002bba:	f06f 0301 	mvn.w	r3, #1
 8002bbe:	e015      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e013      	b.n	8002bec <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 8002bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	f77f ad02 	ble.w	80025d0 <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <lfs_dir_fetchmatch+0x784>)
 8002bd6:	9101      	str	r1, [sp, #4]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	f240 5242 	movw	r2, #1346	; 0x542
 8002be0:	4906      	ldr	r1, [pc, #24]	; (8002bfc <lfs_dir_fetchmatch+0x788>)
 8002be2:	4807      	ldr	r0, [pc, #28]	; (8002c00 <lfs_dir_fetchmatch+0x78c>)
 8002be4:	f00e fd44 	bl	8011670 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002be8:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3784      	adds	r7, #132	; 0x84
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf4:	7ffffc00 	.word	0x7ffffc00
 8002bf8:	0801250c 	.word	0x0801250c
 8002bfc:	08012404 	.word	0x08012404
 8002c00:	08012518 	.word	0x08012518

08002c04 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002c10:	2300      	movs	r3, #0
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	2300      	movs	r3, #0
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fc22 	bl	8002474 <lfs_dir_fetchmatch>
 8002c30:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <lfs_dir_getgstate+0x5c>)
 8002c50:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <lfs_dir_getgstate+0x60>)
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7fe feab 	bl	80019b0 <lfs_dir_get>
 8002c5a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	da05      	bge.n	8002c6e <lfs_dir_getgstate+0x32>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f113 0f02 	cmn.w	r3, #2
 8002c68:	d001      	beq.n	8002c6e <lfs_dir_getgstate+0x32>
        return res;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	e00f      	b.n	8002c8e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f113 0f02 	cmn.w	r3, #2
 8002c74:	d00a      	beq.n	8002c8c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fb0e 	bl	800129c <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002c80:	f107 0310 	add.w	r3, r7, #16
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe fa5d 	bl	8001146 <lfs_gstate_xor>
    }

    return 0;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	7ff0000c 	.word	0x7ff0000c
 8002c9c:	7ff00000 	.word	0x7ff00000

08002ca0 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10b      	bne.n	8002cd2 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	4932      	ldr	r1, [pc, #200]	; (8002d88 <lfs_dir_getinfo+0xe8>)
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	701a      	strb	r2, [r3, #0]
        return 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e055      	b.n	8002d7e <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	029a      	lsls	r2, r3, #10
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8002cdc:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	4a29      	ldr	r2, [pc, #164]	; (8002d8c <lfs_dir_getinfo+0xec>)
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7fe fe60 	bl	80019b0 <lfs_dir_get>
 8002cf0:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	da01      	bge.n	8002cfc <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	e040      	b.n	8002d7e <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f9c6 	bl	8001090 <lfs_tag_type3>
 8002d04:	4603      	mov	r3, r0
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002d10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d14:	f043 0308 	orr.w	r3, r3, #8
 8002d18:	f107 0214 	add.w	r2, r7, #20
 8002d1c:	9200      	str	r2, [sp, #0]
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <lfs_dir_getinfo+0xf0>)
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7fe fe44 	bl	80019b0 <lfs_dir_get>
 8002d28:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da01      	bge.n	8002d34 <lfs_dir_getinfo+0x94>
        return (int)tag;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	e024      	b.n	8002d7e <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fb1f 	bl	800137c <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe f9a5 	bl	8001090 <lfs_tag_type3>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f240 2302 	movw	r3, #514	; 0x202
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d103      	bne.n	8002d5a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	e010      	b.n	8002d7c <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe f997 	bl	8001090 <lfs_tag_type3>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	f240 2301 	movw	r3, #513	; 0x201
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d106      	bne.n	8002d7c <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe f9c7 	bl	8001104 <lfs_tag_size>
 8002d76:	4602      	mov	r2, r0
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	08012558 	.word	0x08012558
 8002d8c:	780ffc00 	.word	0x780ffc00
 8002d90:	700ffc00 	.word	0x700ffc00

08002d94 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b08f      	sub	sp, #60	; 0x3c
 8002d98:	af04      	add	r7, sp, #16
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	689c      	ldr	r4, [r3, #8]
 8002db2:	68b8      	ldr	r0, [r7, #8]
 8002db4:	f7fe f9a6 	bl	8001104 <lfs_tag_size>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f7fd fc1f 	bl	8000600 <lfs_min>
 8002dc2:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002dc4:	6a3c      	ldr	r4, [r7, #32]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	6852      	ldr	r2, [r2, #4]
 8002dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd0:	6849      	ldr	r1, [r1, #4]
 8002dd2:	69b8      	ldr	r0, [r7, #24]
 8002dd4:	9003      	str	r0, [sp, #12]
 8002dd6:	9102      	str	r1, [sp, #8]
 8002dd8:	9201      	str	r2, [sp, #4]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4622      	mov	r2, r4
 8002de0:	2100      	movs	r1, #0
 8002de2:	6a38      	ldr	r0, [r7, #32]
 8002de4:	f7fd fe34 	bl	8000a50 <lfs_bd_cmp>
 8002de8:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <lfs_dir_find_match+0x60>
        return res;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	e014      	b.n	8002e1e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	689c      	ldr	r4, [r3, #8]
 8002df8:	68b8      	ldr	r0, [r7, #8]
 8002dfa:	f7fe f983 	bl	8001104 <lfs_tag_size>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	429c      	cmp	r4, r3
 8002e02:	d00b      	beq.n	8002e1c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	689c      	ldr	r4, [r3, #8]
 8002e08:	68b8      	ldr	r0, [r7, #8]
 8002e0a:	f7fe f97b 	bl	8001104 <lfs_tag_size>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	429c      	cmp	r4, r3
 8002e12:	d201      	bcs.n	8002e18 <lfs_dir_find_match+0x84>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e002      	b.n	8002e1e <lfs_dir_find_match+0x8a>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e000      	b.n	8002e1e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	372c      	adds	r7, #44	; 0x2c
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}
	...

08002e28 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b093      	sub	sp, #76	; 0x4c
 8002e2c:	af04      	add	r7, sp, #16
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002e48:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002e4a:	4b6e      	ldr	r3, [pc, #440]	; (8003004 <lfs_dir_find+0x1dc>)
 8002e4c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a1a      	ldr	r2, [r3, #32]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8002e5e:	496a      	ldr	r1, [pc, #424]	; (8003008 <lfs_dir_find+0x1e0>)
 8002e60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e62:	f00e fd15 	bl	8011890 <strspn>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6a:	4413      	add	r3, r2
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8002e6e:	4966      	ldr	r1, [pc, #408]	; (8003008 <lfs_dir_find+0x1e0>)
 8002e70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e72:	f00e fcfc 	bl	801186e <strcspn>
 8002e76:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <lfs_dir_find+0x62>
 8002e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	4b62      	ldr	r3, [pc, #392]	; (800300c <lfs_dir_find+0x1e4>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d00a      	beq.n	8002ea0 <lfs_dir_find+0x78>
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d10c      	bne.n	8002eaa <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8002e90:	2202      	movs	r2, #2
 8002e92:	495f      	ldr	r1, [pc, #380]	; (8003010 <lfs_dir_find+0x1e8>)
 8002e94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e96:	f00e f82f 	bl	8010ef8 <memcmp>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d104      	bne.n	8002eaa <lfs_dir_find+0x82>
            name += namelen;
 8002ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	4413      	add	r3, r2
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8002ea8:	e7d9      	b.n	8002e5e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	4413      	add	r3, r2
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002eb6:	4954      	ldr	r1, [pc, #336]	; (8003008 <lfs_dir_find+0x1e0>)
 8002eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002eba:	f00e fce9 	bl	8011890 <strspn>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	4413      	add	r3, r2
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8002ec6:	4950      	ldr	r1, [pc, #320]	; (8003008 <lfs_dir_find+0x1e0>)
 8002ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002eca:	f00e fcd0 	bl	801186e <strcspn>
 8002ece:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01d      	beq.n	8002f12 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d112      	bne.n	8002f02 <lfs_dir_find+0xda>
 8002edc:	2202      	movs	r2, #2
 8002ede:	494c      	ldr	r1, [pc, #304]	; (8003010 <lfs_dir_find+0x1e8>)
 8002ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ee2:	f00e f809 	bl	8010ef8 <memcmp>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <lfs_dir_find+0xda>
                depth -= 1;
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8002ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	4413      	add	r3, r2
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8002f00:	e7ad      	b.n	8002e5e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	3301      	adds	r3, #1
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8002f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8002f10:	e7d1      	b.n	8002eb6 <lfs_dir_find+0x8e>
                break;
 8002f12:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <lfs_dir_find+0xf8>
            return tag;
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	e06c      	b.n	8002ffa <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f24:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe f8b1 	bl	8001090 <lfs_tag_type3>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d002      	beq.n	8002f3a <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8002f34:	f06f 0313 	mvn.w	r3, #19
 8002f38:	e05f      	b.n	8002ffa <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe f8d1 	bl	80010e4 <lfs_tag_id>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d01c      	beq.n	8002f88 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe f8c7 	bl	80010e4 <lfs_tag_id>
 8002f56:	4603      	mov	r3, r0
 8002f58:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002f5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f5e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002f66:	9200      	str	r2, [sp, #0]
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <lfs_dir_find+0x1ec>)
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7fe fd1f 	bl	80019b0 <lfs_dir_get>
 8002f72:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da01      	bge.n	8002f7e <lfs_dir_find+0x156>
                return res;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	e03d      	b.n	8002ffa <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3318      	adds	r3, #24
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe f80f 	bl	8000fa6 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8002f8e:	212f      	movs	r1, #47	; 0x2f
 8002f90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f92:	f00e fc5f 	bl	8011854 <strchr>
 8002f96:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <lfs_dir_find+0x178>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	e000      	b.n	8002fa2 <lfs_dir_find+0x17a>
 8002fa0:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	613a      	str	r2, [r7, #16]
 8002fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fa8:	617a      	str	r2, [r7, #20]
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002fae:	f107 0210 	add.w	r2, r7, #16
 8002fb2:	9203      	str	r2, [sp, #12]
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <lfs_dir_find+0x1f0>)
 8002fb6:	9202      	str	r2, [sp, #8]
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f7ff fa54 	bl	8002474 <lfs_dir_fetchmatch>
 8002fcc:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da01      	bge.n	8002fd8 <lfs_dir_find+0x1b0>
                return tag;
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	e010      	b.n	8002ffa <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8002fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	4413      	add	r3, r2
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8002fe6:	e73a      	b.n	8002e5e <lfs_dir_find+0x36>
            if (!dir->split) {
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	7ddb      	ldrb	r3, [r3, #23]
 8002fec:	f083 0301 	eor.w	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0c8      	beq.n	8002f88 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8002ff6:	f06f 0301 	mvn.w	r3, #1
    }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	373c      	adds	r7, #60	; 0x3c
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd90      	pop	{r4, r7, pc}
 8003002:	bf00      	nop
 8003004:	002ffc00 	.word	0x002ffc00
 8003008:	08012558 	.word	0x08012558
 800300c:	0801255c 	.word	0x0801255c
 8003010:	08012560 	.word	0x08012560
 8003014:	700ffc00 	.word	0x700ffc00
 8003018:	08002d95 	.word	0x08002d95

0800301c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b08b      	sub	sp, #44	; 0x2c
 8003020:	af04      	add	r7, sp, #16
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f103 0010 	add.w	r0, r3, #16
 8003030:	68fc      	ldr	r4, [r7, #12]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	6852      	ldr	r2, [r2, #4]
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	9103      	str	r1, [sp, #12]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	9102      	str	r1, [sp, #8]
 8003042:	9201      	str	r2, [sp, #4]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	4622      	mov	r2, r4
 800304a:	4601      	mov	r1, r0
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7fd fe45 	bl	8000cdc <lfs_bd_prog>
 8003052:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <lfs_dir_commitprog+0x42>
        return err;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	e010      	b.n	8003080 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	f004 faae 	bl	80075c8 <lfs_crc>
 800306c:	4602      	mov	r2, r0
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	441a      	add	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	605a      	str	r2, [r3, #4]
    return 0;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	bd90      	pop	{r4, r7, pc}

08003088 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b08f      	sub	sp, #60	; 0x3c
 800308c:	af04      	add	r7, sp, #16
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe f841 	bl	800111e <lfs_tag_dsize>
 800309c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	441a      	add	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d902      	bls.n	80030b4 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80030ae:	f06f 031b 	mvn.w	r3, #27
 80030b2:	e065      	b.n	8003180 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	4053      	eors	r3, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fb30 	bl	8000726 <lfs_tobe32>
 80030c6:	4603      	mov	r3, r0
 80030c8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80030ca:	f107 0214 	add.w	r2, r7, #20
 80030ce:	2304      	movs	r3, #4
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff ffa2 	bl	800301c <lfs_dir_commitprog>
 80030d8:	61f8      	str	r0, [r7, #28]
    if (err) {
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <lfs_dir_commitattr+0x5c>
        return err;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	e04d      	b.n	8003180 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db0c      	blt.n	8003104 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	3b04      	subs	r3, #4
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff ff92 	bl	800301c <lfs_dir_commitprog>
 80030f8:	61f8      	str	r0, [r7, #28]
        if (err) {
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d039      	beq.n	8003174 <lfs_dir_commitattr+0xec>
            return err;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	e03d      	b.n	8003180 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	e02d      	b.n	800316a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800310e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003116:	1f1c      	subs	r4, r3, #4
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8003120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003122:	440a      	add	r2, r1
 8003124:	2101      	movs	r1, #1
 8003126:	9103      	str	r1, [sp, #12]
 8003128:	f107 0113 	add.w	r1, r7, #19
 800312c:	9102      	str	r1, [sp, #8]
 800312e:	9201      	str	r2, [sp, #4]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4623      	mov	r3, r4
 8003134:	4602      	mov	r2, r0
 8003136:	2100      	movs	r1, #0
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7fd fb3d 	bl	80007b8 <lfs_bd_read>
 800313e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <lfs_dir_commitattr+0xc2>
                return err;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	e01a      	b.n	8003180 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800314a:	f107 0213 	add.w	r2, r7, #19
 800314e:	2301      	movs	r3, #1
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff ff62 	bl	800301c <lfs_dir_commitprog>
 8003158:	61f8      	str	r0, [r7, #28]
            if (err) {
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <lfs_dir_commitattr+0xdc>
                return err;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	e00d      	b.n	8003180 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	3301      	adds	r3, #1
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	3b04      	subs	r3, #4
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	429a      	cmp	r2, r3
 8003172:	d3cc      	bcc.n	800310e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	609a      	str	r2, [r3, #8]
    return 0;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	372c      	adds	r7, #44	; 0x2c
 8003184:	46bd      	mov	sp, r7
 8003186:	bd90      	pop	{r4, r7, pc}

08003188 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b097      	sub	sp, #92	; 0x5c
 800318c:	af04      	add	r7, sp, #16
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8003196:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7fd fa2c 	bl	8000600 <lfs_min>
 80031a8:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f7fd fa49 	bl	800064a <lfs_alignup>
 80031b8:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80031c2:	e0fe      	b.n	80033c2 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	3b04      	subs	r3, #4
 80031ce:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fa14 	bl	8000600 <lfs_min>
 80031d8:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4413      	add	r3, r2
        lfs_off_t noff = (
 80031e0:	3304      	adds	r3, #4
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80031e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d206      	bcs.n	80031fa <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	3b14      	subs	r3, #20
 80031f0:	4619      	mov	r1, r3
 80031f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031f4:	f7fd fa04 	bl	8000600 <lfs_min>
 80031f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80031fa:	23ff      	movs	r3, #255	; 0xff
 80031fc:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80031fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	429a      	cmp	r2, r3
 8003204:	d35f      	bcc.n	80032c6 <lfs_dir_commitcrc+0x13e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003216:	429a      	cmp	r2, r3
 8003218:	d855      	bhi.n	80032c6 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800321a:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8003220:	6998      	ldr	r0, [r3, #24]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	9203      	str	r2, [sp, #12]
 800322a:	f107 021b 	add.w	r2, r7, #27
 800322e:	9202      	str	r2, [sp, #8]
 8003230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003232:	9201      	str	r2, [sp, #4]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	4603      	mov	r3, r0
 8003238:	460a      	mov	r2, r1
 800323a:	2100      	movs	r1, #0
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7fd fabb 	bl	80007b8 <lfs_bd_read>
 8003242:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <lfs_dir_commitcrc+0xce>
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003250:	d001      	beq.n	8003256 <lfs_dir_commitcrc+0xce>
                return err;
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	e101      	b.n	800345a <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800325a:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8003264:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 800326a:	699c      	ldr	r4, [r3, #24]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	f107 0108 	add.w	r1, r7, #8
 8003276:	3104      	adds	r1, #4
 8003278:	9103      	str	r1, [sp, #12]
 800327a:	9202      	str	r2, [sp, #8]
 800327c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800327e:	9201      	str	r2, [sp, #4]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	4623      	mov	r3, r4
 8003284:	4602      	mov	r2, r0
 8003286:	2100      	movs	r1, #0
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7fd fc32 	bl	8000af2 <lfs_bd_crc>
 800328e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <lfs_dir_commitcrc+0x11a>
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800329c:	d001      	beq.n	80032a2 <lfs_dir_commitcrc+0x11a>
                    return err;
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	e0db      	b.n	800345a <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe f850 	bl	800134c <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80032ac:	f107 0308 	add.w	r3, r7, #8
 80032b0:	4a6c      	ldr	r2, [pc, #432]	; (8003464 <lfs_dir_commitcrc+0x2dc>)
 80032b2:	6839      	ldr	r1, [r7, #0]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fee7 	bl	8003088 <lfs_dir_commitattr>
 80032ba:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <lfs_dir_commitcrc+0x13e>
                    return err;
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	e0c9      	b.n	800345a <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80032c6:	7efb      	ldrb	r3, [r7, #27]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	09db      	lsrs	r3, r3, #7
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	051a      	lsls	r2, r3, #20
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032dc:	1acb      	subs	r3, r1, r3
 80032de:	3b04      	subs	r3, #4
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 80032e6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	4053      	eors	r3, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd fa16 	bl	8000726 <lfs_tobe32>
 80032fa:	4603      	mov	r3, r0
 80032fc:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f107 0110 	add.w	r1, r7, #16
 8003306:	2204      	movs	r2, #4
 8003308:	4618      	mov	r0, r3
 800330a:	f004 f95d 	bl	80075c8 <lfs_crc>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd f9ec 	bl	80006f6 <lfs_tole32>
 800331e:	4603      	mov	r3, r0
 8003320:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f103 0010 	add.w	r0, r3, #16
 8003328:	687c      	ldr	r4, [r7, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	6852      	ldr	r2, [r2, #4]
 8003332:	2108      	movs	r1, #8
 8003334:	9103      	str	r1, [sp, #12]
 8003336:	f107 0110 	add.w	r1, r7, #16
 800333a:	9102      	str	r1, [sp, #8]
 800333c:	9201      	str	r2, [sp, #4]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	4622      	mov	r2, r4
 8003344:	4601      	mov	r1, r0
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd fcc8 	bl	8000cdc <lfs_bd_prog>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <lfs_dir_commitcrc+0x1d0>
            return err;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	e080      	b.n	800345a <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003370:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8003372:	7efb      	ldrb	r3, [r7, #27]
 8003374:	43db      	mvns	r3, r3
 8003376:	061b      	lsls	r3, r3, #24
 8003378:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	405a      	eors	r2, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f04f 32ff 	mov.w	r2, #4294967295
 800338a:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800338c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	429a      	cmp	r2, r3
 8003392:	d208      	bcs.n	80033a6 <lfs_dir_commitcrc+0x21e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	4413      	add	r3, r2
 80033a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d30d      	bcc.n	80033c2 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f103 0110 	add.w	r1, r3, #16
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	2300      	movs	r3, #0
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7fd fc5f 	bl	8000c74 <lfs_bd_sync>
 80033b6:	6238      	str	r0, [r7, #32]
            if (err) {
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <lfs_dir_commitcrc+0x23a>
                return err;
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	e04b      	b.n	800345a <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c8:	429a      	cmp	r2, r3
 80033ca:	f63f aefb 	bhi.w	80031c4 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 80033d4:	f04f 33ff 	mov.w	r3, #4294967295
 80033d8:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033de:	1d1c      	adds	r4, r3, #4
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e8:	1a8a      	subs	r2, r1, r2
 80033ea:	f107 011c 	add.w	r1, r7, #28
 80033ee:	9103      	str	r1, [sp, #12]
 80033f0:	9202      	str	r2, [sp, #8]
 80033f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033f4:	9201      	str	r2, [sp, #4]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4623      	mov	r3, r4
 80033fa:	4602      	mov	r2, r0
 80033fc:	2100      	movs	r1, #0
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fb77 	bl	8000af2 <lfs_bd_crc>
 8003404:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <lfs_dir_commitcrc+0x288>
        return err;
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	e024      	b.n	800345a <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003414:	429a      	cmp	r2, r3
 8003416:	d002      	beq.n	800341e <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8003418:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800341c:	e01d      	b.n	800345a <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f107 021c 	add.w	r2, r7, #28
 8003428:	9203      	str	r2, [sp, #12]
 800342a:	2204      	movs	r2, #4
 800342c:	9202      	str	r2, [sp, #8]
 800342e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003430:	9201      	str	r2, [sp, #4]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2304      	movs	r3, #4
 8003436:	460a      	mov	r2, r1
 8003438:	2100      	movs	r1, #0
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fb59 	bl	8000af2 <lfs_bd_crc>
 8003440:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <lfs_dir_commitcrc+0x2c4>
        return err;
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	e006      	b.n	800345a <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8003452:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003456:	e000      	b.n	800345a <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	374c      	adds	r7, #76	; 0x4c
 800345e:	46bd      	mov	sp, r7
 8003460:	bd90      	pop	{r4, r7, pc}
 8003462:	bf00      	nop
 8003464:	5ffffc08 	.word	0x5ffffc08

08003468 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af04      	add	r7, sp, #16
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	e016      	b.n	80034a6 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3301      	adds	r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	bfb8      	it	lt
 8003484:	425b      	neglt	r3, r3
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	4413      	add	r3, r2
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe f926 	bl	80016e0 <lfs_alloc>
 8003494:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <lfs_dir_alloc+0x38>
            return err;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	e058      	b.n	8003552 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	dde5      	ble.n	8003478 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80034bc:	2004      	movs	r0, #4
 80034be:	9003      	str	r0, [sp, #12]
 80034c0:	9202      	str	r2, [sp, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	9201      	str	r2, [sp, #4]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2304      	movs	r3, #4
 80034ca:	460a      	mov	r2, r1
 80034cc:	2100      	movs	r1, #0
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd f972 	bl	80007b8 <lfs_bd_read>
 80034d4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd f900 	bl	80006e0 <lfs_fromle32>
 80034e0:	4602      	mov	r2, r0
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <lfs_dir_alloc+0x90>
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80034f2:	d001      	beq.n	80034f8 <lfs_dir_alloc+0x90>
        return err;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	e02c      	b.n	8003552 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	dd0e      	ble.n	8003520 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f7fd f898 	bl	800064a <lfs_alignup>
 800351a:	4602      	mov	r2, r0
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f04f 32ff 	mov.w	r2, #4294967295
 800352c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f04f 32ff 	mov.w	r2, #4294967295
 800353a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f04f 32ff 	mov.w	r2, #4294967295
 8003542:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2200      	movs	r2, #0
 800354e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800355a:	b580      	push	{r7, lr}
 800355c:	b092      	sub	sp, #72	; 0x48
 800355e:	af04      	add	r7, sp, #16
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003568:	f107 0310 	add.w	r3, r7, #16
 800356c:	4619      	mov	r1, r3
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff ff7a 	bl	8003468 <lfs_dir_alloc>
 8003574:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <lfs_dir_split+0x26>
        return err;
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	e03c      	b.n	80035fa <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	7ddb      	ldrb	r3, [r3, #23]
 8003584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003594:	f107 0110 	add.w	r1, r7, #16
 8003598:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800359c:	9302      	str	r3, [sp, #8]
 800359e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f879 	bl	80036a4 <lfs_dir_compact>
 80035b2:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da01      	bge.n	80035be <lfs_dir_split+0x64>
        return res;
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	e01d      	b.n	80035fa <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2201      	movs	r2, #1
 80035ce:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3320      	adds	r3, #32
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f7fd fc8d 	bl	8000ef8 <lfs_pair_cmp>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <lfs_dir_split+0x9e>
 80035e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3738      	adds	r7, #56	; 0x38
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8003612:	68b8      	ldr	r0, [r7, #8]
 8003614:	f7fd fd83 	bl	800111e <lfs_tag_dsize>
 8003618:	4602      	mov	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	441a      	add	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	601a      	str	r2, [r3, #0]
    return 0;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	f7ff fd1d 	bl	8003088 <lfs_dir_commitattr>
 800364e:	4603      	mov	r3, r0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003668:	2b00      	cmp	r3, #0
 800366a:	dd11      	ble.n	8003690 <lfs_dir_needsrelocation+0x38>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	3301      	adds	r3, #1
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003678:	3201      	adds	r2, #1
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003682:	fb02 f201 	mul.w	r2, r2, r1
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <lfs_dir_needsrelocation+0x38>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <lfs_dir_needsrelocation+0x3a>
 8003690:	2300      	movs	r3, #0
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	b2db      	uxtb	r3, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b0a4      	sub	sp, #144	; 0x90
 80036a8:	af0a      	add	r7, sp, #40	; 0x28
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff ffcc 	bl	8003658 <lfs_dir_needsrelocation>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80036d0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <lfs_dir_compact+0x52>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	657a      	str	r2, [r7, #84]	; 0x54
 80036de:	2201      	movs	r2, #1
 80036e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80036e2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fc05 	bl	8000ef8 <lfs_pair_cmp>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f040 8155 	bne.w	80039a0 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fc:	2300      	movs	r3, #0
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
 8003704:	647b      	str	r3, [r7, #68]	; 0x44
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
 800370c:	2300      	movs	r3, #0
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <lfs_dir_compact+0x80>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	3b08      	subs	r3, #8
 8003722:	e003      	b.n	800372c <lfs_dir_compact+0x88>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800372c:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4619      	mov	r1, r3
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7fd fb7d 	bl	8000e34 <lfs_bd_erase>
 800373a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800373c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003744:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003748:	f000 812c 	beq.w	80039a4 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800374c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374e:	e187      	b.n	8003a60 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc ffce 	bl	80006f6 <lfs_tole32>
 800375a:	4602      	mov	r2, r0
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003766:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800376a:	2304      	movs	r3, #4
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff fc55 	bl	800301c <lfs_dir_commitprog>
 8003772:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc ffb1 	bl	80006e0 <lfs_fromle32>
 800377e:	4602      	mov	r2, r0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	609a      	str	r2, [r3, #8]
            if (err) {
 8003784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003790:	f000 810a 	beq.w	80039a8 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003796:	e163      	b.n	8003a60 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003798:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800379c:	425b      	negs	r3, r3
 800379e:	b29b      	uxth	r3, r3
 80037a0:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	637a      	str	r2, [r7, #52]	; 0x34
 80037a6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80037aa:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80037ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80037b0:	9208      	str	r2, [sp, #32]
 80037b2:	4aad      	ldr	r2, [pc, #692]	; (8003a68 <lfs_dir_compact+0x3c4>)
 80037b4:	9207      	str	r2, [sp, #28]
 80037b6:	9306      	str	r3, [sp, #24]
 80037b8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80037bc:	9305      	str	r3, [sp, #20]
 80037be:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80037c2:	9304      	str	r3, [sp, #16]
 80037c4:	2300      	movs	r3, #0
 80037c6:	9303      	str	r3, [sp, #12]
 80037c8:	4ba8      	ldr	r3, [pc, #672]	; (8003a6c <lfs_dir_compact+0x3c8>)
 80037ca:	9302      	str	r3, [sp, #8]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	2200      	movs	r2, #0
 80037da:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f7fe fa39 	bl	8001c54 <lfs_dir_traverse>
 80037e2:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80037e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80037ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80037f0:	f000 80dc 	beq.w	80039ac <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80037f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f6:	e133      	b.n	8003a60 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	3318      	adds	r3, #24
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fb60 	bl	8000ec2 <lfs_pair_isnull>
 8003802:	4603      	mov	r3, r0
 8003804:	f083 0301 	eor.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d022      	beq.n	8003854 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3318      	adds	r3, #24
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fbe1 	bl	8000fda <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	7ddb      	ldrb	r3, [r3, #23]
 800381c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003820:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003822:	4a93      	ldr	r2, [pc, #588]	; (8003a70 <lfs_dir_compact+0x3cc>)
 8003824:	431a      	orrs	r2, r3
                        dir->tail);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800382a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff fc2a 	bl	8003088 <lfs_dir_commitattr>
 8003834:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3318      	adds	r3, #24
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fbb3 	bl	8000fa6 <lfs_pair_fromle32>
                if (err) {
 8003840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003848:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800384c:	f000 80b0 	beq.w	80039b0 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003852:	e105      	b.n	8003a60 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003860:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003864:	f083 0301 	eor.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d011      	beq.n	8003892 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003874:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fc63 	bl	8001146 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fc5a 	bl	8001146 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fc51 	bl	8001146 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80038b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038b4:	461a      	mov	r2, r3
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7ff f9bf 	bl	8002c3c <lfs_dir_getgstate>
 80038be:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80038c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <lfs_dir_compact+0x226>
                return err;
 80038c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c8:	e0ca      	b.n	8003a60 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80038ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fc5e 	bl	8001190 <lfs_gstate_iszero>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f083 0301 	eor.w	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d016      	beq.n	800390e <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80038e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fd fcf9 	bl	80012dc <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80038ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038ee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80038f2:	4a60      	ldr	r2, [pc, #384]	; (8003a74 <lfs_dir_compact+0x3d0>)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff fbc7 	bl	8003088 <lfs_dir_commitattr>
 80038fa:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80038fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8003902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003904:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003908:	d054      	beq.n	80039b4 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800390a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390c:	e0a8      	b.n	8003a60 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800390e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003912:	4619      	mov	r1, r3
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7ff fc37 	bl	8003188 <lfs_dir_commitcrc>
 800391a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800391c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8003922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003924:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003928:	d046      	beq.n	80039b8 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800392a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800392c:	e098      	b.n	8003a60 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800392e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003934:	6992      	ldr	r2, [r2, #24]
 8003936:	fbb3 f1f2 	udiv	r1, r3, r2
 800393a:	fb02 f201 	mul.w	r2, r2, r1
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <lfs_dir_compact+0x2ae>
 8003944:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <lfs_dir_compact+0x3d4>)
 8003946:	4a4d      	ldr	r2, [pc, #308]	; (8003a7c <lfs_dir_compact+0x3d8>)
 8003948:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800394c:	484c      	ldr	r0, [pc, #304]	; (8003a80 <lfs_dir_compact+0x3dc>)
 800394e:	f00d fa69 	bl	8010e24 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd fa9f 	bl	8000e98 <lfs_pair_swap>
            dir->count = end - begin;
 800395a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800395e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	b29a      	uxth	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800396a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3348      	adds	r3, #72	; 0x48
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003982:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003986:	f083 0301 	eor.w	r3, r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d064      	beq.n	8003a5a <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	333c      	adds	r3, #60	; 0x3c
 8003996:	3230      	adds	r2, #48	; 0x30
 8003998:	ca07      	ldmia	r2, {r0, r1, r2}
 800399a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800399e:	e05c      	b.n	8003a5a <lfs_dir_compact+0x3b6>
        goto relocate;
 80039a0:	bf00      	nop
 80039a2:	e00a      	b.n	80039ba <lfs_dir_compact+0x316>
                    goto relocate;
 80039a4:	bf00      	nop
 80039a6:	e008      	b.n	80039ba <lfs_dir_compact+0x316>
                    goto relocate;
 80039a8:	bf00      	nop
 80039aa:	e006      	b.n	80039ba <lfs_dir_compact+0x316>
                    goto relocate;
 80039ac:	bf00      	nop
 80039ae:	e004      	b.n	80039ba <lfs_dir_compact+0x316>
                        goto relocate;
 80039b0:	bf00      	nop
 80039b2:	e002      	b.n	80039ba <lfs_dir_compact+0x316>
                        goto relocate;
 80039b4:	bf00      	nop
 80039b6:	e000      	b.n	80039ba <lfs_dir_compact+0x316>
                    goto relocate;
 80039b8:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3310      	adds	r3, #16
 80039c4:	4619      	mov	r1, r3
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7fc fed0 	bl	800076c <lfs_cache_drop>
        if (!tired) {
 80039cc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80039d0:	f083 0301 	eor.w	r3, r3, #1
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <lfs_dir_compact+0x3e0>)
 80039e0:	9200      	str	r2, [sp, #0]
 80039e2:	f640 0201 	movw	r2, #2049	; 0x801
 80039e6:	4926      	ldr	r1, [pc, #152]	; (8003a80 <lfs_dir_compact+0x3dc>)
 80039e8:	4827      	ldr	r0, [pc, #156]	; (8003a88 <lfs_dir_compact+0x3e4>)
 80039ea:	f00d fe41 	bl	8011670 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2200      	movs	r2, #0
 80039f2:	617a      	str	r2, [r7, #20]
 80039f4:	2201      	movs	r2, #1
 80039f6:	61ba      	str	r2, [r7, #24]
 80039f8:	f107 0214 	add.w	r2, r7, #20
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fa7a 	bl	8000ef8 <lfs_pair_cmp>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <lfs_dir_compact+0x3e0>)
 8003a10:	9200      	str	r2, [sp, #0]
 8003a12:	f640 0206 	movw	r2, #2054	; 0x806
 8003a16:	491a      	ldr	r1, [pc, #104]	; (8003a80 <lfs_dir_compact+0x3dc>)
 8003a18:	481c      	ldr	r0, [pc, #112]	; (8003a8c <lfs_dir_compact+0x3e8>)
 8003a1a:	f00d fe29 	bl	8011670 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003a1e:	f06f 031b 	mvn.w	r3, #27
 8003a22:	e01d      	b.n	8003a60 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f7fd fe58 	bl	80016e0 <lfs_alloc>
 8003a30:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00c      	beq.n	8003a52 <lfs_dir_compact+0x3ae>
 8003a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a3a:	f113 0f1c 	cmn.w	r3, #28
 8003a3e:	d106      	bne.n	8003a4e <lfs_dir_compact+0x3aa>
 8003a40:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <lfs_dir_compact+0x3ae>
            return err;
 8003a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a50:	e006      	b.n	8003a60 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8003a58:	e64d      	b.n	80036f6 <lfs_dir_compact+0x52>
        break;
 8003a5a:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003a5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3768      	adds	r7, #104	; 0x68
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	0800362f 	.word	0x0800362f
 8003a6c:	400ffc00 	.word	0x400ffc00
 8003a70:	000ffc08 	.word	0x000ffc08
 8003a74:	7ffffc0c 	.word	0x7ffffc0c
 8003a78:	08012564 	.word	0x08012564
 8003a7c:	08013148 	.word	0x08013148
 8003a80:	08012404 	.word	0x08012404
 8003a84:	0801250c 	.word	0x0801250c
 8003a88:	0801258c 	.word	0x0801258c
 8003a8c:	080125b0 	.word	0x080125b0

08003a90 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b097      	sub	sp, #92	; 0x5c
 8003a94:	af0a      	add	r7, sp, #40	; 0x28
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003a9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003aa4:	e058      	b.n	8003b58 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	4252      	negs	r2, r2
 8003ab4:	b292      	uxth	r2, r2
 8003ab6:	b212      	sxth	r2, r2
 8003ab8:	f107 0118 	add.w	r1, r7, #24
 8003abc:	9108      	str	r1, [sp, #32]
 8003abe:	4978      	ldr	r1, [pc, #480]	; (8003ca0 <lfs_dir_splittingcompact+0x210>)
 8003ac0:	9107      	str	r1, [sp, #28]
 8003ac2:	9206      	str	r2, [sp, #24]
 8003ac4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003ac8:	9205      	str	r2, [sp, #20]
 8003aca:	9304      	str	r3, [sp, #16]
 8003acc:	2300      	movs	r3, #0
 8003ace:	9303      	str	r3, [sp, #12]
 8003ad0:	4b74      	ldr	r3, [pc, #464]	; (8003ca4 <lfs_dir_splittingcompact+0x214>)
 8003ad2:	9302      	str	r3, [sp, #8]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7fe f8b5 	bl	8001c54 <lfs_dir_traverse>
 8003aea:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <lfs_dir_splittingcompact+0x66>
                return err;
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	e0d0      	b.n	8003c98 <lfs_dir_splittingcompact+0x208>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8003af6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2bfe      	cmp	r3, #254	; 0xfe
 8003b00:	d822      	bhi.n	8003b48 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b06:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003b08:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	e003      	b.n	8003b28 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b24:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003b26:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 8003b2c:	6992      	ldr	r2, [r2, #24]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fd8a 	bl	800064a <lfs_alignup>
 8003b36:	4603      	mov	r3, r0
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f7fc fd60 	bl	8000600 <lfs_min>
 8003b40:	4602      	mov	r2, r0
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d20e      	bcs.n	8003b66 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003b48:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b54:	4413      	add	r3, r2
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003b58:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d8a0      	bhi.n	8003aa6 <lfs_dir_splittingcompact+0x16>
 8003b64:	e000      	b.n	8003b68 <lfs_dir_splittingcompact+0xd8>
                break;
 8003b66:	bf00      	nop
        }

        if (split == begin) {
 8003b68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d02d      	beq.n	8003bce <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003b7a:	9202      	str	r2, [sp, #8]
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7ff fce6 	bl	800355a <lfs_dir_split>
 8003b8e:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <lfs_dir_splittingcompact+0x112>
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	f113 0f1c 	cmn.w	r3, #28
 8003b9c:	d001      	beq.n	8003ba2 <lfs_dir_splittingcompact+0x112>
            return err;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	e07a      	b.n	8003c98 <lfs_dir_splittingcompact+0x208>
        }

        if (err) {
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	493d      	ldr	r1, [pc, #244]	; (8003ca8 <lfs_dir_splittingcompact+0x218>)
 8003bb2:	9101      	str	r1, [sp, #4]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	f640 0259 	movw	r2, #2137	; 0x859
 8003bbc:	493b      	ldr	r1, [pc, #236]	; (8003cac <lfs_dir_splittingcompact+0x21c>)
 8003bbe:	483c      	ldr	r0, [pc, #240]	; (8003cb0 <lfs_dir_splittingcompact+0x220>)
 8003bc0:	f00d fd56 	bl	8011670 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003bc4:	e004      	b.n	8003bd0 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003bcc:	e767      	b.n	8003a9e <lfs_dir_splittingcompact+0xe>
            break;
 8003bce:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7ff fd40 	bl	8003658 <lfs_dir_needsrelocation>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04d      	beq.n	8003c7a <lfs_dir_splittingcompact+0x1ea>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2200      	movs	r2, #0
 8003be2:	613a      	str	r2, [r7, #16]
 8003be4:	2201      	movs	r2, #1
 8003be6:	617a      	str	r2, [r7, #20]
 8003be8:	f107 0210 	add.w	r2, r7, #16
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd f982 	bl	8000ef8 <lfs_pair_cmp>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d13f      	bne.n	8003c7a <lfs_dir_splittingcompact+0x1ea>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f003 fb52 	bl	80072a4 <lfs_fs_rawsize>
 8003c00:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	da01      	bge.n	8003c0c <lfs_dir_splittingcompact+0x17c>
            return size;
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	e045      	b.n	8003c98 <lfs_dir_splittingcompact+0x208>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->block_count/2) {
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c10:	085a      	lsrs	r2, r3, #1
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d930      	bls.n	8003c7a <lfs_dir_splittingcompact+0x1ea>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <lfs_dir_splittingcompact+0x218>)
 8003c1e:	9200      	str	r2, [sp, #0]
 8003c20:	f640 026d 	movw	r2, #2157	; 0x86d
 8003c24:	4921      	ldr	r1, [pc, #132]	; (8003cac <lfs_dir_splittingcompact+0x21c>)
 8003c26:	4823      	ldr	r0, [pc, #140]	; (8003cb4 <lfs_dir_splittingcompact+0x224>)
 8003c28:	f00d fd22 	bl	8011670 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003c2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c30:	9302      	str	r3, [sp, #8]
 8003c32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff fc89 	bl	800355a <lfs_dir_split>
 8003c48:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <lfs_dir_splittingcompact+0x1cc>
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f113 0f1c 	cmn.w	r3, #28
 8003c56:	d001      	beq.n	8003c5c <lfs_dir_splittingcompact+0x1cc>
                return err;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	e01d      	b.n	8003c98 <lfs_dir_splittingcompact+0x208>
            }

            if (err) {
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <lfs_dir_splittingcompact+0x1e2>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <lfs_dir_splittingcompact+0x218>)
 8003c64:	f640 0277 	movw	r2, #2167	; 0x877
 8003c68:	4910      	ldr	r1, [pc, #64]	; (8003cac <lfs_dir_splittingcompact+0x21c>)
 8003c6a:	4813      	ldr	r0, [pc, #76]	; (8003cb8 <lfs_dir_splittingcompact+0x228>)
 8003c6c:	f00d fd00 	bl	8011670 <iprintf>
 8003c70:	e003      	b.n	8003c7a <lfs_dir_splittingcompact+0x1ea>
            } else {
                end = begin;
 8003c72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003c7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c7e:	9302      	str	r3, [sp, #8]
 8003c80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff fd07 	bl	80036a4 <lfs_dir_compact>
 8003c96:	4603      	mov	r3, r0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3734      	adds	r7, #52	; 0x34
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd90      	pop	{r4, r7, pc}
 8003ca0:	08003603 	.word	0x08003603
 8003ca4:	400ffc00 	.word	0x400ffc00
 8003ca8:	0801250c 	.word	0x0801250c
 8003cac:	08012404 	.word	0x08012404
 8003cb0:	080125e8 	.word	0x080125e8
 8003cb4:	08012618 	.word	0x08012618
 8003cb8:	08012648 	.word	0x08012648

08003cbc <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b0a6      	sub	sp, #152	; 0x98
 8003cc0:	af0a      	add	r7, sp, #40	; 0x28
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	667b      	str	r3, [r7, #100]	; 0x64
 8003cd8:	e06d      	b.n	8003db6 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fd f9d3 	bl	8001090 <lfs_tag_type3>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	f240 4301 	movw	r3, #1025	; 0x401
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d106      	bne.n	8003d04 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	8a9b      	ldrh	r3, [r3, #20]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	829a      	strh	r2, [r3, #20]
 8003d02:	e055      	b.n	8003db0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd f9be 	bl	8001090 <lfs_tag_type3>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d114      	bne.n	8003d4a <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	8a9b      	ldrh	r3, [r3, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <lfs_dir_relocatingcommit+0x7a>
 8003d28:	4ba4      	ldr	r3, [pc, #656]	; (8003fbc <lfs_dir_relocatingcommit+0x300>)
 8003d2a:	4aa5      	ldr	r2, [pc, #660]	; (8003fc0 <lfs_dir_relocatingcommit+0x304>)
 8003d2c:	f640 018f 	movw	r1, #2191	; 0x88f
 8003d30:	48a4      	ldr	r0, [pc, #656]	; (8003fc4 <lfs_dir_relocatingcommit+0x308>)
 8003d32:	f00d f877 	bl	8010e24 <__assert_func>
            dir->count -= 1;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	8a9b      	ldrh	r3, [r3, #20]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003d48:	e032      	b.n	8003db0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd f97b 	bl	8001050 <lfs_tag_type1>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d60:	d126      	bne.n	8003db0 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003d62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd f98f 	bl	80010b0 <lfs_tag_chunk>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	3318      	adds	r3, #24
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd f8fb 	bl	8000fa6 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003db2:	3301      	adds	r3, #1
 8003db4:	667b      	str	r3, [r7, #100]	; 0x64
 8003db6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	db8c      	blt.n	8003cda <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003dc0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d02b      	beq.n	8003e20 <lfs_dir_relocatingcommit+0x164>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	8a9b      	ldrh	r3, [r3, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d127      	bne.n	8003e20 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <lfs_dir_relocatingcommit+0x12a>
 8003dd8:	4b7b      	ldr	r3, [pc, #492]	; (8003fc8 <lfs_dir_relocatingcommit+0x30c>)
 8003dda:	4a79      	ldr	r2, [pc, #484]	; (8003fc0 <lfs_dir_relocatingcommit+0x304>)
 8003ddc:	f640 019c 	movw	r1, #2204	; 0x89c
 8003de0:	4878      	ldr	r0, [pc, #480]	; (8003fc4 <lfs_dir_relocatingcommit+0x308>)
 8003de2:	f00d f81f 	bl	8010e24 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003dec:	4619      	mov	r1, r3
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f002 fdb4 	bl	800695c <lfs_fs_pred>
 8003df4:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <lfs_dir_relocatingcommit+0x14c>
 8003dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dfe:	f113 0f02 	cmn.w	r3, #2
 8003e02:	d001      	beq.n	8003e08 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8003e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e06:	e203      	b.n	8004210 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8003e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e0a:	f113 0f02 	cmn.w	r3, #2
 8003e0e:	d007      	beq.n	8003e20 <lfs_dir_relocatingcommit+0x164>
 8003e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e14:	7ddb      	ldrb	r3, [r3, #23]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8003e1e:	e121      	b.n	8004064 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	7d9b      	ldrb	r3, [r3, #22]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80fb 	beq.w	8004020 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003e46:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <lfs_dir_relocatingcommit+0x1a0>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e58:	3b08      	subs	r3, #8
 8003e5a:	e003      	b.n	8003e64 <lfs_dir_relocatingcommit+0x1a8>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8003e64:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3318      	adds	r3, #24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd f8b5 	bl	8000fda <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8003e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e86:	9308      	str	r3, [sp, #32]
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <lfs_dir_relocatingcommit+0x310>)
 8003e8a:	9307      	str	r3, [sp, #28]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9306      	str	r3, [sp, #24]
 8003e90:	2300      	movs	r3, #0
 8003e92:	9305      	str	r3, [sp, #20]
 8003e94:	2300      	movs	r3, #0
 8003e96:	9304      	str	r3, [sp, #16]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9303      	str	r3, [sp, #12]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9302      	str	r3, [sp, #8]
 8003ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7fd fed0 	bl	8001c54 <lfs_dir_traverse>
 8003eb4:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3318      	adds	r3, #24
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fd f873 	bl	8000fa6 <lfs_pair_fromle32>
        if (err) {
 8003ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec8:	f113 0f1c 	cmn.w	r3, #28
 8003ecc:	f000 80aa 	beq.w	8004024 <lfs_dir_relocatingcommit+0x368>
 8003ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003ed6:	f000 80a5 	beq.w	8004024 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8003eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003edc:	e198      	b.n	8004210 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8003ede:	f107 031c 	add.w	r3, r7, #28
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fd f925 	bl	8001146 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003f02:	f107 031c 	add.w	r3, r7, #28
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fd f91c 	bl	8001146 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003f14:	f107 031c 	add.w	r3, r7, #28
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd f913 	bl	8001146 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f26:	f023 0303 	bic.w	r3, r3, #3
 8003f2a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8003f2c:	f107 031c 	add.w	r3, r7, #28
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd f92d 	bl	8001190 <lfs_gstate_iszero>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f083 0301 	eor.w	r3, r3, #1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d027      	beq.n	8003f92 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003f42:	f107 031c 	add.w	r3, r7, #28
 8003f46:	461a      	mov	r2, r3
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7fe fe76 	bl	8002c3c <lfs_dir_getgstate>
 8003f50:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8003f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8003f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5a:	e159      	b.n	8004210 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fd f9bb 	bl	80012dc <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8003f66:	f107 031c 	add.w	r3, r7, #28
 8003f6a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003f6e:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <lfs_dir_relocatingcommit+0x314>)
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff f889 	bl	8003088 <lfs_dir_commitattr>
 8003f76:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8003f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f80:	f113 0f1c 	cmn.w	r3, #28
 8003f84:	d050      	beq.n	8004028 <lfs_dir_relocatingcommit+0x36c>
 8003f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f88:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003f8c:	d04c      	beq.n	8004028 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f90:	e13e      	b.n	8004210 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8003f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f96:	4619      	mov	r1, r3
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7ff f8f5 	bl	8003188 <lfs_dir_commitcrc>
 8003f9e:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa8:	f113 0f1c 	cmn.w	r3, #28
 8003fac:	d03e      	beq.n	800402c <lfs_dir_relocatingcommit+0x370>
 8003fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003fb4:	d03a      	beq.n	800402c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb8:	e12a      	b.n	8004210 <lfs_dir_relocatingcommit+0x554>
 8003fba:	bf00      	nop
 8003fbc:	08012674 	.word	0x08012674
 8003fc0:	08013158 	.word	0x08013158
 8003fc4:	08012404 	.word	0x08012404
 8003fc8:	08012684 	.word	0x08012684
 8003fcc:	0800362f 	.word	0x0800362f
 8003fd0:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fda:	6992      	ldr	r2, [r2, #24]
 8003fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fe0:	fb02 f201 	mul.w	r2, r2, r1
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <lfs_dir_relocatingcommit+0x33c>
 8003fea:	4b8b      	ldr	r3, [pc, #556]	; (8004218 <lfs_dir_relocatingcommit+0x55c>)
 8003fec:	4a8b      	ldr	r2, [pc, #556]	; (800421c <lfs_dir_relocatingcommit+0x560>)
 8003fee:	f640 01e6 	movw	r1, #2278	; 0x8e6
 8003ff2:	488b      	ldr	r0, [pc, #556]	; (8004220 <lfs_dir_relocatingcommit+0x564>)
 8003ff4:	f00c ff16 	bl	8010e24 <__assert_func>
        dir->off = commit.off;
 8003ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8003ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	333c      	adds	r3, #60	; 0x3c
 800400a:	3230      	adds	r2, #48	; 0x30
 800400c:	ca07      	ldmia	r2, {r0, r1, r2}
 800400e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3348      	adds	r3, #72	; 0x48
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	e021      	b.n	8004064 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8004020:	bf00      	nop
 8004022:	e004      	b.n	800402e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004024:	bf00      	nop
 8004026:	e002      	b.n	800402e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8004028:	bf00      	nop
 800402a:	e000      	b.n	800402e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800402c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3310      	adds	r3, #16
 8004032:	4619      	mov	r1, r3
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7fc fb99 	bl	800076c <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	8a9b      	ldrh	r3, [r3, #20]
 800403e:	9302      	str	r3, [sp, #8]
 8004040:	2300      	movs	r3, #0
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff fd1d 	bl	8003a90 <lfs_dir_splittingcompact>
 8004056:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	2b00      	cmp	r3, #0
 800405c:	da01      	bge.n	8004062 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800405e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004060:	e0d6      	b.n	8004210 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8004062:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	64bb      	str	r3, [r7, #72]	; 0x48
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	663b      	str	r3, [r7, #96]	; 0x60
 8004076:	e0c6      	b.n	8004206 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8004078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800407a:	3308      	adds	r3, #8
 800407c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f7fc ff38 	bl	8000ef8 <lfs_pair_cmp>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 80b8 	bne.w	8004200 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8004090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	f103 0408 	add.w	r4, r3, #8
 8004098:	4615      	mov	r5, r2
 800409a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800409c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800409e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80040a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80040a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a8:	3308      	adds	r3, #8
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f000 809d 	beq.w	80041ec <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 80040b2:	2300      	movs	r3, #0
 80040b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b6:	e07b      	b.n	80041b0 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80040b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fc ffe4 	bl	8001090 <lfs_tag_type3>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d115      	bne.n	8004100 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80040d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d6:	889c      	ldrh	r4, [r3, #4]
 80040d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fc fffe 	bl	80010e4 <lfs_tag_id>
 80040e8:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80040ea:	429c      	cmp	r4, r3
 80040ec:	d108      	bne.n	8004100 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80040ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295
 80040f4:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80040f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f8:	f04f 32ff 	mov.w	r2, #4294967295
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	e054      	b.n	80041aa <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	4413      	add	r3, r2
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc ffc0 	bl	8001090 <lfs_tag_type3>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004118:	429a      	cmp	r2, r3
 800411a:	d11c      	bne.n	8004156 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800411c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800411e:	889c      	ldrh	r4, [r3, #4]
 8004120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4413      	add	r3, r2
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc ffda 	bl	80010e4 <lfs_tag_id>
 8004130:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004132:	429c      	cmp	r4, r3
 8004134:	d90f      	bls.n	8004156 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8004136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004138:	889b      	ldrh	r3, [r3, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004140:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004144:	799b      	ldrb	r3, [r3, #6]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d12f      	bne.n	80041aa <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 800414a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	1e5a      	subs	r2, r3, #1
 8004150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8004154:	e029      	b.n	80041aa <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	4413      	add	r3, r2
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc ff95 	bl	8001090 <lfs_tag_type3>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	f240 4301 	movw	r3, #1025	; 0x401
 800416e:	429a      	cmp	r2, r3
 8004170:	d11b      	bne.n	80041aa <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8004172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004174:	889c      	ldrh	r4, [r3, #4]
 8004176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4413      	add	r3, r2
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc ffaf 	bl	80010e4 <lfs_tag_id>
 8004186:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004188:	429c      	cmp	r4, r3
 800418a:	d30e      	bcc.n	80041aa <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 800418c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800418e:	889b      	ldrh	r3, [r3, #4]
 8004190:	3301      	adds	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004196:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800419a:	799b      	ldrb	r3, [r3, #6]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d104      	bne.n	80041aa <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 80041a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a8:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80041aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ac:	3301      	adds	r3, #1
 80041ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041b6:	429a      	cmp	r2, r3
 80041b8:	f6ff af7e 	blt.w	80040b8 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80041bc:	e016      	b.n	80041ec <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 80041be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c0:	889a      	ldrh	r2, [r3, #4]
 80041c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c4:	8b9b      	ldrh	r3, [r3, #28]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041cc:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80041ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041d0:	f103 0108 	add.w	r1, r3, #8
 80041d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041d6:	3320      	adds	r3, #32
 80041d8:	461a      	mov	r2, r3
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7fe fd12 	bl	8002c04 <lfs_dir_fetch>
 80041e0:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 80041e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <lfs_dir_relocatingcommit+0x530>
                    return err;
 80041e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ea:	e011      	b.n	8004210 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 80041ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ee:	889a      	ldrh	r2, [r3, #4]
 80041f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f2:	8b9b      	ldrh	r3, [r3, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d303      	bcc.n	8004200 <lfs_dir_relocatingcommit+0x544>
 80041f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041fa:	7fdb      	ldrb	r3, [r3, #31]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1de      	bne.n	80041be <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	663b      	str	r3, [r7, #96]	; 0x60
 8004206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004208:	2b00      	cmp	r3, #0
 800420a:	f47f af35 	bne.w	8004078 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 800420e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8004210:	4618      	mov	r0, r3
 8004212:	3770      	adds	r7, #112	; 0x70
 8004214:	46bd      	mov	sp, r7
 8004216:	bdb0      	pop	{r4, r5, r7, pc}
 8004218:	08012564 	.word	0x08012564
 800421c:	08013158 	.word	0x08013158
 8004220:	08012404 	.word	0x08012404

08004224 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004224:	b5b0      	push	{r4, r5, r7, lr}
 8004226:	b0bc      	sub	sp, #240	; 0xf0
 8004228:	af04      	add	r7, sp, #16
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800423a:	e045      	b.n	80042c8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800423c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004240:	3308      	adds	r3, #8
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	d03a      	beq.n	80042be <lfs_dir_orphaningcommit+0x9a>
 8004248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800424c:	3308      	adds	r3, #8
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc fe50 	bl	8000ef8 <lfs_pair_cmp>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d12f      	bne.n	80042be <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800425e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004262:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004264:	2b01      	cmp	r3, #1
 8004266:	d12a      	bne.n	80042be <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d023      	beq.n	80042be <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8004276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004282:	429a      	cmp	r2, r3
 8004284:	d91b      	bls.n	80042be <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8004286:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f001 f900 	bl	8005490 <lfs_file_outline>
 8004290:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800429c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042a0:	e2ad      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80042a2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f001 f914 	bl	80054d4 <lfs_file_flush>
 80042ac:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80042b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <lfs_dir_orphaningcommit+0x9a>
                return err;
 80042b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042bc:	e29f      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80042be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80042c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1b5      	bne.n	800423c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80042e6:	461d      	mov	r5, r3
 80042e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80042fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff fcd8 	bl	8003cbc <lfs_dir_relocatingcommit>
 800430c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8004310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004314:	2b00      	cmp	r3, #0
 8004316:	da02      	bge.n	800431e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800431c:	e26f      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc fde6 	bl	8000ef8 <lfs_pair_cmp>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	461d      	mov	r5, r3
 8004336:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800433a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800433c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800433e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004342:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800434a:	2b02      	cmp	r3, #2
 800434c:	d14a      	bne.n	80043e4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3348      	adds	r3, #72	; 0x48
 8004352:	461a      	mov	r2, r3
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7fe fc70 	bl	8002c3c <lfs_dir_getgstate>
 800435c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8004360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8004368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800436c:	e247      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8004374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3318      	adds	r3, #24
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc fe2b 	bl	8000fda <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	7ddb      	ldrb	r3, [r3, #23]
 8004388:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800438c:	051a      	lsls	r2, r3, #20
 800438e:	4bc2      	ldr	r3, [pc, #776]	; (8004698 <lfs_dir_orphaningcommit+0x474>)
 8004390:	4313      	orrs	r3, r2
 8004392:	667b      	str	r3, [r7, #100]	; 0x64
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	3318      	adds	r3, #24
 8004398:	66bb      	str	r3, [r7, #104]	; 0x68
 800439a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800439e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80043a2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80043a6:	2000      	movs	r0, #0
 80043a8:	9001      	str	r0, [sp, #4]
 80043aa:	2001      	movs	r0, #1
 80043ac:	9000      	str	r0, [sp, #0]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff fc84 	bl	8003cbc <lfs_dir_relocatingcommit>
 80043b4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	3318      	adds	r3, #24
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc fdf2 	bl	8000fa6 <lfs_pair_fromle32>
        if (state < 0) {
 80043c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	da02      	bge.n	80043d0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80043ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043ce:	e216      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80043d0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80043d4:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80043d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80043e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80043ea:	e1fc      	b.n	80047e6 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80043ec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80043f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80043f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043fc:	4ca7      	ldr	r4, [pc, #668]	; (800469c <lfs_dir_orphaningcommit+0x478>)
 80043fe:	9403      	str	r4, [sp, #12]
 8004400:	9102      	str	r1, [sp, #8]
 8004402:	9201      	str	r2, [sp, #4]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	4603      	mov	r3, r0
 8004408:	f44f 6217 	mov.w	r2, #2416	; 0x970
 800440c:	49a4      	ldr	r1, [pc, #656]	; (80046a0 <lfs_dir_orphaningcommit+0x47c>)
 800440e:	48a5      	ldr	r0, [pc, #660]	; (80046a4 <lfs_dir_orphaningcommit+0x480>)
 8004410:	f00d f92e 	bl	8011670 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f103 0220 	add.w	r2, r3, #32
 8004420:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc fd66 	bl	8000ef8 <lfs_pair_cmp>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d107      	bne.n	8004442 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8004432:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800443a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800444a:	e037      	b.n	80044bc <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800444c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004450:	f103 0208 	add.w	r2, r3, #8
 8004454:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc fd4c 	bl	8000ef8 <lfs_pair_cmp>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8004466:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800446a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800446e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004470:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004474:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004478:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800447a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800447e:	799b      	ldrb	r3, [r3, #6]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d116      	bne.n	80044b2 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004484:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004488:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800448c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc fd30 	bl	8000ef8 <lfs_pair_cmp>
 8004498:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800449e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80044a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80044a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80044b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1c3      	bne.n	800444c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80044c4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80044c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80044cc:	4619      	mov	r1, r3
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f002 faf6 	bl	8006ac0 <lfs_fs_parent>
 80044d4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80044d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044dc:	2b00      	cmp	r3, #0
 80044de:	da07      	bge.n	80044f0 <lfs_dir_orphaningcommit+0x2cc>
 80044e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044e4:	f113 0f02 	cmn.w	r3, #2
 80044e8:	d002      	beq.n	80044f0 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80044ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044ee:	e186      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80044f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044f4:	f113 0f02 	cmn.w	r3, #2
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8004502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004506:	f113 0f02 	cmn.w	r3, #2
 800450a:	f000 809e 	beq.w	800464a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800450e:	2101      	movs	r1, #1
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f002 fb6d 	bl	8006bf0 <lfs_fs_preporphans>
 8004516:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 800451a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <lfs_dir_orphaningcommit+0x304>
                return err;
 8004522:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004526:	e16a      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004528:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800452c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3330      	adds	r3, #48	; 0x30
 8004534:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc fe8e 	bl	800125c <lfs_gstate_hasmovehere>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d02d      	beq.n	80045a2 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4618      	mov	r0, r3
 800454c:	f7fc fdca 	bl	80010e4 <lfs_tag_id>
 8004550:	4603      	mov	r3, r0
 8004552:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004556:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800455a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800455e:	484f      	ldr	r0, [pc, #316]	; (800469c <lfs_dir_orphaningcommit+0x478>)
 8004560:	9002      	str	r0, [sp, #8]
 8004562:	9201      	str	r2, [sp, #4]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	460b      	mov	r3, r1
 8004568:	f640 129d 	movw	r2, #2461	; 0x99d
 800456c:	494c      	ldr	r1, [pc, #304]	; (80046a0 <lfs_dir_orphaningcommit+0x47c>)
 800456e:	484e      	ldr	r0, [pc, #312]	; (80046a8 <lfs_dir_orphaningcommit+0x484>)
 8004570:	f00d f87e 	bl	8011670 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004574:	2200      	movs	r2, #0
 8004576:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f002 fb88 	bl	8006c90 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8004580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004584:	4618      	mov	r0, r3
 8004586:	f7fc fdad 	bl	80010e4 <lfs_tag_id>
 800458a:	4603      	mov	r3, r0
 800458c:	461a      	mov	r2, r3
 800458e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004592:	4293      	cmp	r3, r2
 8004594:	d205      	bcs.n	80045a2 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800459a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800459e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80045a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a4:	657b      	str	r3, [r7, #84]	; 0x54
 80045a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a8:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80045aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fc fd13 	bl	8000fda <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80045b4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80045b8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <lfs_dir_orphaningcommit+0x3ac>
 80045c0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80045ca:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80045ce:	e000      	b.n	80045d2 <lfs_dir_orphaningcommit+0x3ae>
 80045d0:	2300      	movs	r3, #0
 80045d2:	647b      	str	r3, [r7, #68]	; 0x44
 80045d4:	2300      	movs	r3, #0
 80045d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045e2:	653b      	str	r3, [r7, #80]	; 0x50
 80045e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80045ec:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80045f0:	2000      	movs	r0, #0
 80045f2:	9001      	str	r0, [sp, #4]
 80045f4:	2002      	movs	r0, #2
 80045f6:	9000      	str	r0, [sp, #0]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff fb5f 	bl	8003cbc <lfs_dir_relocatingcommit>
 80045fe:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004602:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004606:	4618      	mov	r0, r3
 8004608:	f7fc fccd 	bl	8000fa6 <lfs_pair_fromle32>
            if (state < 0) {
 800460c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004610:	2b00      	cmp	r3, #0
 8004612:	da02      	bge.n	800461a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004618:	e0f1      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800461a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800461e:	2b01      	cmp	r3, #1
 8004620:	d113      	bne.n	800464a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8004622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800462a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800462e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004632:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800463a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800463e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004648:	e0cd      	b.n	80047e6 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800464a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800464e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004652:	4619      	mov	r1, r3
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f002 f981 	bl	800695c <lfs_fs_pred>
 800465a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800465e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <lfs_dir_orphaningcommit+0x452>
 8004666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800466a:	f113 0f02 	cmn.w	r3, #2
 800466e:	d002      	beq.n	8004676 <lfs_dir_orphaningcommit+0x452>
            return err;
 8004670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004674:	e0c3      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004676:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01a      	beq.n	80046b4 <lfs_dir_orphaningcommit+0x490>
 800467e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004682:	f113 0f02 	cmn.w	r3, #2
 8004686:	d115      	bne.n	80046b4 <lfs_dir_orphaningcommit+0x490>
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <lfs_dir_orphaningcommit+0x488>)
 800468a:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <lfs_dir_orphaningcommit+0x48c>)
 800468c:	f44f 611c 	mov.w	r1, #2496	; 0x9c0
 8004690:	4803      	ldr	r0, [pc, #12]	; (80046a0 <lfs_dir_orphaningcommit+0x47c>)
 8004692:	f00c fbc7 	bl	8010e24 <__assert_func>
 8004696:	bf00      	nop
 8004698:	000ffc08 	.word	0x000ffc08
 800469c:	0801250c 	.word	0x0801250c
 80046a0:	08012404 	.word	0x08012404
 80046a4:	0801268c 	.word	0x0801268c
 80046a8:	080126c8 	.word	0x080126c8
 80046ac:	0801270c 	.word	0x0801270c
 80046b0:	08013174 	.word	0x08013174

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80046b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046b8:	f113 0f02 	cmn.w	r3, #2
 80046bc:	f000 8093 	beq.w	80047e6 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3330      	adds	r3, #48	; 0x30
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fc fd80 	bl	80011ca <lfs_gstate_hasorphans>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d011      	beq.n	80046f4 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80046d0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80046d4:	425b      	negs	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	b25b      	sxtb	r3, r3
 80046da:	4619      	mov	r1, r3
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f002 fa87 	bl	8006bf0 <lfs_fs_preporphans>
 80046e2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80046e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80046ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046f2:	e084      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80046f4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80046f8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3330      	adds	r3, #48	; 0x30
 8004700:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc fda8 	bl	800125c <lfs_gstate_hasmovehere>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01c      	beq.n	800474c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	4618      	mov	r0, r3
 8004718:	f7fc fce4 	bl	80010e4 <lfs_tag_id>
 800471c:	4603      	mov	r3, r0
 800471e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8004722:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004726:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800472a:	4837      	ldr	r0, [pc, #220]	; (8004808 <lfs_dir_orphaningcommit+0x5e4>)
 800472c:	9002      	str	r0, [sp, #8]
 800472e:	9201      	str	r2, [sp, #4]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	460b      	mov	r3, r1
 8004734:	f640 12d1 	movw	r2, #2513	; 0x9d1
 8004738:	4934      	ldr	r1, [pc, #208]	; (800480c <lfs_dir_orphaningcommit+0x5e8>)
 800473a:	4835      	ldr	r0, [pc, #212]	; (8004810 <lfs_dir_orphaningcommit+0x5ec>)
 800473c:	f00c ff98 	bl	8011670 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004740:	2200      	movs	r2, #0
 8004742:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f002 faa2 	bl	8006c90 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8004752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004758:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800475c:	4618      	mov	r0, r3
 800475e:	f7fc fc3c 	bl	8000fda <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004762:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004766:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <lfs_dir_orphaningcommit+0x55a>
 800476e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004772:	029b      	lsls	r3, r3, #10
 8004774:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004778:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800477c:	e000      	b.n	8004780 <lfs_dir_orphaningcommit+0x55c>
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	2300      	movs	r3, #0
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
 8004786:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800478a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800478e:	051a      	lsls	r2, r3, #20
 8004790:	4b20      	ldr	r3, [pc, #128]	; (8004814 <lfs_dir_orphaningcommit+0x5f0>)
 8004792:	4313      	orrs	r3, r2
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004796:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800479a:	633b      	str	r3, [r7, #48]	; 0x30
 800479c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80047a4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80047a8:	2000      	movs	r0, #0
 80047aa:	9001      	str	r0, [sp, #4]
 80047ac:	2002      	movs	r0, #2
 80047ae:	9000      	str	r0, [sp, #0]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7ff fa83 	bl	8003cbc <lfs_dir_relocatingcommit>
 80047b6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80047ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fc fbf1 	bl	8000fa6 <lfs_pair_fromle32>
            if (state < 0) {
 80047c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	da02      	bge.n	80047d2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80047cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047d0:	e015      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80047d2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80047d6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80047da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80047e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80047e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	f43f adfe 	beq.w	80043ec <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80047f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <lfs_dir_orphaningcommit+0x5d8>
 80047f8:	2303      	movs	r3, #3
 80047fa:	e000      	b.n	80047fe <lfs_dir_orphaningcommit+0x5da>
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	37e0      	adds	r7, #224	; 0xe0
 8004802:	46bd      	mov	sp, r7
 8004804:	bdb0      	pop	{r4, r5, r7, pc}
 8004806:	bf00      	nop
 8004808:	0801250c 	.word	0x0801250c
 800480c:	08012404 	.word	0x08012404
 8004810:	080126c8 	.word	0x080126c8
 8004814:	000ffc08 	.word	0x000ffc08

08004818 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff fcf9 	bl	8004224 <lfs_dir_orphaningcommit>
 8004832:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	da01      	bge.n	800483e <lfs_dir_commit+0x26>
        return orphans;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	e00d      	b.n	800485a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004844:	2100      	movs	r1, #0
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f002 fb44 	bl	8006ed4 <lfs_fs_deorphan>
 800484c:	6138      	str	r0, [r7, #16]
        if (err) {
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <lfs_dir_commit+0x40>
            return err;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	e000      	b.n	800485a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <lfs_dir_rawopen>:

    return 0;
}
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b08d      	sub	sp, #52	; 0x34
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f103 0108 	add.w	r1, r3, #8
 8004876:	1d3a      	adds	r2, r7, #4
 8004878:	2300      	movs	r3, #0
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7fe fad4 	bl	8002e28 <lfs_dir_find>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	da01      	bge.n	800488c <lfs_dir_rawopen+0x28>
        return tag;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	e05e      	b.n	800494a <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	4618      	mov	r0, r3
 8004890:	f7fc fbfe 	bl	8001090 <lfs_tag_type3>
 8004894:	4603      	mov	r3, r0
 8004896:	2b02      	cmp	r3, #2
 8004898:	d002      	beq.n	80048a0 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 800489a:	f06f 0313 	mvn.w	r3, #19
 800489e:	e054      	b.n	800494a <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fc fc1e 	bl	80010e4 <lfs_tag_id>
 80048a8:	4603      	mov	r3, r0
 80048aa:	461a      	mov	r2, r3
 80048ac:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d106      	bne.n	80048c2 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	e01f      	b.n	8004902 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc fc0a 	bl	80010e4 <lfs_tag_id>
 80048d0:	4603      	mov	r3, r0
 80048d2:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80048d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048d8:	f043 0308 	orr.w	r3, r3, #8
 80048dc:	f107 0214 	add.w	r2, r7, #20
 80048e0:	9200      	str	r2, [sp, #0]
 80048e2:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <lfs_dir_rawopen+0xf0>)
 80048e4:	4621      	mov	r1, r4
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7fd f862 	bl	80019b0 <lfs_dir_get>
 80048ec:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	da01      	bge.n	80048f8 <lfs_dir_rawopen+0x94>
            return res;
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	e028      	b.n	800494a <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 80048f8:	f107 0314 	add.w	r3, r7, #20
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fc fb52 	bl	8000fa6 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3308      	adds	r3, #8
 8004906:	f107 0214 	add.w	r2, r7, #20
 800490a:	4619      	mov	r1, r3
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7fe f979 	bl	8002c04 <lfs_dir_fetch>
 8004912:	61f8      	str	r0, [r7, #28]
    if (err) {
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <lfs_dir_rawopen+0xba>
        return err;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	e015      	b.n	800494a <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2200      	movs	r2, #0
 8004932:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2200      	movs	r2, #0
 8004938:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2202      	movs	r2, #2
 800493e:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7fc fdf9 	bl	800153a <lfs_mlist_append>

    return 0;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	372c      	adds	r7, #44	; 0x2c
 800494e:	46bd      	mov	sp, r7
 8004950:	bd90      	pop	{r4, r7, pc}
 8004952:	bf00      	nop
 8004954:	700ffc00 	.word	0x700ffc00

08004958 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fc fdc6 	bl	80014f6 <lfs_mlist_remove>

    return 0;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8004980:	f44f 7284 	mov.w	r2, #264	; 0x108
 8004984:	2100      	movs	r1, #0
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f00c fad2 	bl	8010f30 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	2b00      	cmp	r3, #0
 8004992:	d110      	bne.n	80049b6 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3308      	adds	r3, #8
 800499e:	4935      	ldr	r1, [pc, #212]	; (8004a74 <lfs_dir_rawread+0x100>)
 80049a0:	461a      	mov	r2, r3
 80049a2:	460b      	mov	r3, r1
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e05a      	b.n	8004a6c <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d110      	bne.n	80049e0 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3308      	adds	r3, #8
 80049c8:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <lfs_dir_rawread+0x104>)
 80049ca:	8811      	ldrh	r1, [r2, #0]
 80049cc:	7892      	ldrb	r2, [r2, #2]
 80049ce:	8019      	strh	r1, [r3, #0]
 80049d0:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 80049dc:	2301      	movs	r3, #1
 80049de:	e045      	b.n	8004a6c <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	889a      	ldrh	r2, [r3, #4]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	8b9b      	ldrh	r3, [r3, #28]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d11a      	bne.n	8004a22 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	7fdb      	ldrb	r3, [r3, #31]
 80049f0:	f083 0301 	eor.w	r3, r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <lfs_dir_rawread+0x8a>
                return false;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e036      	b.n	8004a6c <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f103 0108 	add.w	r1, r3, #8
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	3320      	adds	r3, #32
 8004a08:	461a      	mov	r2, r3
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7fe f8fa 	bl	8002c04 <lfs_dir_fetch>
 8004a10:	6178      	str	r0, [r7, #20]
            if (err) {
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <lfs_dir_rawread+0xa8>
                return err;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	e027      	b.n	8004a6c <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f103 0108 	add.w	r1, r3, #8
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	889a      	ldrh	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7fe f936 	bl	8002ca0 <lfs_dir_getinfo>
 8004a34:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <lfs_dir_rawread+0xd4>
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f113 0f02 	cmn.w	r3, #2
 8004a42:	d001      	beq.n	8004a48 <lfs_dir_rawread+0xd4>
            return err;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	e011      	b.n	8004a6c <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	889b      	ldrh	r3, [r3, #4]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f113 0f02 	cmn.w	r3, #2
 8004a5a:	d100      	bne.n	8004a5e <lfs_dir_rawread+0xea>
    while (true) {
 8004a5c:	e7c0      	b.n	80049e0 <lfs_dir_rawread+0x6c>
            break;
 8004a5e:	bf00      	nop
        }
    }

    dir->pos += 1;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8004a6a:	2301      	movs	r3, #1
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	0801255c 	.word	0x0801255c
 8004a78:	08012560 	.word	0x08012560

08004a7c <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	3b08      	subs	r3, #8
 8004a94:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <lfs_ctz_index+0x2e>
        return 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e01c      	b.n	8004ae4 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fb fdfc 	bl	80006ac <lfs_popc>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	1ad2      	subs	r2, r2, r3
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	1ad4      	subs	r4, r2, r3
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7fb fdea 	bl	80006ac <lfs_popc>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	1ae2      	subs	r2, r4, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	601a      	str	r2, [r3, #0]
    return i;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}

08004aec <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b08f      	sub	sp, #60	; 0x3c
 8004af0:	af04      	add	r7, sp, #16
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d108      	bne.n	8004b12 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
        return 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e053      	b.n	8004bba <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	3b01      	subs	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f7ff ffac 	bl	8004a7c <lfs_ctz_index>
 8004b24:	4603      	mov	r3, r0
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004b28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff ffa4 	bl	8004a7c <lfs_ctz_index>
 8004b34:	4603      	mov	r3, r0
 8004b36:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004b38:	e034      	b.n	8004ba4 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	3301      	adds	r3, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fb fd93 	bl	800066e <lfs_npw2>
 8004b48:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004b4a:	1e5c      	subs	r4, r3, #1
 8004b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b4e:	f7fb fd9e 	bl	800068e <lfs_ctz>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4619      	mov	r1, r3
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7fb fd52 	bl	8000600 <lfs_min>
 8004b5c:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	0092      	lsls	r2, r2, #2
 8004b64:	2104      	movs	r1, #4
 8004b66:	9103      	str	r1, [sp, #12]
 8004b68:	4639      	mov	r1, r7
 8004b6a:	9102      	str	r1, [sp, #8]
 8004b6c:	9201      	str	r2, [sp, #4]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2304      	movs	r3, #4
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f7fb fe1e 	bl	80007b8 <lfs_bd_read>
 8004b7c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fb fdad 	bl	80006e0 <lfs_fromle32>
 8004b86:	4603      	mov	r3, r0
 8004b88:	603b      	str	r3, [r7, #0]
        if (err) {
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <lfs_ctz_find+0xa8>
            return err;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	e012      	b.n	8004bba <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004b94:	2201      	movs	r2, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d8c6      	bhi.n	8004b3a <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb0:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb6:	601a      	str	r2, [r3, #0]
    return 0;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	372c      	adds	r7, #44	; 0x2c
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd90      	pop	{r4, r7, pc}
	...

08004bc4 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b092      	sub	sp, #72	; 0x48
 8004bc8:	af04      	add	r7, sp, #16
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004bd2:	f107 0320 	add.w	r3, r7, #32
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7fc fd81 	bl	80016e0 <lfs_alloc>
 8004bde:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <lfs_ctz_extend+0x26>
            return err;
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	e0e9      	b.n	8004dbe <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	4619      	mov	r1, r3
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7fc f920 	bl	8000e34 <lfs_bd_erase>
 8004bf4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004c02:	f000 80cb 	beq.w	8004d9c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	e0d9      	b.n	8004dbe <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8004c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d107      	bne.n	8004c20 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c14:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
                return 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e0ce      	b.n	8004dbe <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c22:	3b01      	subs	r3, #1
 8004c24:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004c26:	f107 031c 	add.w	r3, r7, #28
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff ff25 	bl	8004a7c <lfs_ctz_index>
 8004c32:	4603      	mov	r3, r0
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d044      	beq.n	8004cd2 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004c48:	2300      	movs	r3, #0
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4c:	e035      	b.n	8004cba <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c52:	1ad2      	subs	r2, r2, r3
 8004c54:	2301      	movs	r3, #1
 8004c56:	9303      	str	r3, [sp, #12]
 8004c58:	f107 0317 	add.w	r3, r7, #23
 8004c5c:	9302      	str	r3, [sp, #8]
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	4613      	mov	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7fb fda3 	bl	80007b8 <lfs_bd_read>
 8004c72:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <lfs_ctz_extend+0xba>
                        return err;
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	e09f      	b.n	8004dbe <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	2201      	movs	r2, #1
 8004c82:	9203      	str	r2, [sp, #12]
 8004c84:	f107 0217 	add.w	r2, r7, #23
 8004c88:	9202      	str	r2, [sp, #8]
 8004c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c8c:	9201      	str	r2, [sp, #4]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	2301      	movs	r3, #1
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f7fc f820 	bl	8000cdc <lfs_bd_prog>
 8004c9c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004caa:	d101      	bne.n	8004cb0 <lfs_ctz_extend+0xec>
                            goto relocate;
 8004cac:	bf00      	nop
                    goto relocate;
 8004cae:	e075      	b.n	8004d9c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8004cb2:	e084      	b.n	8004dbe <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d3c5      	bcc.n	8004c4e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004cc2:	6a3a      	ldr	r2, [r7, #32]
 8004cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc6:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ccc:	601a      	str	r2, [r3, #0]
                return 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e075      	b.n	8004dbe <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cda:	f7fb fcd8 	bl	800068e <lfs_ctz>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004ce8:	2300      	movs	r3, #0
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
 8004cec:	e049      	b.n	8004d82 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb fd00 	bl	80006f6 <lfs_tole32>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfe:	0092      	lsls	r2, r2, #2
 8004d00:	2104      	movs	r1, #4
 8004d02:	9103      	str	r1, [sp, #12]
 8004d04:	f107 0118 	add.w	r1, r7, #24
 8004d08:	9102      	str	r1, [sp, #8]
 8004d0a:	9201      	str	r2, [sp, #4]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2301      	movs	r3, #1
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7fb ffe1 	bl	8000cdc <lfs_bd_prog>
 8004d1a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fcde 	bl	80006e0 <lfs_fromle32>
 8004d24:	4603      	mov	r3, r0
 8004d26:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004d34:	d034      	beq.n	8004da0 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	e041      	b.n	8004dbe <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d01b      	beq.n	8004d7c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d48:	0092      	lsls	r2, r2, #2
 8004d4a:	2104      	movs	r1, #4
 8004d4c:	9103      	str	r1, [sp, #12]
 8004d4e:	f107 0118 	add.w	r1, r7, #24
 8004d52:	9102      	str	r1, [sp, #8]
 8004d54:	9201      	str	r2, [sp, #4]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2304      	movs	r3, #4
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7fb fd2a 	bl	80007b8 <lfs_bd_read>
 8004d64:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fb fcb9 	bl	80006e0 <lfs_fromle32>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <lfs_ctz_extend+0x1b8>
                        return err;
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	e020      	b.n	8004dbe <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	3301      	adds	r3, #1
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
 8004d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d3b1      	bcc.n	8004cee <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	009a      	lsls	r2, r3, #2
 8004d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d96:	601a      	str	r2, [r3, #0]
            return 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e010      	b.n	8004dbe <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8004d9c:	bf00      	nop
 8004d9e:	e000      	b.n	8004da2 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8004da0:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <lfs_ctz_extend+0x204>)
 8004da6:	9200      	str	r2, [sp, #0]
 8004da8:	f640 328a 	movw	r2, #2954	; 0xb8a
 8004dac:	4907      	ldr	r1, [pc, #28]	; (8004dcc <lfs_ctz_extend+0x208>)
 8004dae:	4808      	ldr	r0, [pc, #32]	; (8004dd0 <lfs_ctz_extend+0x20c>)
 8004db0:	f00c fc5e 	bl	8011670 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7fb fcd8 	bl	800076c <lfs_cache_drop>
    while (true) {
 8004dbc:	e709      	b.n	8004bd2 <lfs_ctz_extend+0xe>
    }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3738      	adds	r7, #56	; 0x38
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	0801250c 	.word	0x0801250c
 8004dcc:	08012404 	.word	0x08012404
 8004dd0:	0801258c 	.word	0x0801258c

08004dd4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b090      	sub	sp, #64	; 0x40
 8004dd8:	af04      	add	r7, sp, #16
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <lfs_ctz_traverse+0x18>
        return 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e06d      	b.n	8004ec8 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	3b01      	subs	r3, #1
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	f107 031c 	add.w	r3, r7, #28
 8004df6:	4619      	mov	r1, r3
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff fe3f 	bl	8004a7c <lfs_ctz_index>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8004e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004e08:	4798      	blx	r3
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <lfs_ctz_traverse+0x42>
            return err;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	e058      	b.n	8004ec8 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <lfs_ctz_traverse+0x4c>
            return 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e053      	b.n	8004ec8 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	f1c3 0302 	rsb	r3, r3, #2
 8004e2a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004e2e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004e30:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004e32:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004e34:	9303      	str	r3, [sp, #12]
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	9302      	str	r3, [sp, #8]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7fb fcb4 	bl	80007b8 <lfs_bd_read>
 8004e50:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fb fc43 	bl	80006e0 <lfs_fromle32>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fb fc3d 	bl	80006e0 <lfs_fromle32>
 8004e66:	4603      	mov	r3, r0
 8004e68:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <lfs_ctz_traverse+0xa0>
            return err;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	e029      	b.n	8004ec8 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8004e74:	2300      	movs	r3, #0
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e78:	e013      	b.n	8004ea2 <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004e82:	4413      	add	r3, r2
 8004e84:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004e8e:	4798      	blx	r3
 8004e90:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <lfs_ctz_traverse+0xc8>
                return err;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	e015      	b.n	8004ec8 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	dbe6      	blt.n	8004e7a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004ebc:	603b      	str	r3, [r7, #0]
        index -= count;
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004ec6:	e79c      	b.n	8004e02 <lfs_ctz_traverse+0x2e>
    }
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3730      	adds	r7, #48	; 0x30
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004ed0:	b5b0      	push	{r4, r5, r7, lr}
 8004ed2:	b09a      	sub	sp, #104	; 0x68
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f002 f9a3 	bl	8007234 <lfs_fs_forceconsistency>
 8004eee:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8004ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <lfs_file_rawopencfg+0x2a>
            return err;
 8004ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef8:	e1b0      	b.n	800525c <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004efe:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2200      	movs	r2, #0
 8004f16:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f103 0108 	add.w	r1, r3, #8
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3304      	adds	r3, #4
 8004f22:	1d3a      	adds	r2, r7, #4
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7fd ff7f 	bl	8002e28 <lfs_dir_find>
 8004f2a:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8004f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	da0c      	bge.n	8004f4c <lfs_file_rawopencfg+0x7c>
 8004f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f34:	f113 0f02 	cmn.w	r3, #2
 8004f38:	d105      	bne.n	8004f46 <lfs_file_rawopencfg+0x76>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	889b      	ldrh	r3, [r3, #4]
 8004f3e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d102      	bne.n	8004f4c <lfs_file_rawopencfg+0x7c>
        err = tag;
 8004f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f48:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004f4a:	e17c      	b.n	8005246 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7fc faf0 	bl	800153a <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f5c:	f113 0f02 	cmn.w	r3, #2
 8004f60:	d14e      	bne.n	8005000 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8004f6c:	f06f 0301 	mvn.w	r3, #1
 8004f70:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004f72:	e168      	b.n	8005246 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fb f944 	bl	8000204 <strlen>
 8004f7c:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d903      	bls.n	8004f90 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004f88:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004f8e:	e15a      	b.n	8005246 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f103 0108 	add.w	r1, r3, #8
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	889b      	ldrh	r3, [r3, #4]
 8004f9a:	029b      	lsls	r3, r3, #10
 8004f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	889b      	ldrh	r3, [r3, #4]
 8004fae:	029a      	lsls	r2, r3, #10
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	889b      	ldrh	r3, [r3, #4]
 8004fc2:	029b      	lsls	r3, r3, #10
 8004fc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fce:	2300      	movs	r3, #0
 8004fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004fd2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fc1d 	bl	8004818 <lfs_dir_commit>
 8004fde:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8004fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe2:	f113 0f1c 	cmn.w	r3, #28
 8004fe6:	d001      	beq.n	8004fec <lfs_file_rawopencfg+0x11c>
 8004fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fea:	e001      	b.n	8004ff0 <lfs_file_rawopencfg+0x120>
 8004fec:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8004ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f040 8125 	bne.w	8005244 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8004ffa:	4b9a      	ldr	r3, [pc, #616]	; (8005264 <lfs_file_rawopencfg+0x394>)
 8004ffc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ffe:	e044      	b.n	800508a <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 800500a:	f06f 0310 	mvn.w	r3, #16
 800500e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005010:	e119      	b.n	8005246 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8005012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005014:	4618      	mov	r0, r3
 8005016:	f7fc f83b 	bl	8001090 <lfs_tag_type3>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d003      	beq.n	8005028 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8005020:	f06f 0314 	mvn.w	r3, #20
 8005024:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005026:	e10e      	b.n	8005246 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00e      	beq.n	8005050 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	889b      	ldrh	r3, [r3, #4]
 8005036:	029b      	lsls	r3, r3, #10
 8005038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800503c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005040:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
 800504e:	e01c      	b.n	800508a <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	889b      	ldrh	r3, [r3, #4]
 800505a:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800505c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005060:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005068:	9200      	str	r2, [sp, #0]
 800506a:	4a7f      	ldr	r2, [pc, #508]	; (8005268 <lfs_file_rawopencfg+0x398>)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7fc fc9f 	bl	80019b0 <lfs_dir_get>
 8005072:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8005074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005076:	2b00      	cmp	r3, #0
 8005078:	da02      	bge.n	8005080 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 800507a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800507c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800507e:	e0e2      	b.n	8005246 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	3328      	adds	r3, #40	; 0x28
 8005084:	4618      	mov	r0, r3
 8005086:	f7fc f979 	bl	800137c <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800508a:	2300      	movs	r3, #0
 800508c:	657b      	str	r3, [r7, #84]	; 0x54
 800508e:	e063      	b.n	8005158 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d03c      	beq.n	8005116 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	6859      	ldr	r1, [r3, #4]
 80050a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050aa:	4613      	mov	r3, r2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80050ba:	051a      	lsls	r2, r3, #20
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	889b      	ldrh	r3, [r3, #4]
 80050c0:	029b      	lsls	r3, r3, #10
 80050c2:	ea42 0103 	orr.w	r1, r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ca:	6858      	ldr	r0, [r3, #4]
 80050cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ce:	4613      	mov	r3, r2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4403      	add	r3, r0
 80050d8:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050da:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	6859      	ldr	r1, [r3, #4]
 80050e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050e6:	4613      	mov	r3, r2
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4603      	mov	r3, r0
 80050f6:	4a5d      	ldr	r2, [pc, #372]	; (800526c <lfs_file_rawopencfg+0x39c>)
 80050f8:	4621      	mov	r1, r4
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7fc fc58 	bl	80019b0 <lfs_dir_get>
 8005100:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8005102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005104:	2b00      	cmp	r3, #0
 8005106:	da06      	bge.n	8005116 <lfs_file_rawopencfg+0x246>
 8005108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510a:	f113 0f02 	cmn.w	r3, #2
 800510e:	d002      	beq.n	8005116 <lfs_file_rawopencfg+0x246>
                err = res;
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005114:	e097      	b.n	8005246 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005126:	6859      	ldr	r1, [r3, #4]
 8005128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513a:	429a      	cmp	r2, r3
 800513c:	d903      	bls.n	8005146 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 800513e:	f06f 031b 	mvn.w	r3, #27
 8005142:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005144:	e07f      	b.n	8005246 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005154:	3301      	adds	r3, #1
 8005156:	657b      	str	r3, [r7, #84]	; 0x54
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005160:	429a      	cmp	r2, r3
 8005162:	d395      	bcc.n	8005090 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	64da      	str	r2, [r3, #76]	; 0x4c
 8005178:	e010      	b.n	800519c <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	4618      	mov	r0, r3
 8005182:	f7fb fadc 	bl	800073e <lfs_malloc>
 8005186:	4602      	mov	r2, r0
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8005194:	f06f 030b 	mvn.w	r3, #11
 8005198:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800519a:	e054      	b.n	8005246 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	3340      	adds	r3, #64	; 0x40
 80051a0:	4619      	mov	r1, r3
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7fb faf1 	bl	800078a <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80051a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fb ff70 	bl	8001090 <lfs_tag_type3>
 80051b0:	4603      	mov	r3, r0
 80051b2:	461a      	mov	r2, r3
 80051b4:	f240 2301 	movw	r3, #513	; 0x201
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d141      	bne.n	8005240 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f06f 0201 	mvn.w	r2, #1
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80051c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fb ff9c 	bl	8001104 <lfs_tag_size>
 80051cc:	4602      	mov	r2, r0
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2200      	movs	r2, #0
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	889b      	ldrh	r3, [r3, #4]
 8005208:	029c      	lsls	r4, r3, #10
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005212:	4618      	mov	r0, r3
 8005214:	f7fb f9f4 	bl	8000600 <lfs_min>
 8005218:	4603      	mov	r3, r0
 800521a:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800521c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	4a0f      	ldr	r2, [pc, #60]	; (8005268 <lfs_file_rawopencfg+0x398>)
 800522a:	4629      	mov	r1, r5
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7fc fbbf 	bl	80019b0 <lfs_dir_get>
 8005232:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8005234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005236:	2b00      	cmp	r3, #0
 8005238:	da02      	bge.n	8005240 <lfs_file_rawopencfg+0x370>
                err = res;
 800523a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800523c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800523e:	e002      	b.n	8005246 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8005240:	2300      	movs	r3, #0
 8005242:	e00b      	b.n	800525c <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8005244:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f823 	bl	80052a0 <lfs_file_rawclose>
    return err;
 800525a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800525c:	4618      	mov	r0, r3
 800525e:	3760      	adds	r7, #96	; 0x60
 8005260:	46bd      	mov	sp, r7
 8005262:	bdb0      	pop	{r4, r5, r7, pc}
 8005264:	20100000 	.word	0x20100000
 8005268:	700ffc00 	.word	0x700ffc00
 800526c:	7ffffc00 	.word	0x7ffffc00

08005270 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <lfs_file_rawopen+0x2c>)
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff fe21 	bl	8004ed0 <lfs_file_rawopencfg>
 800528e:	6178      	str	r0, [r7, #20]
    return err;
 8005290:	697b      	ldr	r3, [r7, #20]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	0801318c 	.word	0x0801318c

080052a0 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f9e5 	bl	800567c <lfs_file_rawsync>
 80052b2:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fc f91d 	bl	80014f6 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fb fa43 	bl	8000756 <lfs_free>
    }

    return err;
 80052d0:	68fb      	ldr	r3, [r7, #12]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b08d      	sub	sp, #52	; 0x34
 80052e0:	af06      	add	r7, sp, #24
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80052e6:	f107 030c 	add.w	r3, r7, #12
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fc f9f7 	bl	80016e0 <lfs_alloc>
 80052f2:	6138      	str	r0, [r7, #16]
        if (err) {
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <lfs_file_relocate+0x22>
            return err;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	e0bb      	b.n	8005476 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fb fd96 	bl	8000e34 <lfs_bd_erase>
 8005308:	6138      	str	r0, [r7, #16]
        if (err) {
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005316:	f000 809b 	beq.w	8005450 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	e0ab      	b.n	8005476 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e069      	b.n	80053f8 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d027      	beq.n	8005380 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f103 0008 	add.w	r0, r3, #8
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	889b      	ldrh	r3, [r3, #4]
 8005348:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800534a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800534e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005352:	2101      	movs	r1, #1
 8005354:	9105      	str	r1, [sp, #20]
 8005356:	f107 010b 	add.w	r1, r7, #11
 800535a:	9104      	str	r1, [sp, #16]
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	9103      	str	r1, [sp, #12]
 8005360:	9302      	str	r3, [sp, #8]
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <lfs_file_relocate+0x1a4>)
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	9200      	str	r2, [sp, #0]
 8005368:	4623      	mov	r3, r4
 800536a:	2200      	movs	r2, #0
 800536c:	4601      	mov	r1, r0
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fc fb39 	bl	80019e6 <lfs_dir_getread>
 8005374:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01e      	beq.n	80053ba <lfs_file_relocate+0xde>
                    return err;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	e07a      	b.n	8005476 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8005386:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	1ad4      	subs	r4, r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	2201      	movs	r2, #1
 8005396:	9203      	str	r2, [sp, #12]
 8005398:	f107 020b 	add.w	r2, r7, #11
 800539c:	9202      	str	r2, [sp, #8]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	9201      	str	r2, [sp, #4]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	4623      	mov	r3, r4
 80053a6:	4602      	mov	r2, r0
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7fb fa05 	bl	80007b8 <lfs_bd_read>
 80053ae:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <lfs_file_relocate+0xde>
                    return err;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	e05d      	b.n	8005476 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f103 0110 	add.w	r1, r3, #16
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	9203      	str	r2, [sp, #12]
 80053c8:	f107 020b 	add.w	r2, r7, #11
 80053cc:	9202      	str	r2, [sp, #8]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	9201      	str	r2, [sp, #4]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	2301      	movs	r3, #1
 80053d6:	4602      	mov	r2, r0
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fb fc7f 	bl	8000cdc <lfs_bd_prog>
 80053de:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80053ec:	d032      	beq.n	8005454 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	e041      	b.n	8005476 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	3301      	adds	r3, #1
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d390      	bcc.n	8005324 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69d9      	ldr	r1, [r3, #28]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	461a      	mov	r2, r3
 8005412:	f00b fd7f 	bl	8010f14 <memcpy>
        file->cache.block = lfs->pcache.block;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3310      	adds	r3, #16
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fb f9a8 	bl	800078a <lfs_cache_zero>

        file->block = nblock;
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800544c:	2300      	movs	r3, #0
 800544e:	e012      	b.n	8005476 <lfs_file_relocate+0x19a>
                goto relocate;
 8005450:	bf00      	nop
 8005452:	e000      	b.n	8005456 <lfs_file_relocate+0x17a>
                    goto relocate;
 8005454:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <lfs_file_relocate+0x1a8>)
 800545a:	9200      	str	r2, [sp, #0]
 800545c:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8005460:	4909      	ldr	r1, [pc, #36]	; (8005488 <lfs_file_relocate+0x1ac>)
 8005462:	480a      	ldr	r0, [pc, #40]	; (800548c <lfs_file_relocate+0x1b0>)
 8005464:	f00c f904 	bl	8011670 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3310      	adds	r3, #16
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fb f97c 	bl	800076c <lfs_cache_drop>
    while (true) {
 8005474:	e737      	b.n	80052e6 <lfs_file_relocate+0xa>
    }
}
 8005476:	4618      	mov	r0, r3
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd90      	pop	{r4, r7, pc}
 800547e:	bf00      	nop
 8005480:	fff7fc00 	.word	0xfff7fc00
 8005484:	0801250c 	.word	0x0801250c
 8005488:	08012404 	.word	0x08012404
 800548c:	0801258c 	.word	0x0801258c

08005490 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fc f8ba 	bl	800161c <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff ff16 	bl	80052dc <lfs_file_relocate>
 80054b0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <lfs_file_outline+0x2c>
        return err;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	e006      	b.n	80054ca <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	b09f      	sub	sp, #124	; 0x7c
 80054d8:	af02      	add	r7, sp, #8
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d011      	beq.n	800550e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d105      	bne.n	8005502 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	3340      	adds	r3, #64	; 0x40
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fb f935 	bl	800076c <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 80a4 	beq.w	8005664 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d176      	bne.n	800561c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800552e:	f107 030c 	add.w	r3, r7, #12
 8005532:	2254      	movs	r2, #84	; 0x54
 8005534:	2100      	movs	r1, #0
 8005536:	4618      	mov	r0, r3
 8005538:	f00b fcfa 	bl	8010f30 <memset>
                .ctz.head = file->ctz.head,
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8005546:	63bb      	str	r3, [r7, #56]	; 0x38
 8005548:	2301      	movs	r3, #1
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8005550:	643b      	str	r3, [r7, #64]	; 0x40
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005558:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800555a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fb f902 	bl	800076c <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005568:	e02b      	b.n	80055c2 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800556a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800556e:	f107 010c 	add.w	r1, r7, #12
 8005572:	2301      	movs	r3, #1
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f90d 	bl	8005794 <lfs_file_flushedread>
 800557a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800557c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557e:	2b00      	cmp	r3, #0
 8005580:	da01      	bge.n	8005586 <lfs_file_flush+0xb2>
                    return res;
 8005582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005584:	e06f      	b.n	8005666 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005586:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800558a:	2301      	movs	r3, #1
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa08 	bl	80059a4 <lfs_file_flushedwrite>
 8005594:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8005596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005598:	2b00      	cmp	r3, #0
 800559a:	da01      	bge.n	80055a0 <lfs_file_flush+0xcc>
                    return res;
 800559c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800559e:	e062      	b.n	8005666 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d00b      	beq.n	80055c2 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80055aa:	f107 030c 	add.w	r3, r7, #12
 80055ae:	3340      	adds	r3, #64	; 0x40
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fb f8da 	bl	800076c <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fb f8d5 	bl	800076c <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d3cd      	bcc.n	800556a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	2301      	movs	r3, #1
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7fb fad1 	bl	8000b80 <lfs_bd_flush>
 80055de:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80055e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d026      	beq.n	8005634 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80055e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055e8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80055ec:	d001      	beq.n	80055f2 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80055ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f0:	e039      	b.n	8005666 <lfs_file_flush+0x192>
                        goto relocate;
 80055f2:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <lfs_file_flush+0x19c>)
 80055fa:	9200      	str	r2, [sp, #0]
 80055fc:	f640 520f 	movw	r2, #3343	; 0xd0f
 8005600:	491c      	ldr	r1, [pc, #112]	; (8005674 <lfs_file_flush+0x1a0>)
 8005602:	481d      	ldr	r0, [pc, #116]	; (8005678 <lfs_file_flush+0x1a4>)
 8005604:	f00c f834 	bl	8011670 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff fe66 	bl	80052dc <lfs_file_relocate>
 8005610:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0da      	beq.n	80055ce <lfs_file_flush+0xfa>
                    return err;
 8005618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800561a:	e024      	b.n	8005666 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f7fa ffda 	bl	80005e0 <lfs_max>
 800562c:	4602      	mov	r2, r0
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	635a      	str	r2, [r3, #52]	; 0x34
 8005632:	e000      	b.n	8005636 <lfs_file_flush+0x162>
                break;
 8005634:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005662:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3774      	adds	r7, #116	; 0x74
 800566a:	46bd      	mov	sp, r7
 800566c:	bd90      	pop	{r4, r7, pc}
 800566e:	bf00      	nop
 8005670:	0801250c 	.word	0x0801250c
 8005674:	08012404 	.word	0x08012404
 8005678:	0801258c 	.word	0x0801258c

0800567c <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b090      	sub	sp, #64	; 0x40
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8005692:	2300      	movs	r3, #0
 8005694:	e07a      	b.n	800578c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff ff1b 	bl	80054d4 <lfs_file_flush>
 800569e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	e06a      	b.n	800578c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d063      	beq.n	800578a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fb fbfb 	bl	8000ec2 <lfs_pair_isnull>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f083 0301 	eor.w	r3, r3, #1
 80056d2:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d058      	beq.n	800578a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80056e4:	f240 2301 	movw	r3, #513	; 0x201
 80056e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ee:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
 80056f6:	e014      	b.n	8005722 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80056f8:	f240 2302 	movw	r3, #514	; 0x202
 80056fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005704:	3228      	adds	r2, #40	; 0x28
 8005706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800570a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800570e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005712:	4618      	mov	r0, r3
 8005714:	f7fb fe4a 	bl	80013ac <lfs_ctz_tole32>
            buffer = &ctz;
 8005718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800571e:	2308      	movs	r3, #8
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f103 0108 	add.w	r1, r3, #8
 8005728:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800572a:	051a      	lsls	r2, r3, #20
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	889b      	ldrh	r3, [r3, #4]
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	431a      	orrs	r2, r3
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	889b      	ldrh	r3, [r3, #4]
 8005742:	029a      	lsls	r2, r3, #10
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	4313      	orrs	r3, r2
 800574c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005750:	623b      	str	r3, [r7, #32]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
 800575a:	f107 0218 	add.w	r2, r7, #24
 800575e:	2302      	movs	r3, #2
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff f859 	bl	8004818 <lfs_dir_commit>
 8005766:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	e006      	b.n	800578c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3740      	adds	r7, #64	; 0x40
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005794:	b5b0      	push	{r4, r5, r7, lr}
 8005796:	b090      	sub	sp, #64	; 0x40
 8005798:	af06      	add	r7, sp, #24
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d301      	bcc.n	80057ba <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e0b7      	b.n	800592a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	4619      	mov	r1, r3
 80057c6:	6838      	ldr	r0, [r7, #0]
 80057c8:	f7fa ff1a 	bl	8000600 <lfs_min>
 80057cc:	6038      	str	r0, [r7, #0]
    nsize = size;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80057d2:	e0a5      	b.n	8005920 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e8:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d130      	bne.n	8005850 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11c      	bne.n	8005834 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	3138      	adds	r1, #56	; 0x38
 8005810:	68b8      	ldr	r0, [r7, #8]
 8005812:	303c      	adds	r0, #60	; 0x3c
 8005814:	9003      	str	r0, [sp, #12]
 8005816:	9102      	str	r1, [sp, #8]
 8005818:	9201      	str	r2, [sp, #4]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	462b      	mov	r3, r5
 800581e:	4622      	mov	r2, r4
 8005820:	2100      	movs	r1, #0
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff f962 	bl	8004aec <lfs_ctz_find>
 8005828:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <lfs_file_flushedread+0xb0>
                    return err;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	e07a      	b.n	800592a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f06f 0201 	mvn.w	r2, #1
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	4619      	mov	r1, r3
 800585e:	6a38      	ldr	r0, [r7, #32]
 8005860:	f7fa fece 	bl	8000600 <lfs_min>
 8005864:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d026      	beq.n	80058c0 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f103 0408 	add.w	r4, r3, #8
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8005882:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	889b      	ldrh	r3, [r3, #4]
 8005888:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800588a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800588e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005896:	69b8      	ldr	r0, [r7, #24]
 8005898:	9005      	str	r0, [sp, #20]
 800589a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800589c:	9004      	str	r0, [sp, #16]
 800589e:	9103      	str	r1, [sp, #12]
 80058a0:	9302      	str	r3, [sp, #8]
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <lfs_file_flushedread+0x1a0>)
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	9200      	str	r2, [sp, #0]
 80058a8:	462b      	mov	r3, r5
 80058aa:	2200      	movs	r2, #0
 80058ac:	4621      	mov	r1, r4
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7fc f899 	bl	80019e6 <lfs_dir_getread>
 80058b4:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01d      	beq.n	80058f8 <lfs_file_flushedread+0x164>
                return err;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	e034      	b.n	800592a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80058ca:	69dc      	ldr	r4, [r3, #28]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	9103      	str	r1, [sp, #12]
 80058d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058da:	9102      	str	r1, [sp, #8]
 80058dc:	9201      	str	r2, [sp, #4]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	4623      	mov	r3, r4
 80058e2:	4602      	mov	r2, r0
 80058e4:	2100      	movs	r1, #0
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7fa ff66 	bl	80007b8 <lfs_bd_read>
 80058ec:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <lfs_file_flushedread+0x164>
                return err;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	e018      	b.n	800592a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	441a      	add	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	441a      	add	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4413      	add	r3, r2
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f47f af56 	bne.w	80057d4 <lfs_file_flushedread+0x40>
    }

    return size;
 8005928:	683b      	ldr	r3, [r7, #0]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3728      	adds	r7, #40	; 0x28
 800592e:	46bd      	mov	sp, r7
 8005930:	bdb0      	pop	{r4, r5, r7, pc}
 8005932:	bf00      	nop
 8005934:	fff7fc00 	.word	0xfff7fc00

08005938 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <lfs_file_rawread+0x28>
 8005952:	4b11      	ldr	r3, [pc, #68]	; (8005998 <lfs_file_rawread+0x60>)
 8005954:	4a11      	ldr	r2, [pc, #68]	; (800599c <lfs_file_rawread+0x64>)
 8005956:	f640 519a 	movw	r1, #3482	; 0xd9a
 800595a:	4811      	ldr	r0, [pc, #68]	; (80059a0 <lfs_file_rawread+0x68>)
 800595c:	f00b fa62 	bl	8010e24 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f7ff fdb0 	bl	80054d4 <lfs_file_flush>
 8005974:	6178      	str	r0, [r7, #20]
        if (err) {
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <lfs_file_rawread+0x48>
            return err;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	e006      	b.n	800598e <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff ff04 	bl	8005794 <lfs_file_flushedread>
 800598c:	4603      	mov	r3, r0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	08012734 	.word	0x08012734
 800599c:	08013198 	.word	0x08013198
 80059a0:	08012404 	.word	0x08012404

080059a4 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80059a4:	b5b0      	push	{r4, r5, r7, lr}
 80059a6:	b090      	sub	sp, #64	; 0x40
 80059a8:	af04      	add	r7, sp, #16
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 810e 	beq.w	8005be4 <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	441a      	add	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f7fa fe02 	bl	80005e0 <lfs_max>
 80059dc:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80059e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80059f4:	08db      	lsrs	r3, r3, #3
 80059f6:	e003      	b.n	8005a00 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fc:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80059fe:	08db      	lsrs	r3, r3, #3
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f7fa fdfc 	bl	8000600 <lfs_min>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8005a10:	f7fa fdf6 	bl	8000600 <lfs_min>
 8005a14:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8005a16:	429c      	cmp	r4, r3
 8005a18:	f240 80e4 	bls.w	8005be4 <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff fd36 	bl	8005490 <lfs_file_outline>
 8005a24:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80db 	beq.w	8005be4 <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	e0d7      	b.n	8005bee <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d006      	beq.n	8005a58 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a52:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d16d      	bne.n	8005b34 <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d159      	bne.n	8005b18 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d12f      	bne.n	8005ad0 <lfs_file_flushedwrite+0x12c>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d02b      	beq.n	8005ad0 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a8a:	3a01      	subs	r2, #1
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005a90:	2000      	movs	r0, #0
 8005a92:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a94:	f107 0010 	add.w	r0, r7, #16
 8005a98:	9003      	str	r0, [sp, #12]
 8005a9a:	9102      	str	r1, [sp, #8]
 8005a9c:	9201      	str	r2, [sp, #4]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	462b      	mov	r3, r5
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff f820 	bl	8004aec <lfs_ctz_find>
 8005aac:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	e094      	b.n	8005bee <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	3340      	adds	r3, #64	; 0x40
 8005ac8:	4619      	mov	r1, r3
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7fa fe5d 	bl	800078a <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7fb fda3 	bl	800161c <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005adc:	68fc      	ldr	r4, [r7, #12]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	3238      	adds	r2, #56	; 0x38
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	313c      	adds	r1, #60	; 0x3c
 8005aee:	9102      	str	r1, [sp, #8]
 8005af0:	9201      	str	r2, [sp, #4]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	462b      	mov	r3, r5
 8005af6:	4622      	mov	r2, r4
 8005af8:	4601      	mov	r1, r0
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff f862 	bl	8004bc4 <lfs_ctz_extend>
 8005b00:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00f      	beq.n	8005b28 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	e06a      	b.n	8005bee <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f06f 0201 	mvn.w	r2, #1
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b38:	69da      	ldr	r2, [r3, #28]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	4619      	mov	r1, r3
 8005b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b44:	f7fa fd5c 	bl	8000600 <lfs_min>
 8005b48:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005b50:	68fc      	ldr	r4, [r7, #12]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b5a:	69b9      	ldr	r1, [r7, #24]
 8005b5c:	9103      	str	r1, [sp, #12]
 8005b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b60:	9102      	str	r1, [sp, #8]
 8005b62:	9201      	str	r2, [sp, #4]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	2301      	movs	r3, #1
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7fb f8b5 	bl	8000cdc <lfs_bd_prog>
 8005b72:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01c      	beq.n	8005bb4 <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005b80:	d007      	beq.n	8005b92 <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	e02d      	b.n	8005bee <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 8005b92:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff fba0 	bl	80052dc <lfs_file_relocate>
 8005b9c:	6178      	str	r0, [r7, #20]
            if (err) {
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0d2      	beq.n	8005b4a <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	e01c      	b.n	8005bee <lfs_file_flushedwrite+0x24a>
            break;
 8005bb4:	bf00      	nop
            }
        }

        file->pos += diff;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	441a      	add	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	441a      	add	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7fb fd1c 	bl	800161c <lfs_alloc_ack>
    while (nsize > 0) {
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f47f af29 	bne.w	8005a3e <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8005bec:	683b      	ldr	r3, [r7, #0]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3730      	adds	r7, #48	; 0x30
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005bf8 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08a      	sub	sp, #40	; 0x28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <lfs_file_rawwrite+0x28>
 8005c12:	4b38      	ldr	r3, [pc, #224]	; (8005cf4 <lfs_file_rawwrite+0xfc>)
 8005c14:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <lfs_file_rawwrite+0x100>)
 8005c16:	f640 6105 	movw	r1, #3589	; 0xe05
 8005c1a:	4838      	ldr	r0, [pc, #224]	; (8005cfc <lfs_file_rawwrite+0x104>)
 8005c1c:	f00b f902 	bl	8010e24 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff fc50 	bl	80054d4 <lfs_file_flush>
 8005c34:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <lfs_file_rawwrite+0x48>
            return err;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	e055      	b.n	8005cec <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <lfs_file_rawwrite+0x68>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d203      	bcs.n	8005c60 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	441a      	add	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d902      	bls.n	8005c76 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005c70:	f06f 031a 	mvn.w	r3, #26
 8005c74:	e03a      	b.n	8005cec <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d121      	bne.n	8005cc6 <lfs_file_rawwrite+0xce>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d91b      	bls.n	8005cc6 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8005c9c:	e00e      	b.n	8005cbc <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	75fb      	strb	r3, [r7, #23]
 8005ca2:	f107 0217 	add.w	r2, r7, #23
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	68b9      	ldr	r1, [r7, #8]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fe7a 	bl	80059a4 <lfs_file_flushedwrite>
 8005cb0:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da01      	bge.n	8005cbc <lfs_file_rawwrite+0xc4>
                return res;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	e017      	b.n	8005cec <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d8eb      	bhi.n	8005c9e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7ff fe69 	bl	80059a4 <lfs_file_flushedwrite>
 8005cd2:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da01      	bge.n	8005cde <lfs_file_rawwrite+0xe6>
        return nsize;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	e006      	b.n	8005cec <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8005cea:	69bb      	ldr	r3, [r7, #24]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3728      	adds	r7, #40	; 0x28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	08012764 	.word	0x08012764
 8005cf8:	080131ac 	.word	0x080131ac
 8005cfc:	08012404 	.word	0x08012404

08005d00 <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fa fc5d 	bl	80005e0 <lfs_max>
 8005d26:	4603      	mov	r3, r0
 8005d28:	e001      	b.n	8005d2e <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	; 0x30
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	6a1a      	ldr	r2, [r3, #32]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <lfs_init+0x34>
 8005d5e:	4b98      	ldr	r3, [pc, #608]	; (8005fc0 <lfs_init+0x288>)
 8005d60:	4a98      	ldr	r2, [pc, #608]	; (8005fc4 <lfs_init+0x28c>)
 8005d62:	f241 0123 	movw	r1, #4131	; 0x1023
 8005d66:	4898      	ldr	r0, [pc, #608]	; (8005fc8 <lfs_init+0x290>)
 8005d68:	f00b f85c 	bl	8010e24 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <lfs_init+0x4c>
 8005d76:	4b95      	ldr	r3, [pc, #596]	; (8005fcc <lfs_init+0x294>)
 8005d78:	4a92      	ldr	r2, [pc, #584]	; (8005fc4 <lfs_init+0x28c>)
 8005d7a:	f241 0124 	movw	r1, #4132	; 0x1024
 8005d7e:	4892      	ldr	r0, [pc, #584]	; (8005fc8 <lfs_init+0x290>)
 8005d80:	f00b f850 	bl	8010e24 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <lfs_init+0x64>
 8005d8e:	4b90      	ldr	r3, [pc, #576]	; (8005fd0 <lfs_init+0x298>)
 8005d90:	4a8c      	ldr	r2, [pc, #560]	; (8005fc4 <lfs_init+0x28c>)
 8005d92:	f241 0125 	movw	r1, #4133	; 0x1025
 8005d96:	488c      	ldr	r0, [pc, #560]	; (8005fc8 <lfs_init+0x290>)
 8005d98:	f00b f844 	bl	8010e24 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005da6:	6952      	ldr	r2, [r2, #20]
 8005da8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dac:	fb02 f201 	mul.w	r2, r2, r1
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <lfs_init+0x8c>
 8005db6:	4b87      	ldr	r3, [pc, #540]	; (8005fd4 <lfs_init+0x29c>)
 8005db8:	4a82      	ldr	r2, [pc, #520]	; (8005fc4 <lfs_init+0x28c>)
 8005dba:	f241 0129 	movw	r1, #4137	; 0x1029
 8005dbe:	4882      	ldr	r0, [pc, #520]	; (8005fc8 <lfs_init+0x290>)
 8005dc0:	f00b f830 	bl	8010e24 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dce:	6992      	ldr	r2, [r2, #24]
 8005dd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dd4:	fb02 f201 	mul.w	r2, r2, r1
 8005dd8:	1a9b      	subs	r3, r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <lfs_init+0xb4>
 8005dde:	4b7e      	ldr	r3, [pc, #504]	; (8005fd8 <lfs_init+0x2a0>)
 8005de0:	4a78      	ldr	r2, [pc, #480]	; (8005fc4 <lfs_init+0x28c>)
 8005de2:	f241 012a 	movw	r1, #4138	; 0x102a
 8005de6:	4878      	ldr	r0, [pc, #480]	; (8005fc8 <lfs_init+0x290>)
 8005de8:	f00b f81c 	bl	8010e24 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005df6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dfc:	fb02 f201 	mul.w	r2, r2, r1
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d006      	beq.n	8005e14 <lfs_init+0xdc>
 8005e06:	4b75      	ldr	r3, [pc, #468]	; (8005fdc <lfs_init+0x2a4>)
 8005e08:	4a6e      	ldr	r2, [pc, #440]	; (8005fc4 <lfs_init+0x28c>)
 8005e0a:	f241 012b 	movw	r1, #4139	; 0x102b
 8005e0e:	486e      	ldr	r0, [pc, #440]	; (8005fc8 <lfs_init+0x290>)
 8005e10:	f00b f808 	bl	8010e24 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1c:	d806      	bhi.n	8005e2c <lfs_init+0xf4>
 8005e1e:	4b70      	ldr	r3, [pc, #448]	; (8005fe0 <lfs_init+0x2a8>)
 8005e20:	4a68      	ldr	r2, [pc, #416]	; (8005fc4 <lfs_init+0x28c>)
 8005e22:	f241 012e 	movw	r1, #4142	; 0x102e
 8005e26:	4868      	ldr	r0, [pc, #416]	; (8005fc8 <lfs_init+0x290>)
 8005e28:	f00a fffc 	bl	8010e24 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	3b08      	subs	r3, #8
 8005e34:	f04f 32ff 	mov.w	r2, #4294967295
 8005e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fa fc16 	bl	800066e <lfs_npw2>
 8005e42:	4603      	mov	r3, r0
 8005e44:	009a      	lsls	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d906      	bls.n	8005e5e <lfs_init+0x126>
 8005e50:	4b64      	ldr	r3, [pc, #400]	; (8005fe4 <lfs_init+0x2ac>)
 8005e52:	4a5c      	ldr	r2, [pc, #368]	; (8005fc4 <lfs_init+0x28c>)
 8005e54:	f241 0131 	movw	r1, #4145	; 0x1031
 8005e58:	485b      	ldr	r0, [pc, #364]	; (8005fc8 <lfs_init+0x290>)
 8005e5a:	f00a ffe3 	bl	8010e24 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <lfs_init+0x13e>
 8005e68:	4b5f      	ldr	r3, [pc, #380]	; (8005fe8 <lfs_init+0x2b0>)
 8005e6a:	4a56      	ldr	r2, [pc, #344]	; (8005fc4 <lfs_init+0x28c>)
 8005e6c:	f241 013a 	movw	r1, #4154	; 0x103a
 8005e70:	4855      	ldr	r0, [pc, #340]	; (8005fc8 <lfs_init+0x290>)
 8005e72:	f00a ffd7 	bl	8010e24 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <lfs_init+0x154>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	e010      	b.n	8005eae <lfs_init+0x176>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fa fc53 	bl	800073e <lfs_malloc>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <lfs_init+0x176>
            err = LFS_ERR_NOMEM;
 8005ea6:	f06f 030b 	mvn.w	r3, #11
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005eac:	e0ff      	b.n	80060ae <lfs_init+0x376>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <lfs_init+0x18c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	61da      	str	r2, [r3, #28]
 8005ec2:	e010      	b.n	8005ee6 <lfs_init+0x1ae>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fa fc37 	bl	800073e <lfs_malloc>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <lfs_init+0x1ae>
            err = LFS_ERR_NOMEM;
 8005ede:	f06f 030b 	mvn.w	r3, #11
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005ee4:	e0e3      	b.n	80060ae <lfs_init+0x376>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fa fc4d 	bl	800078a <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3310      	adds	r3, #16
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fa fc47 	bl	800078a <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <lfs_init+0x1dc>
 8005f06:	4b39      	ldr	r3, [pc, #228]	; (8005fec <lfs_init+0x2b4>)
 8005f08:	4a2e      	ldr	r2, [pc, #184]	; (8005fc4 <lfs_init+0x28c>)
 8005f0a:	f241 0158 	movw	r1, #4184	; 0x1058
 8005f0e:	482e      	ldr	r0, [pc, #184]	; (8005fc8 <lfs_init+0x290>)
 8005f10:	f00a ff88 	bl	8010e24 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <lfs_init+0x1f8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d006      	beq.n	8005f3e <lfs_init+0x206>
 8005f30:	4b2f      	ldr	r3, [pc, #188]	; (8005ff0 <lfs_init+0x2b8>)
 8005f32:	4a24      	ldr	r2, [pc, #144]	; (8005fc4 <lfs_init+0x28c>)
 8005f34:	f241 0159 	movw	r1, #4185	; 0x1059
 8005f38:	4823      	ldr	r0, [pc, #140]	; (8005fc8 <lfs_init+0x290>)
 8005f3a:	f00a ff73 	bl	8010e24 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <lfs_init+0x21c>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	665a      	str	r2, [r3, #100]	; 0x64
 8005f52:	e010      	b.n	8005f76 <lfs_init+0x23e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fa fbef 	bl	800073e <lfs_malloc>
 8005f60:	4602      	mov	r2, r0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d103      	bne.n	8005f76 <lfs_init+0x23e>
            err = LFS_ERR_NOMEM;
 8005f6e:	f06f 030b 	mvn.w	r3, #11
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005f74:	e09b      	b.n	80060ae <lfs_init+0x376>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7c:	2bff      	cmp	r3, #255	; 0xff
 8005f7e:	d906      	bls.n	8005f8e <lfs_init+0x256>
 8005f80:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <lfs_init+0x2bc>)
 8005f82:	4a10      	ldr	r2, [pc, #64]	; (8005fc4 <lfs_init+0x28c>)
 8005f84:	f241 0166 	movw	r1, #4198	; 0x1066
 8005f88:	480f      	ldr	r0, [pc, #60]	; (8005fc8 <lfs_init+0x290>)
 8005f8a:	f00a ff4b 	bl	8010e24 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d102      	bne.n	8005fa6 <lfs_init+0x26e>
        lfs->name_max = LFS_NAME_MAX;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	22ff      	movs	r2, #255	; 0xff
 8005fa4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	da25      	bge.n	8005ffc <lfs_init+0x2c4>
 8005fb0:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <lfs_init+0x2c0>)
 8005fb2:	4a04      	ldr	r2, [pc, #16]	; (8005fc4 <lfs_init+0x28c>)
 8005fb4:	f241 016c 	movw	r1, #4204	; 0x106c
 8005fb8:	4803      	ldr	r0, [pc, #12]	; (8005fc8 <lfs_init+0x290>)
 8005fba:	f00a ff33 	bl	8010e24 <__assert_func>
 8005fbe:	bf00      	nop
 8005fc0:	08012794 	.word	0x08012794
 8005fc4:	080131c0 	.word	0x080131c0
 8005fc8:	08012404 	.word	0x08012404
 8005fcc:	080127b0 	.word	0x080127b0
 8005fd0:	080127cc 	.word	0x080127cc
 8005fd4:	080127e8 	.word	0x080127e8
 8005fd8:	08012818 	.word	0x08012818
 8005fdc:	08012848 	.word	0x08012848
 8005fe0:	0801287c 	.word	0x0801287c
 8005fe4:	08012898 	.word	0x08012898
 8005fe8:	080128e4 	.word	0x080128e4
 8005fec:	08012900 	.word	0x08012900
 8005ff0:	08012920 	.word	0x08012920
 8005ff4:	08012974 	.word	0x08012974
 8005ff8:	08012990 	.word	0x08012990
    lfs->file_max = lfs->cfg->file_max;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <lfs_init+0x2de>
        lfs->file_max = LFS_FILE_MAX;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006014:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800601a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006020:	4293      	cmp	r3, r2
 8006022:	d906      	bls.n	8006032 <lfs_init+0x2fa>
 8006024:	4b26      	ldr	r3, [pc, #152]	; (80060c0 <lfs_init+0x388>)
 8006026:	4a27      	ldr	r2, [pc, #156]	; (80060c4 <lfs_init+0x38c>)
 8006028:	f241 0172 	movw	r1, #4210	; 0x1072
 800602c:	4826      	ldr	r0, [pc, #152]	; (80060c8 <lfs_init+0x390>)
 800602e:	f00a fef9 	bl	8010e24 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006040:	2b00      	cmp	r3, #0
 8006042:	d103      	bne.n	800604c <lfs_init+0x314>
        lfs->attr_max = LFS_ATTR_MAX;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800604a:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	429a      	cmp	r2, r3
 800605a:	d906      	bls.n	800606a <lfs_init+0x332>
 800605c:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <lfs_init+0x394>)
 800605e:	4a19      	ldr	r2, [pc, #100]	; (80060c4 <lfs_init+0x38c>)
 8006060:	f241 0178 	movw	r1, #4216	; 0x1078
 8006064:	4818      	ldr	r0, [pc, #96]	; (80060c8 <lfs_init+0x390>)
 8006066:	f00a fedd 	bl	8010e24 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f04f 32ff 	mov.w	r2, #4294967295
 8006070:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f04f 32ff 	mov.w	r2, #4294967295
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	333c      	adds	r3, #60	; 0x3c
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	605a      	str	r2, [r3, #4]
 8006090:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3330      	adds	r3, #48	; 0x30
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	605a      	str	r2, [r3, #4]
 800609c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3348      	adds	r3, #72	; 0x48
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	605a      	str	r2, [r3, #4]
 80060a8:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e003      	b.n	80060b6 <lfs_init+0x37e>

cleanup:
    lfs_deinit(lfs);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f80e 	bl	80060d0 <lfs_deinit>
    return err;
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3730      	adds	r7, #48	; 0x30
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	080129b4 	.word	0x080129b4
 80060c4:	080131c0 	.word	0x080131c0
 80060c8:	08012404 	.word	0x08012404
 80060cc:	080129d0 	.word	0x080129d0

080060d0 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d104      	bne.n	80060ec <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fa fb35 	bl	8000756 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d104      	bne.n	8006100 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fa fb2b 	bl	8000756 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	2b00      	cmp	r3, #0
 8006108:	d104      	bne.n	8006114 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800610e:	4618      	mov	r0, r3
 8006110:	f7fa fb21 	bl	8000756 <lfs_free>
    }

    return 0;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <lfs_rawformat>:



#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b0a0      	sub	sp, #128	; 0x80
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
    int err = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fe01 	bl	8005d38 <lfs_init>
 8006136:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <lfs_rawformat+0x22>
            return err;
 800613e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006140:	e08d      	b.n	800625e <lfs_rawformat+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <lfs_rawformat+0x38>
 800614a:	4b47      	ldr	r3, [pc, #284]	; (8006268 <lfs_rawformat+0x148>)
 800614c:	4a47      	ldr	r2, [pc, #284]	; (800626c <lfs_rawformat+0x14c>)
 800614e:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8006152:	4847      	ldr	r0, [pc, #284]	; (8006270 <lfs_rawformat+0x150>)
 8006154:	f00a fe66 	bl	8010e24 <__assert_func>

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	461a      	mov	r2, r3
 8006164:	2100      	movs	r1, #0
 8006166:	f00a fee3 	bl	8010f30 <memset>
        lfs->free.off = 0;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	00da      	lsls	r2, r3, #3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f7fa fa3e 	bl	8000600 <lfs_min>
 8006184:	4602      	mov	r2, r0
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->free.i = 0;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fb fa43 	bl	800161c <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8006196:	f107 030c 	add.w	r3, r7, #12
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fd f963 	bl	8003468 <lfs_dir_alloc>
 80061a2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80061a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d150      	bne.n	800624c <lfs_rawformat+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fb f9d8 	bl	8001560 <lfs_fs_disk_version>
 80061b0:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80061b2:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b8:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80061ba:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80061c0:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80061c6:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80061cc:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 80061d2:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80061d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fb f937 	bl	800144c <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80061de:	4b25      	ldr	r3, [pc, #148]	; (8006274 <lfs_rawformat+0x154>)
 80061e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e2:	2300      	movs	r3, #0
 80061e4:	653b      	str	r3, [r7, #80]	; 0x50
 80061e6:	4b24      	ldr	r3, [pc, #144]	; (8006278 <lfs_rawformat+0x158>)
 80061e8:	657b      	str	r3, [r7, #84]	; 0x54
 80061ea:	4b24      	ldr	r3, [pc, #144]	; (800627c <lfs_rawformat+0x15c>)
 80061ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <lfs_rawformat+0x160>)
 80061f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80061f6:	663b      	str	r3, [r7, #96]	; 0x60
 80061f8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80061fc:	f107 010c 	add.w	r1, r7, #12
 8006200:	2303      	movs	r3, #3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fe fb08 	bl	8004818 <lfs_dir_commit>
 8006208:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800620a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11f      	bne.n	8006250 <lfs_rawformat+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8006210:	2300      	movs	r3, #0
 8006212:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8006216:	f107 010c 	add.w	r1, r7, #12
 800621a:	2300      	movs	r3, #0
 800621c:	2200      	movs	r2, #0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fe fafa 	bl	8004818 <lfs_dir_commit>
 8006224:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006226:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d113      	bne.n	8006254 <lfs_rawformat+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800622c:	2300      	movs	r3, #0
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006230:	2301      	movs	r3, #1
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
 8006234:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fc fce0 	bl	8002c04 <lfs_dir_fetch>
 8006244:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006248:	2b00      	cmp	r3, #0
 800624a:	e004      	b.n	8006256 <lfs_rawformat+0x136>
            goto cleanup;
 800624c:	bf00      	nop
 800624e:	e002      	b.n	8006256 <lfs_rawformat+0x136>
            goto cleanup;
 8006250:	bf00      	nop
 8006252:	e000      	b.n	8006256 <lfs_rawformat+0x136>
            goto cleanup;
 8006254:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff ff3a 	bl	80060d0 <lfs_deinit>
    return err;
 800625c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 800625e:	4618      	mov	r0, r3
 8006260:	3780      	adds	r7, #128	; 0x80
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	08012a00 	.word	0x08012a00
 800626c:	080131cc 	.word	0x080131cc
 8006270:	08012404 	.word	0x08012404
 8006274:	40100000 	.word	0x40100000
 8006278:	0ff00008 	.word	0x0ff00008
 800627c:	08012a18 	.word	0x08012a18
 8006280:	20100018 	.word	0x20100018

08006284 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006286:	b09f      	sub	sp, #124	; 0x7c
 8006288:	af04      	add	r7, sp, #16
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff fd51 	bl	8005d38 <lfs_init>
 8006296:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 8006298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <lfs_rawmount+0x1e>
        return err;
 800629e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062a0:	e1f1      	b.n	8006686 <lfs_rawmount+0x402>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80062a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062a6:	2220      	movs	r2, #32
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f00a fe40 	bl	8010f30 <memset>
 80062b0:	2301      	movs	r3, #1
 80062b2:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80062b4:	4aa6      	ldr	r2, [pc, #664]	; (8006550 <lfs_rawmount+0x2cc>)
 80062b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062be:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80062c2:	2301      	movs	r3, #1
 80062c4:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 80062c6:	2301      	movs	r3, #1
 80062c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80062ca:	e188      	b.n	80065de <lfs_rawmount+0x35a>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80062cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80062d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062d4:	3318      	adds	r3, #24
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fa fe37 	bl	8000f4c <lfs_pair_issync>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 80062e4:	4b9b      	ldr	r3, [pc, #620]	; (8006554 <lfs_rawmount+0x2d0>)
 80062e6:	f241 02f2 	movw	r2, #4338	; 0x10f2
 80062ea:	499b      	ldr	r1, [pc, #620]	; (8006558 <lfs_rawmount+0x2d4>)
 80062ec:	489b      	ldr	r0, [pc, #620]	; (800655c <lfs_rawmount+0x2d8>)
 80062ee:	f00b f9bf 	bl	8011670 <iprintf>
            err = LFS_ERR_CORRUPT;
 80062f2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80062f6:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 80062f8:	e1c1      	b.n	800667e <lfs_rawmount+0x3fa>
        }
        if (tortoise_i == tortoise_period) {
 80062fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062fe:	429a      	cmp	r2, r3
 8006300:	d108      	bne.n	8006314 <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 8006302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 8006306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006308:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 800630e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 8006314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006316:	3301      	adds	r3, #1
 8006318:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	4b90      	ldr	r3, [pc, #576]	; (8006560 <lfs_rawmount+0x2dc>)
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
 8006322:	2308      	movs	r3, #8
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8006326:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800632a:	f103 0218 	add.w	r2, r3, #24
 800632e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006332:	f107 0320 	add.w	r3, r7, #32
 8006336:	9303      	str	r3, [sp, #12]
 8006338:	4b8a      	ldr	r3, [pc, #552]	; (8006564 <lfs_rawmount+0x2e0>)
 800633a:	9302      	str	r3, [sp, #8]
 800633c:	2300      	movs	r3, #0
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	4b89      	ldr	r3, [pc, #548]	; (8006568 <lfs_rawmount+0x2e4>)
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	4b89      	ldr	r3, [pc, #548]	; (800656c <lfs_rawmount+0x2e8>)
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fc f894 	bl	8002474 <lfs_dir_fetchmatch>
 800634c:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800634e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006350:	2b00      	cmp	r3, #0
 8006352:	da02      	bge.n	800635a <lfs_rawmount+0xd6>
            err = tag;
 8006354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006356:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8006358:	e191      	b.n	800667e <lfs_rawmount+0x3fa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800635a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8131 	beq.w	80065c4 <lfs_rawmount+0x340>
 8006362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006364:	4618      	mov	r0, r3
 8006366:	f7fa fe60 	bl	800102a <lfs_tag_isdelete>
 800636a:	4603      	mov	r3, r0
 800636c:	f083 0301 	eor.w	r3, r3, #1
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8126 	beq.w	80065c4 <lfs_rawmount+0x340>
            // update root
            lfs->root[0] = dir.pair[0];
 8006378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800637e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006384:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006388:	f107 0308 	add.w	r3, r7, #8
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4b78      	ldr	r3, [pc, #480]	; (8006570 <lfs_rawmount+0x2ec>)
 8006390:	4a76      	ldr	r2, [pc, #472]	; (800656c <lfs_rawmount+0x2e8>)
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fb fb0c 	bl	80019b0 <lfs_dir_get>
 8006398:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800639a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800639c:	2b00      	cmp	r3, #0
 800639e:	da02      	bge.n	80063a6 <lfs_rawmount+0x122>
                err = tag;
 80063a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063a2:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80063a4:	e16b      	b.n	800667e <lfs_rawmount+0x3fa>
            }
            lfs_superblock_fromle32(&superblock);
 80063a6:	f107 0308 	add.w	r3, r7, #8
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fb f816 	bl	80013dc <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	0c1b      	lsrs	r3, r3, #16
 80063b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fb f8dc 	bl	800157c <lfs_fs_disk_version_major>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d108      	bne.n	80063e2 <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fb f8e1 	bl	8001598 <lfs_fs_disk_version_minor>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461a      	mov	r2, r3
 80063da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80063de:	4293      	cmp	r3, r2
 80063e0:	d91d      	bls.n	800641e <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 80063e2:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 80063e6:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fb f8c6 	bl	800157c <lfs_fs_disk_version_major>
 80063f0:	4603      	mov	r3, r0
 80063f2:	461e      	mov	r6, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fb f8cf 	bl	8001598 <lfs_fs_disk_version_minor>
 80063fa:	4603      	mov	r3, r0
 80063fc:	461a      	mov	r2, r3
 80063fe:	4b55      	ldr	r3, [pc, #340]	; (8006554 <lfs_rawmount+0x2d0>)
 8006400:	9303      	str	r3, [sp, #12]
 8006402:	9202      	str	r2, [sp, #8]
 8006404:	9601      	str	r6, [sp, #4]
 8006406:	9400      	str	r4, [sp, #0]
 8006408:	462b      	mov	r3, r5
 800640a:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 800640e:	4952      	ldr	r1, [pc, #328]	; (8006558 <lfs_rawmount+0x2d4>)
 8006410:	4858      	ldr	r0, [pc, #352]	; (8006574 <lfs_rawmount+0x2f0>)
 8006412:	f00b f92d 	bl	8011670 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8006416:	f06f 0315 	mvn.w	r3, #21
 800641a:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 800641c:	e0d1      	b.n	80065c2 <lfs_rawmount+0x33e>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fb f8ba 	bl	8001598 <lfs_fs_disk_version_minor>
 8006424:	4603      	mov	r3, r0
 8006426:	461a      	mov	r2, r3
 8006428:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800642c:	4293      	cmp	r3, r2
 800642e:	d21d      	bcs.n	800646c <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 8006430:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 8006434:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7fb f89f 	bl	800157c <lfs_fs_disk_version_major>
 800643e:	4603      	mov	r3, r0
 8006440:	461e      	mov	r6, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb f8a8 	bl	8001598 <lfs_fs_disk_version_minor>
 8006448:	4603      	mov	r3, r0
 800644a:	461a      	mov	r2, r3
 800644c:	4b41      	ldr	r3, [pc, #260]	; (8006554 <lfs_rawmount+0x2d0>)
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	9202      	str	r2, [sp, #8]
 8006452:	9601      	str	r6, [sp, #4]
 8006454:	9400      	str	r4, [sp, #0]
 8006456:	462b      	mov	r3, r5
 8006458:	f241 122e 	movw	r2, #4398	; 0x112e
 800645c:	493e      	ldr	r1, [pc, #248]	; (8006558 <lfs_rawmount+0x2d4>)
 800645e:	4846      	ldr	r0, [pc, #280]	; (8006578 <lfs_rawmount+0x2f4>)
 8006460:	f00b f906 	bl	8011670 <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 8006464:	2101      	movs	r1, #1
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fbac 	bl	8006bc4 <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d018      	beq.n	80064a4 <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006478:	429a      	cmp	r2, r3
 800647a:	d910      	bls.n	800649e <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	4934      	ldr	r1, [pc, #208]	; (8006554 <lfs_rawmount+0x2d0>)
 8006484:	9101      	str	r1, [sp, #4]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	f241 123c 	movw	r2, #4412	; 0x113c
 800648e:	4932      	ldr	r1, [pc, #200]	; (8006558 <lfs_rawmount+0x2d4>)
 8006490:	483a      	ldr	r0, [pc, #232]	; (800657c <lfs_rawmount+0x2f8>)
 8006492:	f00b f8ed 	bl	8011670 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006496:	f06f 0315 	mvn.w	r3, #21
 800649a:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 800649c:	e091      	b.n	80065c2 <lfs_rawmount+0x33e>
                }

                lfs->name_max = superblock.name_max;
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d018      	beq.n	80064dc <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d910      	bls.n	80064d6 <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ba:	4926      	ldr	r1, [pc, #152]	; (8006554 <lfs_rawmount+0x2d0>)
 80064bc:	9101      	str	r1, [sp, #4]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	f241 1247 	movw	r2, #4423	; 0x1147
 80064c6:	4924      	ldr	r1, [pc, #144]	; (8006558 <lfs_rawmount+0x2d4>)
 80064c8:	482d      	ldr	r0, [pc, #180]	; (8006580 <lfs_rawmount+0x2fc>)
 80064ca:	f00b f8d1 	bl	8011670 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80064ce:	f06f 0315 	mvn.w	r3, #21
 80064d2:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80064d4:	e075      	b.n	80065c2 <lfs_rawmount+0x33e>
                }

                lfs->file_max = superblock.file_max;
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d018      	beq.n	8006514 <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d910      	bls.n	800650e <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f2:	4918      	ldr	r1, [pc, #96]	; (8006554 <lfs_rawmount+0x2d0>)
 80064f4:	9101      	str	r1, [sp, #4]
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	f241 1252 	movw	r2, #4434	; 0x1152
 80064fe:	4916      	ldr	r1, [pc, #88]	; (8006558 <lfs_rawmount+0x2d4>)
 8006500:	4820      	ldr	r0, [pc, #128]	; (8006584 <lfs_rawmount+0x300>)
 8006502:	f00b f8b5 	bl	8011670 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006506:	f06f 0315 	mvn.w	r3, #21
 800650a:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 800650c:	e059      	b.n	80065c2 <lfs_rawmount+0x33e>
                }

                lfs->attr_max = superblock.attr_max;
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	679a      	str	r2, [r3, #120]	; 0x78
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d036      	beq.n	800658c <lfs_rawmount+0x308>
                    && superblock.block_count != lfs->cfg->block_count) {
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	429a      	cmp	r2, r3
 8006528:	d030      	beq.n	800658c <lfs_rawmount+0x308>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	4908      	ldr	r1, [pc, #32]	; (8006554 <lfs_rawmount+0x2d0>)
 8006534:	9101      	str	r1, [sp, #4]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	f241 125e 	movw	r2, #4446	; 0x115e
 800653e:	4906      	ldr	r1, [pc, #24]	; (8006558 <lfs_rawmount+0x2d4>)
 8006540:	4811      	ldr	r0, [pc, #68]	; (8006588 <lfs_rawmount+0x304>)
 8006542:	f00b f895 	bl	8011670 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006546:	f06f 0315 	mvn.w	r3, #21
 800654a:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 800654c:	e039      	b.n	80065c2 <lfs_rawmount+0x33e>
 800654e:	bf00      	nop
 8006550:	08012550 	.word	0x08012550
 8006554:	0801250c 	.word	0x0801250c
 8006558:	08012404 	.word	0x08012404
 800655c:	08012a24 	.word	0x08012a24
 8006560:	08012a18 	.word	0x08012a18
 8006564:	08002d95 	.word	0x08002d95
 8006568:	0ff00008 	.word	0x0ff00008
 800656c:	7ffffc00 	.word	0x7ffffc00
 8006570:	20100018 	.word	0x20100018
 8006574:	08012a50 	.word	0x08012a50
 8006578:	08012a88 	.word	0x08012a88
 800657c:	08012ac8 	.word	0x08012ac8
 8006580:	08012afc 	.word	0x08012afc
 8006584:	08012b30 	.word	0x08012b30
 8006588:	08012b64 	.word	0x08012b64
            }

            lfs->block_count = superblock.block_count;
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	429a      	cmp	r2, r3
 800659c:	d012      	beq.n	80065c4 <lfs_rawmount+0x340>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	493a      	ldr	r1, [pc, #232]	; (8006690 <lfs_rawmount+0x40c>)
 80065a8:	9101      	str	r1, [sp, #4]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	f241 1267 	movw	r2, #4455	; 0x1167
 80065b2:	4938      	ldr	r1, [pc, #224]	; (8006694 <lfs_rawmount+0x410>)
 80065b4:	4838      	ldr	r0, [pc, #224]	; (8006698 <lfs_rawmount+0x414>)
 80065b6:	f00b f85b 	bl	8011670 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80065ba:	f06f 0315 	mvn.w	r3, #21
 80065be:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80065c0:	bf00      	nop
            goto cleanup;
 80065c2:	e05c      	b.n	800667e <lfs_rawmount+0x3fa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fc fb33 	bl	8002c3c <lfs_dir_getgstate>
 80065d6:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 80065d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d14e      	bne.n	800667c <lfs_rawmount+0x3f8>
    while (!lfs_pair_isnull(dir.tail)) {
 80065de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065e2:	3318      	adds	r3, #24
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fa fc6c 	bl	8000ec2 <lfs_pair_isnull>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f083 0301 	eor.w	r3, r3, #1
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f47f ae6a 	bne.w	80062cc <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3330      	adds	r3, #48	; 0x30
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fa fdc7 	bl	8001190 <lfs_gstate_iszero>
 8006602:	4603      	mov	r3, r0
 8006604:	f083 0301 	eor.w	r3, r3, #1
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d010      	beq.n	8006630 <lfs_rawmount+0x3ac>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800661a:	481d      	ldr	r0, [pc, #116]	; (8006690 <lfs_rawmount+0x40c>)
 800661c:	9002      	str	r0, [sp, #8]
 800661e:	9201      	str	r2, [sp, #4]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	460b      	mov	r3, r1
 8006624:	f241 1277 	movw	r2, #4471	; 0x1177
 8006628:	491a      	ldr	r1, [pc, #104]	; (8006694 <lfs_rawmount+0x410>)
 800662a:	481c      	ldr	r0, [pc, #112]	; (800669c <lfs_rawmount+0x418>)
 800662c:	f00b f820 	bl	8011670 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	4618      	mov	r0, r3
 8006636:	f7fa fcea 	bl	800100e <lfs_tag_isvalid>
 800663a:	4603      	mov	r3, r0
 800663c:	f083 0301 	eor.w	r3, r3, #1
 8006640:	b2db      	uxtb	r3, r3
 8006642:	461a      	mov	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	333c      	adds	r3, #60	; 0x3c
 8006654:	3230      	adds	r2, #48	; 0x30
 8006656:	ca07      	ldmia	r2, {r0, r1, r2}
 8006658:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->block_count;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006664:	fbb3 f1f2 	udiv	r1, r3, r2
 8006668:	fb02 f201 	mul.w	r2, r2, r1
 800666c:	1a9a      	subs	r2, r3, r2
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fa ffe0 	bl	8001638 <lfs_alloc_drop>

    return 0;
 8006678:	2300      	movs	r3, #0
 800667a:	e004      	b.n	8006686 <lfs_rawmount+0x402>
            goto cleanup;
 800667c:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f80e 	bl	80066a0 <lfs_rawunmount>
    return err;
 8006684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8006686:	4618      	mov	r0, r3
 8006688:	376c      	adds	r7, #108	; 0x6c
 800668a:	46bd      	mov	sp, r7
 800668c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668e:	bf00      	nop
 8006690:	0801250c 	.word	0x0801250c
 8006694:	08012404 	.word	0x08012404
 8006698:	08012b98 	.word	0x08012b98
 800669c:	08012bc8 	.word	0x08012bc8

080066a0 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fd11 	bl	80060d0 <lfs_deinit>
 80066ae:	4603      	mov	r3, r0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80066b8:	b590      	push	{r4, r7, lr}
 80066ba:	b0a1      	sub	sp, #132	; 0x84
 80066bc:	af04      	add	r7, sp, #16
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80066c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ca:	2220      	movs	r2, #32
 80066cc:	2100      	movs	r1, #0
 80066ce:	4618      	mov	r0, r3
 80066d0:	f00a fc2e 	bl	8010f30 <memset>
 80066d4:	2301      	movs	r3, #1
 80066d6:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80066d8:	4a9b      	ldr	r2, [pc, #620]	; (8006948 <lfs_fs_rawtraverse+0x290>)
 80066da:	f107 031c 	add.w	r3, r7, #28
 80066de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066e2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80066e6:	2301      	movs	r3, #1
 80066e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 80066ea:	2301      	movs	r3, #1
 80066ec:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 80066ee:	e0c1      	b.n	8006874 <lfs_fs_rawtraverse+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80066f0:	f107 021c 	add.w	r2, r7, #28
 80066f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f8:	3318      	adds	r3, #24
 80066fa:	4611      	mov	r1, r2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fa fc25 	bl	8000f4c <lfs_pair_issync>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 8006708:	4b90      	ldr	r3, [pc, #576]	; (800694c <lfs_fs_rawtraverse+0x294>)
 800670a:	f241 12d2 	movw	r2, #4562	; 0x11d2
 800670e:	4990      	ldr	r1, [pc, #576]	; (8006950 <lfs_fs_rawtraverse+0x298>)
 8006710:	4890      	ldr	r0, [pc, #576]	; (8006954 <lfs_fs_rawtraverse+0x29c>)
 8006712:	f00a ffad 	bl	8011670 <iprintf>
            return LFS_ERR_CORRUPT;
 8006716:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800671a:	e110      	b.n	800693e <lfs_fs_rawtraverse+0x286>
        }
        if (tortoise_i == tortoise_period) {
 800671c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800671e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006720:	429a      	cmp	r2, r3
 8006722:	d108      	bne.n	8006736 <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 8006724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006726:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8006728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672a:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 8006730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 8006736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006738:	3301      	adds	r3, #1
 800673a:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 800673c:	2300      	movs	r3, #0
 800673e:	667b      	str	r3, [r7, #100]	; 0x64
 8006740:	e014      	b.n	800676c <lfs_fs_rawtraverse+0xb4>
            int err = cb(data, dir.tail[i]);
 8006742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006744:	3306      	adds	r3, #6
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800674c:	4413      	add	r3, r2
 800674e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4611      	mov	r1, r2
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
 800675a:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 800675c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <lfs_fs_rawtraverse+0xae>
                return err;
 8006762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006764:	e0eb      	b.n	800693e <lfs_fs_rawtraverse+0x286>
        for (int i = 0; i < 2; i++) {
 8006766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006768:	3301      	adds	r3, #1
 800676a:	667b      	str	r3, [r7, #100]	; 0x64
 800676c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800676e:	2b01      	cmp	r3, #1
 8006770:	dde7      	ble.n	8006742 <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8006772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006776:	f103 0218 	add.w	r2, r3, #24
 800677a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800677e:	4619      	mov	r1, r3
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7fc fa3f 	bl	8002c04 <lfs_dir_fetch>
 8006786:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8006788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <lfs_fs_rawtraverse+0xda>
            return err;
 800678e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006790:	e0d5      	b.n	800693e <lfs_fs_rawtraverse+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006792:	2300      	movs	r3, #0
 8006794:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006798:	e067      	b.n	800686a <lfs_fs_rawtraverse+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800679a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800679e:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80067a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067a4:	f043 0308 	orr.w	r3, r3, #8
 80067a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80067ac:	f107 0214 	add.w	r2, r7, #20
 80067b0:	9200      	str	r2, [sp, #0]
 80067b2:	4a69      	ldr	r2, [pc, #420]	; (8006958 <lfs_fs_rawtraverse+0x2a0>)
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7fb f8fb 	bl	80019b0 <lfs_dir_get>
 80067ba:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 80067bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da05      	bge.n	80067ce <lfs_fs_rawtraverse+0x116>
                if (tag == LFS_ERR_NOENT) {
 80067c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c4:	f113 0f02 	cmn.w	r3, #2
 80067c8:	d049      	beq.n	800685e <lfs_fs_rawtraverse+0x1a6>
                    continue;
                }
                return tag;
 80067ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067cc:	e0b7      	b.n	800693e <lfs_fs_rawtraverse+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 80067ce:	f107 0314 	add.w	r3, r7, #20
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fa fdd2 	bl	800137c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80067d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fa fc58 	bl	8001090 <lfs_tag_type3>
 80067e0:	4603      	mov	r3, r0
 80067e2:	461a      	mov	r2, r3
 80067e4:	f240 2302 	movw	r3, #514	; 0x202
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d113      	bne.n	8006814 <lfs_fs_rawtraverse+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80067ec:	68f9      	ldr	r1, [r7, #12]
 80067ee:	6978      	ldr	r0, [r7, #20]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	9202      	str	r2, [sp, #8]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	9201      	str	r2, [sp, #4]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	4603      	mov	r3, r0
 80067fe:	460a      	mov	r2, r1
 8006800:	2100      	movs	r1, #0
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7fe fae6 	bl	8004dd4 <lfs_ctz_traverse>
 8006808:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800680a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d027      	beq.n	8006860 <lfs_fs_rawtraverse+0x1a8>
                    return err;
 8006810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006812:	e094      	b.n	800693e <lfs_fs_rawtraverse+0x286>
                }
            } else if (includeorphans &&
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d022      	beq.n	8006860 <lfs_fs_rawtraverse+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800681a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800681c:	4618      	mov	r0, r3
 800681e:	f7fa fc37 	bl	8001090 <lfs_tag_type3>
 8006822:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8006824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006828:	d11a      	bne.n	8006860 <lfs_fs_rawtraverse+0x1a8>
                for (int i = 0; i < 2; i++) {
 800682a:	2300      	movs	r3, #0
 800682c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800682e:	e012      	b.n	8006856 <lfs_fs_rawtraverse+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 8006830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	f107 0214 	add.w	r2, r7, #20
 8006838:	4413      	add	r3, r2
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4611      	mov	r1, r2
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	4798      	blx	r3
 8006844:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 8006846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <lfs_fs_rawtraverse+0x198>
                        return err;
 800684c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684e:	e076      	b.n	800693e <lfs_fs_rawtraverse+0x286>
                for (int i = 0; i < 2; i++) {
 8006850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006852:	3301      	adds	r3, #1
 8006854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006858:	2b01      	cmp	r3, #1
 800685a:	dde9      	ble.n	8006830 <lfs_fs_rawtraverse+0x178>
 800685c:	e000      	b.n	8006860 <lfs_fs_rawtraverse+0x1a8>
                    continue;
 800685e:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006860:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006864:	3301      	adds	r3, #1
 8006866:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800686a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800686c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8006870:	429a      	cmp	r2, r3
 8006872:	d392      	bcc.n	800679a <lfs_fs_rawtraverse+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 8006874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006878:	3318      	adds	r3, #24
 800687a:	4618      	mov	r0, r3
 800687c:	f7fa fb21 	bl	8000ec2 <lfs_pair_isnull>
 8006880:	4603      	mov	r3, r0
 8006882:	f083 0301 	eor.w	r3, r3, #1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	f47f af31 	bne.w	80066f0 <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	65bb      	str	r3, [r7, #88]	; 0x58
 8006894:	e04f      	b.n	8006936 <lfs_fs_rawtraverse+0x27e>
        if (f->type != LFS_TYPE_REG) {
 8006896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006898:	799b      	ldrb	r3, [r3, #6]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d147      	bne.n	800692e <lfs_fs_rawtraverse+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800689e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01d      	beq.n	80068e6 <lfs_fs_rawtraverse+0x22e>
 80068aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d117      	bne.n	80068e6 <lfs_fs_rawtraverse+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80068b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80068c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	9202      	str	r2, [sp, #8]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	9201      	str	r2, [sp, #4]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	4623      	mov	r3, r4
 80068d2:	4602      	mov	r2, r0
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7fe fa7d 	bl	8004dd4 <lfs_ctz_traverse>
 80068da:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80068dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <lfs_fs_rawtraverse+0x22e>
                return err;
 80068e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e4:	e02b      	b.n	800693e <lfs_fs_rawtraverse+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80068e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01e      	beq.n	8006930 <lfs_fs_rawtraverse+0x278>
 80068f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d118      	bne.n	8006930 <lfs_fs_rawtraverse+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80068fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006900:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006908:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800690a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	9202      	str	r2, [sp, #8]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	9201      	str	r2, [sp, #4]
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	4623      	mov	r3, r4
 800691a:	4602      	mov	r2, r0
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7fe fa59 	bl	8004dd4 <lfs_ctz_traverse>
 8006922:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8006924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <lfs_fs_rawtraverse+0x278>
                return err;
 800692a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692c:	e007      	b.n	800693e <lfs_fs_rawtraverse+0x286>
            continue;
 800692e:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	65bb      	str	r3, [r7, #88]	; 0x58
 8006936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1ac      	bne.n	8006896 <lfs_fs_rawtraverse+0x1de>
            }
        }
    }
#endif

    return 0;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3774      	adds	r7, #116	; 0x74
 8006942:	46bd      	mov	sp, r7
 8006944:	bd90      	pop	{r4, r7, pc}
 8006946:	bf00      	nop
 8006948:	08012550 	.word	0x08012550
 800694c:	0801250c 	.word	0x0801250c
 8006950:	08012404 	.word	0x08012404
 8006954:	08012a24 	.word	0x08012a24
 8006958:	700ffc00 	.word	0x700ffc00

0800695c <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	; 0x28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006974:	4a2d      	ldr	r2, [pc, #180]	; (8006a2c <lfs_fs_pred+0xd0>)
 8006976:	f107 0314 	add.w	r3, r7, #20
 800697a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800697e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006982:	2301      	movs	r3, #1
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 8006986:	2301      	movs	r3, #1
 8006988:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 800698a:	e03e      	b.n	8006a0a <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3318      	adds	r3, #24
 8006990:	f107 0214 	add.w	r2, r7, #20
 8006994:	4611      	mov	r1, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f7fa fad8 	bl	8000f4c <lfs_pair_issync>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 80069a2:	4b23      	ldr	r3, [pc, #140]	; (8006a30 <lfs_fs_pred+0xd4>)
 80069a4:	f241 2230 	movw	r2, #4656	; 0x1230
 80069a8:	4922      	ldr	r1, [pc, #136]	; (8006a34 <lfs_fs_pred+0xd8>)
 80069aa:	4823      	ldr	r0, [pc, #140]	; (8006a38 <lfs_fs_pred+0xdc>)
 80069ac:	f00a fe60 	bl	8011670 <iprintf>
            return LFS_ERR_CORRUPT;
 80069b0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80069b4:	e036      	b.n	8006a24 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 80069b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d10a      	bne.n	80069d4 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	3301      	adds	r3, #1
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3318      	adds	r3, #24
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fa fa89 	bl	8000ef8 <lfs_pair_cmp>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <lfs_fs_pred+0x94>
            return 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e019      	b.n	8006a24 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3318      	adds	r3, #24
 80069f4:	461a      	mov	r2, r3
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7fc f903 	bl	8002c04 <lfs_dir_fetch>
 80069fe:	61f8      	str	r0, [r7, #28]
        if (err) {
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <lfs_fs_pred+0xae>
            return err;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	e00c      	b.n	8006a24 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3318      	adds	r3, #24
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fa fa57 	bl	8000ec2 <lfs_pair_isnull>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f083 0301 	eor.w	r3, r3, #1
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1b5      	bne.n	800698c <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006a20:	f06f 0301 	mvn.w	r3, #1
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3728      	adds	r7, #40	; 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	08012550 	.word	0x08012550
 8006a30:	0801250c 	.word	0x0801250c
 8006a34:	08012404 	.word	0x08012404
 8006a38:	08012a24 	.word	0x08012a24

08006a3c <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006a3c:	b5b0      	push	{r4, r5, r7, lr}
 8006a3e:	b08e      	sub	sp, #56	; 0x38
 8006a40:	af04      	add	r7, sp, #16
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006a5c:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8006a62:	69dd      	ldr	r5, [r3, #28]
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	6852      	ldr	r2, [r2, #4]
 8006a6c:	2108      	movs	r1, #8
 8006a6e:	9103      	str	r1, [sp, #12]
 8006a70:	f107 0110 	add.w	r1, r7, #16
 8006a74:	9102      	str	r1, [sp, #8]
 8006a76:	9201      	str	r2, [sp, #4]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	462b      	mov	r3, r5
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	4601      	mov	r1, r0
 8006a80:	6a38      	ldr	r0, [r7, #32]
 8006a82:	f7f9 fe99 	bl	80007b8 <lfs_bd_read>
 8006a86:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <lfs_fs_parent_match+0x56>
        return err;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	e012      	b.n	8006ab8 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8006a92:	f107 0310 	add.w	r3, r7, #16
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fa fa85 	bl	8000fa6 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	1d1a      	adds	r2, r3, #4
 8006aa0:	f107 0310 	add.w	r3, r7, #16
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fa fa26 	bl	8000ef8 <lfs_pair_cmp>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	bf14      	ite	ne
 8006ab2:	2301      	movne	r3, #1
 8006ab4:	2300      	moveq	r3, #0
 8006ab6:	b2db      	uxtb	r3, r3
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3728      	adds	r7, #40	; 0x28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bdb0      	pop	{r4, r5, r7, pc}

08006ac0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b090      	sub	sp, #64	; 0x40
 8006ac4:	af04      	add	r7, sp, #16
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006ad8:	4a33      	ldr	r2, [pc, #204]	; (8006ba8 <lfs_fs_parent+0xe8>)
 8006ada:	f107 031c 	add.w	r3, r7, #28
 8006ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ae2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8006aea:	2301      	movs	r3, #1
 8006aec:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8006aee:	e049      	b.n	8006b84 <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3318      	adds	r3, #24
 8006af4:	f107 021c 	add.w	r2, r7, #28
 8006af8:	4611      	mov	r1, r2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fa fa26 	bl	8000f4c <lfs_pair_issync>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8006b06:	4b29      	ldr	r3, [pc, #164]	; (8006bac <lfs_fs_parent+0xec>)
 8006b08:	f241 2271 	movw	r2, #4721	; 0x1271
 8006b0c:	4928      	ldr	r1, [pc, #160]	; (8006bb0 <lfs_fs_parent+0xf0>)
 8006b0e:	4829      	ldr	r0, [pc, #164]	; (8006bb4 <lfs_fs_parent+0xf4>)
 8006b10:	f00a fdae 	bl	8011670 <iprintf>
            return LFS_ERR_CORRUPT;
 8006b14:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006b18:	e041      	b.n	8006b9e <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 8006b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d10a      	bne.n	8006b38 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006b54:	f107 0310 	add.w	r3, r7, #16
 8006b58:	9303      	str	r3, [sp, #12]
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <lfs_fs_parent+0xf8>)
 8006b5c:	9302      	str	r3, [sp, #8]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <lfs_fs_parent+0xfc>)
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	4b16      	ldr	r3, [pc, #88]	; (8006bc0 <lfs_fs_parent+0x100>)
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f7fb fc82 	bl	8002474 <lfs_dir_fetchmatch>
 8006b70:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <lfs_fs_parent+0xc4>
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	f113 0f02 	cmn.w	r3, #2
 8006b7e:	d001      	beq.n	8006b84 <lfs_fs_parent+0xc4>
            return tag;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	e00c      	b.n	8006b9e <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3318      	adds	r3, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fa f99a 	bl	8000ec2 <lfs_pair_isnull>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f083 0301 	eor.w	r3, r3, #1
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1aa      	bne.n	8006af0 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006b9a:	f06f 0301 	mvn.w	r3, #1
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3730      	adds	r7, #48	; 0x30
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	08012550 	.word	0x08012550
 8006bac:	0801250c 	.word	0x0801250c
 8006bb0:	08012404 	.word	0x08012404
 8006bb4:	08012a24 	.word	0x08012a24
 8006bb8:	08006a3d 	.word	0x08006a3d
 8006bbc:	20000008 	.word	0x20000008
 8006bc0:	7ff003ff 	.word	0x7ff003ff

08006bc4 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	025b      	lsls	r3, r3, #9
 8006bdc:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006bf0:	b590      	push	{r4, r7, lr}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fa fa7f 	bl	8001104 <lfs_tag_size>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <lfs_fs_preporphans+0x32>
 8006c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	da06      	bge.n	8006c22 <lfs_fs_preporphans+0x32>
 8006c14:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <lfs_fs_preporphans+0x90>)
 8006c16:	4a1b      	ldr	r2, [pc, #108]	; (8006c84 <lfs_fs_preporphans+0x94>)
 8006c18:	f241 2192 	movw	r1, #4754	; 0x1292
 8006c1c:	481a      	ldr	r0, [pc, #104]	; (8006c88 <lfs_fs_preporphans+0x98>)
 8006c1e:	f00a f901 	bl	8010e24 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fa fa6c 	bl	8001104 <lfs_tag_size>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8006c32:	d90a      	bls.n	8006c4a <lfs_fs_preporphans+0x5a>
 8006c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	dd06      	ble.n	8006c4a <lfs_fs_preporphans+0x5a>
 8006c3c:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <lfs_fs_preporphans+0x9c>)
 8006c3e:	4a11      	ldr	r2, [pc, #68]	; (8006c84 <lfs_fs_preporphans+0x94>)
 8006c40:	f241 2193 	movw	r1, #4755	; 0x1293
 8006c44:	4810      	ldr	r0, [pc, #64]	; (8006c88 <lfs_fs_preporphans+0x98>)
 8006c46:	f00a f8ed 	bl	8010e24 <__assert_func>
    lfs->gstate.tag += orphans;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c52:	441a      	add	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3330      	adds	r3, #48	; 0x30
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fa fab0 	bl	80011ca <lfs_gstate_hasorphans>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006c6e:	ea44 0203 	orr.w	r2, r4, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd90      	pop	{r4, r7, pc}
 8006c80:	08012c00 	.word	0x08012c00
 8006c84:	080131dc 	.word	0x080131dc
 8006c88:	08012404 	.word	0x08012404
 8006c8c:	08012c38 	.word	0x08012c38

08006c90 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	4a17      	ldr	r2, [pc, #92]	; (8006d00 <lfs_fs_prepmove+0x70>)
 8006ca4:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006ca6:	897b      	ldrh	r3, [r7, #10]
 8006ca8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006cac:	428b      	cmp	r3, r1
 8006cae:	d006      	beq.n	8006cbe <lfs_fs_prepmove+0x2e>
 8006cb0:	897b      	ldrh	r3, [r7, #10]
 8006cb2:	029b      	lsls	r3, r3, #10
 8006cb4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006cb8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006cbc:	e000      	b.n	8006cc0 <lfs_fs_prepmove+0x30>
 8006cbe:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006cc6:	897b      	ldrh	r3, [r7, #10]
 8006cc8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d002      	beq.n	8006cd6 <lfs_fs_prepmove+0x46>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	e000      	b.n	8006cd8 <lfs_fs_prepmove+0x48>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006cdc:	897b      	ldrh	r3, [r7, #10]
 8006cde:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d003      	beq.n	8006cee <lfs_fs_prepmove+0x5e>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	e000      	b.n	8006cf0 <lfs_fs_prepmove+0x60>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006cf4:	bf00      	nop
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	800003ff 	.word	0x800003ff

08006d04 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b098      	sub	sp, #96	; 0x60
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3330      	adds	r3, #48	; 0x30
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fa fa8f 	bl	8001234 <lfs_gstate_needssuperblock>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f083 0301 	eor.w	r3, r3, #1
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <lfs_fs_desuperblock+0x22>
        return 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e04e      	b.n	8006dc4 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1a      	ldr	r2, [r3, #32]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	4927      	ldr	r1, [pc, #156]	; (8006dcc <lfs_fs_desuperblock+0xc8>)
 8006d30:	9101      	str	r1, [sp, #4]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4613      	mov	r3, r2
 8006d36:	f241 22ac 	movw	r2, #4780	; 0x12ac
 8006d3a:	4925      	ldr	r1, [pc, #148]	; (8006dd0 <lfs_fs_desuperblock+0xcc>)
 8006d3c:	4825      	ldr	r0, [pc, #148]	; (8006dd4 <lfs_fs_desuperblock+0xd0>)
 8006d3e:	f00a fc97 	bl	8011670 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f103 0220 	add.w	r2, r3, #32
 8006d48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fb ff58 	bl	8002c04 <lfs_dir_fetch>
 8006d54:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8006d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <lfs_fs_desuperblock+0x5c>
        return err;
 8006d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d5e:	e031      	b.n	8006dc4 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7fa fbfd 	bl	8001560 <lfs_fs_disk_version>
 8006d66:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8006d68:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d6e:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8006d70:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8006d76:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8006d7c:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 8006d88:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 8006d8a:	f107 031c 	add.w	r3, r7, #28
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fa fb5c 	bl	800144c <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006d94:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <lfs_fs_desuperblock+0xd4>)
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	f107 031c 	add.w	r3, r7, #28
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	f107 0214 	add.w	r2, r7, #20
 8006da2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006da6:	2301      	movs	r3, #1
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fd fd35 	bl	8004818 <lfs_dir_commit>
 8006dae:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8006db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <lfs_fs_desuperblock+0xb6>
        return err;
 8006db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db8:	e004      	b.n	8006dc4 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8006dba:	2100      	movs	r1, #0
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff ff01 	bl	8006bc4 <lfs_fs_prepsuperblock>
    return 0;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3758      	adds	r7, #88	; 0x58
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	0801250c 	.word	0x0801250c
 8006dd0:	08012404 	.word	0x08012404
 8006dd4:	08012c70 	.word	0x08012c70
 8006dd8:	20100018 	.word	0x20100018

08006ddc <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006ddc:	b5b0      	push	{r4, r5, r7, lr}
 8006dde:	b094      	sub	sp, #80	; 0x50
 8006de0:	af04      	add	r7, sp, #16
 8006de2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	333c      	adds	r3, #60	; 0x3c
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fa fa10 	bl	800120e <lfs_gstate_hasmove>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f083 0301 	eor.w	r3, r3, #1
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <lfs_fs_demove+0x22>
        return 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e05b      	b.n	8006eb6 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fa f96a 	bl	80010e4 <lfs_tag_id>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	4b2a      	ldr	r3, [pc, #168]	; (8006ec0 <lfs_fs_demove+0xe4>)
 8006e16:	9302      	str	r3, [sp, #8]
 8006e18:	9201      	str	r2, [sp, #4]
 8006e1a:	9400      	str	r4, [sp, #0]
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	f241 22d4 	movw	r2, #4820	; 0x12d4
 8006e22:	4928      	ldr	r1, [pc, #160]	; (8006ec4 <lfs_fs_demove+0xe8>)
 8006e24:	4828      	ldr	r0, [pc, #160]	; (8006ec8 <lfs_fs_demove+0xec>)
 8006e26:	f00a fc23 	bl	8011670 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fa f92e 	bl	8001090 <lfs_tag_type3>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d006      	beq.n	8006e4e <lfs_fs_demove+0x72>
 8006e40:	4b22      	ldr	r3, [pc, #136]	; (8006ecc <lfs_fs_demove+0xf0>)
 8006e42:	4a23      	ldr	r2, [pc, #140]	; (8006ed0 <lfs_fs_demove+0xf4>)
 8006e44:	f241 21db 	movw	r1, #4827	; 0x12db
 8006e48:	481e      	ldr	r0, [pc, #120]	; (8006ec4 <lfs_fs_demove+0xe8>)
 8006e4a:	f009 ffeb 	bl	8010e24 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006e54:	f107 0318 	add.w	r3, r7, #24
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fb fed2 	bl	8002c04 <lfs_dir_fetch>
 8006e60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8006e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <lfs_fs_demove+0x90>
        return err;
 8006e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6a:	e024      	b.n	8006eb6 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fa f937 	bl	80010e4 <lfs_tag_id>
 8006e76:	4603      	mov	r3, r0
 8006e78:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff ff05 	bl	8006c90 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006e86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e88:	029b      	lsls	r3, r3, #10
 8006e8a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006e8e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006e92:	613b      	str	r3, [r7, #16]
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	f107 0210 	add.w	r2, r7, #16
 8006e9c:	f107 0118 	add.w	r1, r7, #24
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fd fcb8 	bl	8004818 <lfs_dir_commit>
 8006ea8:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <lfs_fs_demove+0xd8>
        return err;
 8006eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb2:	e000      	b.n	8006eb6 <lfs_fs_demove+0xda>
    }

    return 0;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3740      	adds	r7, #64	; 0x40
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	0801250c 	.word	0x0801250c
 8006ec4:	08012404 	.word	0x08012404
 8006ec8:	08012ca4 	.word	0x08012ca4
 8006ecc:	08012cd8 	.word	0x08012cd8
 8006ed0:	080131f0 	.word	0x080131f0

08006ed4 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006ed4:	b5b0      	push	{r4, r5, r7, lr}
 8006ed6:	b0b2      	sub	sp, #200	; 0xc8
 8006ed8:	af04      	add	r7, sp, #16
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3330      	adds	r3, #48	; 0x30
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fa f970 	bl	80011ca <lfs_gstate_hasorphans>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f083 0301 	eor.w	r3, r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <lfs_fs_deorphan+0x26>
        return 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e187      	b.n	800720a <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8006f00:	e170      	b.n	80071e4 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006f02:	f107 0308 	add.w	r3, r7, #8
 8006f06:	2220      	movs	r2, #32
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f00a f810 	bl	8010f30 <memset>
 8006f10:	2301      	movs	r3, #1
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	2301      	movs	r3, #1
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8006f1e:	e149      	b.n	80071b4 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006f20:	f107 0308 	add.w	r3, r7, #8
 8006f24:	f103 0218 	add.w	r2, r3, #24
 8006f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fb fe68 	bl	8002c04 <lfs_dir_fetch>
 8006f34:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 8006f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <lfs_fs_deorphan+0x72>
                return err;
 8006f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f44:	e161      	b.n	800720a <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8006f46:	7ffb      	ldrb	r3, [r7, #31]
 8006f48:	f083 0301 	eor.w	r3, r3, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 8126 	beq.w	80071a0 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006f54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006f58:	f107 0308 	add.w	r3, r7, #8
 8006f5c:	3318      	adds	r3, #24
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff fdad 	bl	8006ac0 <lfs_fs_parent>
 8006f66:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da07      	bge.n	8006f82 <lfs_fs_deorphan+0xae>
 8006f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f76:	f113 0f02 	cmn.w	r3, #2
 8006f7a:	d002      	beq.n	8006f82 <lfs_fs_deorphan+0xae>
                    return tag;
 8006f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f80:	e143      	b.n	800720a <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8006f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f040 80ac 	bne.w	80070e4 <lfs_fs_deorphan+0x210>
 8006f8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f90:	f113 0f02 	cmn.w	r3, #2
 8006f94:	f000 80a6 	beq.w	80070e4 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8006f98:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f9c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006fa0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	4a9a      	ldr	r2, [pc, #616]	; (8007214 <lfs_fs_deorphan+0x340>)
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fa fd00 	bl	80019b0 <lfs_dir_get>
 8006fb0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006fb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	da02      	bge.n	8006fc2 <lfs_fs_deorphan+0xee>
                        return state;
 8006fbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fc0:	e0eb      	b.n	800719a <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8006fc2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7f9 ffed 	bl	8000fa6 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8006fcc:	f107 0308 	add.w	r3, r7, #8
 8006fd0:	f103 0218 	add.w	r2, r3, #24
 8006fd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7f9 ffb6 	bl	8000f4c <lfs_pair_issync>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f083 0301 	eor.w	r3, r3, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d07b      	beq.n	80070e4 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8006fec:	6a38      	ldr	r0, [r7, #32]
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006ff4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006ff8:	4c87      	ldr	r4, [pc, #540]	; (8007218 <lfs_fs_deorphan+0x344>)
 8006ffa:	9403      	str	r4, [sp, #12]
 8006ffc:	9102      	str	r1, [sp, #8]
 8006ffe:	9201      	str	r2, [sp, #4]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	4603      	mov	r3, r0
 8007004:	f241 3221 	movw	r2, #4897	; 0x1321
 8007008:	4984      	ldr	r1, [pc, #528]	; (800721c <lfs_fs_deorphan+0x348>)
 800700a:	4885      	ldr	r0, [pc, #532]	; (8007220 <lfs_fs_deorphan+0x34c>)
 800700c:	f00a fb30 	bl	8011670 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8007010:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007014:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3330      	adds	r3, #48	; 0x30
 800701c:	f107 0208 	add.w	r2, r7, #8
 8007020:	4611      	mov	r1, r2
 8007022:	4618      	mov	r0, r3
 8007024:	f7fa f91a 	bl	800125c <lfs_gstate_hasmovehere>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01c      	beq.n	8007068 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	4618      	mov	r0, r3
 8007034:	f7fa f856 	bl	80010e4 <lfs_tag_id>
 8007038:	4603      	mov	r3, r0
 800703a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8007046:	4874      	ldr	r0, [pc, #464]	; (8007218 <lfs_fs_deorphan+0x344>)
 8007048:	9002      	str	r0, [sp, #8]
 800704a:	9201      	str	r2, [sp, #4]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	460b      	mov	r3, r1
 8007050:	f241 322c 	movw	r2, #4908	; 0x132c
 8007054:	4971      	ldr	r1, [pc, #452]	; (800721c <lfs_fs_deorphan+0x348>)
 8007056:	4873      	ldr	r0, [pc, #460]	; (8007224 <lfs_fs_deorphan+0x350>)
 8007058:	f00a fb0a 	bl	8011670 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800705c:	2200      	movs	r2, #0
 800705e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fe14 	bl	8006c90 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8007068:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800706c:	4618      	mov	r0, r3
 800706e:	f7f9 ffb4 	bl	8000fda <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007072:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8007076:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <lfs_fs_deorphan+0x1ba>
 800707e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8007082:	029b      	lsls	r3, r3, #10
 8007084:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007088:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800708c:	e000      	b.n	8007090 <lfs_fs_deorphan+0x1bc>
 800708e:	2300      	movs	r3, #0
 8007090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007094:	2300      	movs	r3, #0
 8007096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800709a:	4b63      	ldr	r3, [pc, #396]	; (8007228 <lfs_fs_deorphan+0x354>)
 800709c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80070a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	2302      	movs	r3, #2
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fd f8b6 	bl	8004224 <lfs_dir_orphaningcommit>
 80070b8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80070bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7f9 ff70 	bl	8000fa6 <lfs_pair_fromle32>
                        if (state < 0) {
 80070c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da02      	bge.n	80070d4 <lfs_fs_deorphan+0x200>
                            return state;
 80070ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 80070d2:	e062      	b.n	800719a <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80070d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d16b      	bne.n	80071b4 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80070e2:	e067      	b.n	80071b4 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80070e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d159      	bne.n	80071a0 <lfs_fs_deorphan+0x2cc>
 80070ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070f0:	f113 0f02 	cmn.w	r3, #2
 80070f4:	d154      	bne.n	80071a0 <lfs_fs_deorphan+0x2cc>
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d051      	beq.n	80071a0 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80070fc:	6a3a      	ldr	r2, [r7, #32]
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	4945      	ldr	r1, [pc, #276]	; (8007218 <lfs_fs_deorphan+0x344>)
 8007102:	9101      	str	r1, [sp, #4]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4613      	mov	r3, r2
 8007108:	f241 324c 	movw	r2, #4940	; 0x134c
 800710c:	4943      	ldr	r1, [pc, #268]	; (800721c <lfs_fs_deorphan+0x348>)
 800710e:	4847      	ldr	r0, [pc, #284]	; (800722c <lfs_fs_deorphan+0x358>)
 8007110:	f00a faae 	bl	8011670 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800711a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7fb fd8b 	bl	8002c3c <lfs_dir_getgstate>
 8007126:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 800712a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <lfs_fs_deorphan+0x264>
                        return err;
 8007132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007136:	e030      	b.n	800719a <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8007138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800713c:	3318      	adds	r3, #24
 800713e:	4618      	mov	r0, r3
 8007140:	f7f9 ff4b 	bl	8000fda <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007144:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007148:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800714c:	051a      	lsls	r2, r3, #20
 800714e:	4b38      	ldr	r3, [pc, #224]	; (8007230 <lfs_fs_deorphan+0x35c>)
 8007150:	4313      	orrs	r3, r2
 8007152:	673b      	str	r3, [r7, #112]	; 0x70
 8007154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007158:	3318      	adds	r3, #24
 800715a:	677b      	str	r3, [r7, #116]	; 0x74
 800715c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007160:	f107 0108 	add.w	r1, r7, #8
 8007164:	2301      	movs	r3, #1
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fd f85c 	bl	8004224 <lfs_dir_orphaningcommit>
 800716c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8007170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007174:	3318      	adds	r3, #24
 8007176:	4618      	mov	r0, r3
 8007178:	f7f9 ff15 	bl	8000fa6 <lfs_pair_fromle32>
                    if (state < 0) {
 800717c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007180:	2b00      	cmp	r3, #0
 8007182:	da02      	bge.n	800718a <lfs_fs_deorphan+0x2b6>
                        return state;
 8007184:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 8007188:	e03f      	b.n	800720a <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800718a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800718e:	2b03      	cmp	r3, #3
 8007190:	d104      	bne.n	800719c <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8007198:	e00c      	b.n	80071b4 <lfs_fs_deorphan+0x2e0>
                return err;
 800719a:	e036      	b.n	800720a <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 800719c:	bf00      	nop
 800719e:	e009      	b.n	80071b4 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 80071a0:	f107 0408 	add.w	r4, r7, #8
 80071a4:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80071a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80071b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 80071b4:	f107 0308 	add.w	r3, r7, #8
 80071b8:	3318      	adds	r3, #24
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7f9 fe81 	bl	8000ec2 <lfs_pair_isnull>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f083 0301 	eor.w	r3, r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f47f aea9 	bne.w	8006f20 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 80071ce:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <lfs_fs_deorphan+0x306>
 80071d6:	2300      	movs	r3, #0
 80071d8:	e002      	b.n	80071e0 <lfs_fs_deorphan+0x30c>
 80071da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071de:	3301      	adds	r3, #1
 80071e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 80071e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	f77f ae8a 	ble.w	8006f02 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3330      	adds	r3, #48	; 0x30
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7f9 fffc 	bl	80011f0 <lfs_gstate_getorphans>
 80071f8:	4603      	mov	r3, r0
 80071fa:	425b      	negs	r3, r3
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	b25b      	sxtb	r3, r3
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff fcf4 	bl	8006bf0 <lfs_fs_preporphans>
 8007208:	4603      	mov	r3, r0
}
 800720a:	4618      	mov	r0, r3
 800720c:	37b8      	adds	r7, #184	; 0xb8
 800720e:	46bd      	mov	sp, r7
 8007210:	bdb0      	pop	{r4, r5, r7, pc}
 8007212:	bf00      	nop
 8007214:	7ffffc00 	.word	0x7ffffc00
 8007218:	0801250c 	.word	0x0801250c
 800721c:	08012404 	.word	0x08012404
 8007220:	08012d0c 	.word	0x08012d0c
 8007224:	08012d50 	.word	0x08012d50
 8007228:	600ffc08 	.word	0x600ffc08
 800722c:	08012d98 	.word	0x08012d98
 8007230:	000ffc08 	.word	0x000ffc08

08007234 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff fd61 	bl	8006d04 <lfs_fs_desuperblock>
 8007242:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <lfs_fs_forceconsistency+0x1a>
        return err;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	e013      	b.n	8007276 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff fdc4 	bl	8006ddc <lfs_fs_demove>
 8007254:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <lfs_fs_forceconsistency+0x2c>
        return err;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	e00a      	b.n	8007276 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8007260:	2101      	movs	r1, #1
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff fe36 	bl	8006ed4 <lfs_fs_deorphan>
 8007268:	60f8      	str	r0, [r7, #12]
    if (err) {
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <lfs_fs_forceconsistency+0x40>
        return err;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	e000      	b.n	8007276 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	601a      	str	r2, [r3, #0]
    return 0;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 80072b0:	f107 0208 	add.w	r2, r7, #8
 80072b4:	2300      	movs	r3, #0
 80072b6:	4907      	ldr	r1, [pc, #28]	; (80072d4 <lfs_fs_rawsize+0x30>)
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff f9fd 	bl	80066b8 <lfs_fs_rawtraverse>
 80072be:	60f8      	str	r0, [r7, #12]
    if (err) {
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <lfs_fs_rawsize+0x26>
        return err;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	e000      	b.n	80072cc <lfs_fs_rawsize+0x28>
    }

    return size;
 80072ca:	68bb      	ldr	r3, [r7, #8]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	0800727f 	.word	0x0800727f

080072d8 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
    if (err) {
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <lfs_format+0x18>
        return err;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	e005      	b.n	80072fc <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fe ff14 	bl	8006120 <lfs_rawformat>
 80072f8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <lfs_mount+0x18>
        return err;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	e005      	b.n	8007328 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fe ffb0 	bl	8006284 <lfs_rawmount>
 8007324:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007326:	68fb      	ldr	r3, [r7, #12]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]
    if (err) {
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <lfs_file_open+0x1c>
        return err;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	e01a      	b.n	8007382 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	4618      	mov	r0, r3
 8007354:	f7fa f8b2 	bl	80014bc <lfs_mlist_isopen>
 8007358:	4603      	mov	r3, r0
 800735a:	f083 0301 	eor.w	r3, r3, #1
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <lfs_file_open+0x42>
 8007364:	4b09      	ldr	r3, [pc, #36]	; (800738c <lfs_file_open+0x5c>)
 8007366:	4a0a      	ldr	r2, [pc, #40]	; (8007390 <lfs_file_open+0x60>)
 8007368:	f241 712a 	movw	r1, #5930	; 0x172a
 800736c:	4809      	ldr	r0, [pc, #36]	; (8007394 <lfs_file_open+0x64>)
 800736e:	f009 fd59 	bl	8010e24 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f7fd ff79 	bl	8005270 <lfs_file_rawopen>
 800737e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007380:	697b      	ldr	r3, [r7, #20]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	08012de8 	.word	0x08012de8
 8007390:	08013200 	.word	0x08013200
 8007394:	08012404 	.word	0x08012404

08007398 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]


	int err = LFS_LOCK(lfs->cfg);
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
    if (err) {
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <lfs_file_close+0x18>
        return err;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	e015      	b.n	80073dc <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fa f880 	bl	80014bc <lfs_mlist_isopen>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d106      	bne.n	80073d0 <lfs_file_close+0x38>
 80073c2:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <lfs_file_close+0x4c>)
 80073c4:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <lfs_file_close+0x50>)
 80073c6:	f241 7150 	movw	r1, #5968	; 0x1750
 80073ca:	4808      	ldr	r0, [pc, #32]	; (80073ec <lfs_file_close+0x54>)
 80073cc:	f009 fd2a 	bl	8010e24 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fd ff64 	bl	80052a0 <lfs_file_rawclose>
 80073d8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80073da:	68fb      	ldr	r3, [r7, #12]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	08012e20 	.word	0x08012e20
 80073e8:	08013210 	.word	0x08013210
 80073ec:	08012404 	.word	0x08012404

080073f0 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
    if (err) {
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <lfs_file_read+0x1c>
        return err;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	e017      	b.n	800743c <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	4618      	mov	r0, r3
 8007414:	f7fa f852 	bl	80014bc <lfs_mlist_isopen>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <lfs_file_read+0x3c>
 800741e:	4b09      	ldr	r3, [pc, #36]	; (8007444 <lfs_file_read+0x54>)
 8007420:	4a09      	ldr	r2, [pc, #36]	; (8007448 <lfs_file_read+0x58>)
 8007422:	f241 7172 	movw	r1, #6002	; 0x1772
 8007426:	4809      	ldr	r0, [pc, #36]	; (800744c <lfs_file_read+0x5c>)
 8007428:	f009 fcfc 	bl	8010e24 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7fe fa80 	bl	8005938 <lfs_file_rawread>
 8007438:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800743a:	693b      	ldr	r3, [r7, #16]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	08012e20 	.word	0x08012e20
 8007448:	08013220 	.word	0x08013220
 800744c:	08012404 	.word	0x08012404

08007450 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
    if (err) {
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <lfs_file_write+0x1c>
        return err;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	e017      	b.n	800749c <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	4618      	mov	r0, r3
 8007474:	f7fa f822 	bl	80014bc <lfs_mlist_isopen>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <lfs_file_write+0x3c>
 800747e:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <lfs_file_write+0x54>)
 8007480:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <lfs_file_write+0x58>)
 8007482:	f241 7184 	movw	r1, #6020	; 0x1784
 8007486:	4809      	ldr	r0, [pc, #36]	; (80074ac <lfs_file_write+0x5c>)
 8007488:	f009 fccc 	bl	8010e24 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	68b9      	ldr	r1, [r7, #8]
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7fe fbb0 	bl	8005bf8 <lfs_file_rawwrite>
 8007498:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800749a:	693b      	ldr	r3, [r7, #16]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	08012e20 	.word	0x08012e20
 80074a8:	08013230 	.word	0x08013230
 80074ac:	08012404 	.word	0x08012404

080074b0 <lfs_file_size>:
    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
    if (err) {
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <lfs_file_size+0x18>
        return err;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	e015      	b.n	80074f4 <lfs_file_size+0x44>
    }
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7f9 fff4 	bl	80014bc <lfs_mlist_isopen>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <lfs_file_size+0x38>
 80074da:	4b08      	ldr	r3, [pc, #32]	; (80074fc <lfs_file_size+0x4c>)
 80074dc:	4a08      	ldr	r2, [pc, #32]	; (8007500 <lfs_file_size+0x50>)
 80074de:	f241 71d4 	movw	r1, #6100	; 0x17d4
 80074e2:	4808      	ldr	r0, [pc, #32]	; (8007504 <lfs_file_size+0x54>)
 80074e4:	f009 fc9e 	bl	8010e24 <__assert_func>

    lfs_soff_t res = lfs_file_rawsize(lfs, file);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7fe fc08 	bl	8005d00 <lfs_file_rawsize>
 80074f0:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_size -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80074f2:	68bb      	ldr	r3, [r7, #8]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	08012e20 	.word	0x08012e20
 8007500:	08013240 	.word	0x08013240
 8007504:	08012404 	.word	0x08012404

08007508 <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
    if (err) {
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <lfs_dir_open+0x1a>
        return err;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	e019      	b.n	8007556 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	4618      	mov	r0, r3
 800752a:	f7f9 ffc7 	bl	80014bc <lfs_mlist_isopen>
 800752e:	4603      	mov	r3, r0
 8007530:	f083 0301 	eor.w	r3, r3, #1
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <lfs_dir_open+0x40>
 800753a:	4b09      	ldr	r3, [pc, #36]	; (8007560 <lfs_dir_open+0x58>)
 800753c:	4a09      	ldr	r2, [pc, #36]	; (8007564 <lfs_dir_open+0x5c>)
 800753e:	f241 71f3 	movw	r1, #6131	; 0x17f3
 8007542:	4809      	ldr	r0, [pc, #36]	; (8007568 <lfs_dir_open+0x60>)
 8007544:	f009 fc6e 	bl	8010e24 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7fd f989 	bl	8004864 <lfs_dir_rawopen>
 8007552:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007554:	697b      	ldr	r3, [r7, #20]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	08012e58 	.word	0x08012e58
 8007564:	08013250 	.word	0x08013250
 8007568:	08012404 	.word	0x08012404

0800756c <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
    if (err) {
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <lfs_dir_close+0x18>
        return err;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	e005      	b.n	8007590 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fd f9e6 	bl	8004958 <lfs_dir_rawclose>
 800758c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800758e:	68fb      	ldr	r3, [r7, #12]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
    if (err) {
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <lfs_dir_read+0x1a>
        return err;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	e006      	b.n	80075c0 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7fd f9dc 	bl	8004974 <lfs_dir_rawread>
 80075bc:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80075be:	697b      	ldr	r3, [r7, #20]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	e024      	b.n	8007628 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	091a      	lsrs	r2, r3, #4
 80075e2:	6939      	ldr	r1, [r7, #16]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	440b      	add	r3, r1
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	4619      	mov	r1, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	404b      	eors	r3, r1
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	4912      	ldr	r1, [pc, #72]	; (8007640 <lfs_crc+0x78>)
 80075f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80075fa:	4053      	eors	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	091a      	lsrs	r2, r3, #4
 8007602:	6939      	ldr	r1, [r7, #16]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	440b      	add	r3, r1
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	091b      	lsrs	r3, r3, #4
 800760c:	b2db      	uxtb	r3, r3
 800760e:	4619      	mov	r1, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	404b      	eors	r3, r1
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	4909      	ldr	r1, [pc, #36]	; (8007640 <lfs_crc+0x78>)
 800761a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800761e:	4053      	eors	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	3301      	adds	r3, #1
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	429a      	cmp	r2, r3
 800762e:	d3d6      	bcc.n	80075de <lfs_crc+0x16>
    }

    return crc;
 8007630:	68fb      	ldr	r3, [r7, #12]
}
 8007632:	4618      	mov	r0, r3
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	08013260 	.word	0x08013260

08007644 <read_file_from_littlefs>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to read data from a file in LittleFS
void read_file_from_littlefs(lfs_t *lfs, const char *filename) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b0a0      	sub	sp, #128	; 0x80
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
    lfs_file_t file;
    HAL_UART_Transmit(&huart7, filename,sizeof(filename),1000);
 800764e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007652:	2204      	movs	r2, #4
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	483e      	ldr	r0, [pc, #248]	; (8007750 <read_file_from_littlefs+0x10c>)
 8007658:	f004 fffb 	bl	800c652 <HAL_UART_Transmit>
    // Open the file for reading
    int err = lfs_file_open(lfs, &file, filename, LFS_O_RDONLY);
 800765c:	f107 0114 	add.w	r1, r7, #20
 8007660:	2301      	movs	r3, #1
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff fe63 	bl	8007330 <lfs_file_open>
 800766a:	67b8      	str	r0, [r7, #120]	; 0x78
    if (err < 0) {
 800766c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800766e:	2b00      	cmp	r3, #0
 8007670:	da04      	bge.n	800767c <read_file_from_littlefs+0x38>
        printf("Failed to open file: %s\n", filename);
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	4837      	ldr	r0, [pc, #220]	; (8007754 <read_file_from_littlefs+0x110>)
 8007676:	f009 fffb 	bl	8011670 <iprintf>
        return;
 800767a:	e066      	b.n	800774a <read_file_from_littlefs+0x106>
    }

    // Get the file size
    lfs_soff_t file_size = lfs_file_size(lfs, &file);
 800767c:	f107 0314 	add.w	r3, r7, #20
 8007680:	4619      	mov	r1, r3
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff ff14 	bl	80074b0 <lfs_file_size>
 8007688:	6778      	str	r0, [r7, #116]	; 0x74
    if (file_size < 0) {
 800768a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800768c:	2b00      	cmp	r3, #0
 800768e:	da0a      	bge.n	80076a6 <read_file_from_littlefs+0x62>
        printf("Failed to get file size for: %s\n", filename);
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	4831      	ldr	r0, [pc, #196]	; (8007758 <read_file_from_littlefs+0x114>)
 8007694:	f009 ffec 	bl	8011670 <iprintf>
        lfs_file_close(lfs, &file);
 8007698:	f107 0314 	add.w	r3, r7, #20
 800769c:	4619      	mov	r1, r3
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff fe7a 	bl	8007398 <lfs_file_close>
        return;
 80076a4:	e051      	b.n	800774a <read_file_from_littlefs+0x106>
    }

    // Allocate a buffer to hold the file data
    float *buffer = malloc(file_size);
 80076a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a8:	4618      	mov	r0, r3
 80076aa:	f009 fc15 	bl	8010ed8 <malloc>
 80076ae:	4603      	mov	r3, r0
 80076b0:	673b      	str	r3, [r7, #112]	; 0x70
    if (buffer == NULL) {
 80076b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <read_file_from_littlefs+0x8a>
        printf("Failed to allocate buffer for reading file: %s\n", filename);
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	4828      	ldr	r0, [pc, #160]	; (800775c <read_file_from_littlefs+0x118>)
 80076bc:	f009 ffd8 	bl	8011670 <iprintf>
        lfs_file_close(lfs, &file);
 80076c0:	f107 0314 	add.w	r3, r7, #20
 80076c4:	4619      	mov	r1, r3
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7ff fe66 	bl	8007398 <lfs_file_close>
        return;
 80076cc:	e03d      	b.n	800774a <read_file_from_littlefs+0x106>
    }

    // Read the file content into the buffer
    lfs_ssize_t bytes_read = lfs_file_read(lfs, &file, buffer, file_size);
 80076ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076d0:	f107 0114 	add.w	r1, r7, #20
 80076d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff fe8a 	bl	80073f0 <lfs_file_read>
 80076dc:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (bytes_read < 0) {
 80076de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	da04      	bge.n	80076ee <read_file_from_littlefs+0xaa>
        printf("Failed to read file: %s\n", filename);
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	481e      	ldr	r0, [pc, #120]	; (8007760 <read_file_from_littlefs+0x11c>)
 80076e8:	f009 ffc2 	bl	8011670 <iprintf>
 80076ec:	e024      	b.n	8007738 <read_file_from_littlefs+0xf4>
    } else {
    	char x;
        // Successfully read the file, print its content (if it's text data)
        HAL_UART_Transmit(&huart7, buffer, (int)bytes_read,1000);
 80076ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076f6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80076f8:	4815      	ldr	r0, [pc, #84]	; (8007750 <read_file_from_littlefs+0x10c>)
 80076fa:	f004 ffaa 	bl	800c652 <HAL_UART_Transmit>
        for(int i=0;i<(int) bytes_read;){
 80076fe:	2300      	movs	r3, #0
 8007700:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007702:	e00f      	b.n	8007724 <read_file_from_littlefs+0xe0>
//        	printf(buffer[i]);
        	x=buffer[i];
 8007704:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800770a:	4413      	add	r3, r2
 800770c:	edd3 7a00 	vldr	s15, [r3]
 8007710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007714:	edc7 7a01 	vstr	s15, [r7, #4]
 8007718:	793b      	ldrb	r3, [r7, #4]
 800771a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        	i++;
 800771e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007720:	3301      	adds	r3, #1
 8007722:	67fb      	str	r3, [r7, #124]	; 0x7c
        for(int i=0;i<(int) bytes_read;){
 8007724:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007728:	429a      	cmp	r2, r3
 800772a:	dbeb      	blt.n	8007704 <read_file_from_littlefs+0xc0>
        }


        printf("File Content (%s):\n%.*s\n", filename, (int)bytes_read, buffer);
 800772c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800772e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	480c      	ldr	r0, [pc, #48]	; (8007764 <read_file_from_littlefs+0x120>)
 8007734:	f009 ff9c 	bl	8011670 <iprintf>
    }

    // Clean up
    free(buffer);
 8007738:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800773a:	f009 fbd5 	bl	8010ee8 <free>
    lfs_file_close(lfs, &file);
 800773e:	f107 0314 	add.w	r3, r7, #20
 8007742:	4619      	mov	r1, r3
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff fe27 	bl	8007398 <lfs_file_close>
}
 800774a:	3780      	adds	r7, #128	; 0x80
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000490 	.word	0x20000490
 8007754:	08012e90 	.word	0x08012e90
 8007758:	08012eac 	.word	0x08012eac
 800775c:	08012ed0 	.word	0x08012ed0
 8007760:	08012f00 	.word	0x08012f00
 8007764:	08012f1c 	.word	0x08012f1c

08007768 <nor_delay_us>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	DmaEnd = 1;
}

void nor_delay_us(uint32_t us){
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
//	}
//	__HAL_TIM_SET_COUNTER(&htim2, 0);
//	HAL_TIM_Base_Start(&htim2);
//	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
//	HAL_TIM_Base_Stop(&htim2);
	HAL_Delay(1000);
 8007770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007774:	f001 fdae 	bl	80092d4 <HAL_Delay>
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <nor_cs_assert>:

void nor_cs_assert(){
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8007784:	2200      	movs	r2, #0
 8007786:	2108      	movs	r1, #8
 8007788:	4802      	ldr	r0, [pc, #8]	; (8007794 <nor_cs_assert+0x14>)
 800778a:	f002 fb89 	bl	8009ea0 <HAL_GPIO_WritePin>
}
 800778e:	bf00      	nop
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40020c00 	.word	0x40020c00

08007798 <nor_cs_deassert>:

void nor_cs_deassert(){
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800779c:	2201      	movs	r2, #1
 800779e:	2108      	movs	r1, #8
 80077a0:	4802      	ldr	r0, [pc, #8]	; (80077ac <nor_cs_deassert+0x14>)
 80077a2:	f002 fb7d 	bl	8009ea0 <HAL_GPIO_WritePin>
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40020c00 	.word	0x40020c00

080077b0 <nor_spi_tx>:

void nor_spi_tx(uint8_t *pData, uint32_t Size){
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Transmit(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 80077ba:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <nor_spi_tx+0x28>)
 80077bc:	2200      	movs	r2, #0
 80077be:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, pData, Size, 1000);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	4804      	ldr	r0, [pc, #16]	; (80077dc <nor_spi_tx+0x2c>)
 80077cc:	f004 f9d5 	bl	800bb7a <HAL_SPI_Transmit>
//	while (DmaEnd == 0);
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	2000020c 	.word	0x2000020c
 80077dc:	20000528 	.word	0x20000528

080077e0 <nor_spi_rx>:

void nor_spi_rx(uint8_t *pData, uint32_t Size){
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Receive(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 80077ea:	4b07      	ldr	r3, [pc, #28]	; (8007808 <nor_spi_rx+0x28>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi3, pData, Size, 1000);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4804      	ldr	r0, [pc, #16]	; (800780c <nor_spi_rx+0x2c>)
 80077fc:	f004 faf9 	bl	800bdf2 <HAL_SPI_Receive>
//	DmaEnd =0;
//	while (DmaEnd == 0);
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	2000020c 	.word	0x2000020c
 800780c:	20000528 	.word	0x20000528

08007810 <__init_nor>:

void __init_nor(){
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
	Nor.config.CsAssert = nor_cs_assert;
 8007814:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <__init_nor+0x38>)
 8007816:	4a0d      	ldr	r2, [pc, #52]	; (800784c <__init_nor+0x3c>)
 8007818:	609a      	str	r2, [r3, #8]
	Nor.config.CsDeassert = nor_cs_deassert;
 800781a:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <__init_nor+0x38>)
 800781c:	4a0c      	ldr	r2, [pc, #48]	; (8007850 <__init_nor+0x40>)
 800781e:	60da      	str	r2, [r3, #12]
	Nor.config.DelayUs = nor_delay_us;
 8007820:	4b09      	ldr	r3, [pc, #36]	; (8007848 <__init_nor+0x38>)
 8007822:	4a0c      	ldr	r2, [pc, #48]	; (8007854 <__init_nor+0x44>)
 8007824:	611a      	str	r2, [r3, #16]
	Nor.config.SpiRxFxn = nor_spi_rx;
 8007826:	4b08      	ldr	r3, [pc, #32]	; (8007848 <__init_nor+0x38>)
 8007828:	4a0b      	ldr	r2, [pc, #44]	; (8007858 <__init_nor+0x48>)
 800782a:	605a      	str	r2, [r3, #4]
	Nor.config.SpiTxFxn = nor_spi_tx;
 800782c:	4b06      	ldr	r3, [pc, #24]	; (8007848 <__init_nor+0x38>)
 800782e:	4a0b      	ldr	r2, [pc, #44]	; (800785c <__init_nor+0x4c>)
 8007830:	601a      	str	r2, [r3, #0]

	if (NOR_Init(&Nor) != NOR_OK){ //NOR_Init
 8007832:	4805      	ldr	r0, [pc, #20]	; (8007848 <__init_nor+0x38>)
 8007834:	f000 fe83 	bl	800853e <NOR_Init>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <__init_nor+0x32>
		Error_Handler();
 800783e:	f000 fd51 	bl	80082e4 <Error_Handler>
	}
}
 8007842:	bf00      	nop
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	200007c8 	.word	0x200007c8
 800784c:	08007781 	.word	0x08007781
 8007850:	08007799 	.word	0x08007799
 8007854:	08007769 	.word	0x08007769
 8007858:	080077e1 	.word	0x080077e1
 800785c:	080077b1 	.word	0x080077b1

08007860 <_fs_read>:

/** Start LittleFs **/

int _fs_read(const struct lfs_config *c, lfs_block_t block,
            lfs_off_t off, void *buffer, lfs_size_t size){
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]

	if (NOR_ReadSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	4806      	ldr	r0, [pc, #24]	; (8007894 <_fs_read+0x34>)
 800787a:	f001 f8b3 	bl	80089e4 <NOR_ReadSector>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <_fs_read+0x28>
		return 0;
 8007884:	2300      	movs	r3, #0
 8007886:	e001      	b.n	800788c <_fs_read+0x2c>
	}

	return LFS_ERR_IO;
 8007888:	f06f 0304 	mvn.w	r3, #4
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200007c8 	.word	0x200007c8

08007898 <_fs_write>:

int _fs_write(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, const void *buffer, lfs_size_t size){
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]

	if (NOR_WriteSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	4806      	ldr	r0, [pc, #24]	; (80078cc <_fs_write+0x34>)
 80078b2:	f000 fff1 	bl	8008898 <NOR_WriteSector>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <_fs_write+0x28>
		return 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	e001      	b.n	80078c4 <_fs_write+0x2c>
	}

	return LFS_ERR_IO;
 80078c0:	f06f 0304 	mvn.w	r3, #4
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	200007c8 	.word	0x200007c8

080078d0 <_fs_erase>:

int _fs_erase(const struct lfs_config *c, lfs_block_t block){
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
	if (NOR_EraseSector(&Nor, block) == NOR_OK){
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	4806      	ldr	r0, [pc, #24]	; (80078f8 <_fs_erase+0x28>)
 80078de:	f000 ff47 	bl	8008770 <NOR_EraseSector>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <_fs_erase+0x1c>
		return 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e001      	b.n	80078f0 <_fs_erase+0x20>
	}

	return LFS_ERR_IO;
 80078ec:	f06f 0304 	mvn.w	r3, #4
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	200007c8 	.word	0x200007c8

080078fc <_fs_sync>:

int _fs_sync(const struct lfs_config *c){
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
	return 0;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
	...

08007914 <list_files>:

// Function to list all files and directories in the filesystem
void list_files(lfs_t *lfs) {
 8007914:	b580      	push	{r7, lr}
 8007916:	b0ec      	sub	sp, #432	; 0x1b0
 8007918:	af00      	add	r7, sp, #0
 800791a:	1d3b      	adds	r3, r7, #4
 800791c:	6018      	str	r0, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;

    // Open the root directory
    int err = lfs_dir_open(lfs, &dir, "/");
 800791e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8007922:	1d3b      	adds	r3, r7, #4
 8007924:	4a35      	ldr	r2, [pc, #212]	; (80079fc <list_files+0xe8>)
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	f7ff fdee 	bl	8007508 <lfs_dir_open>
 800792c:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    if (err) {
 8007930:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <list_files+0x2c>
        printf("Failed to open directory\n");
 8007938:	4831      	ldr	r0, [pc, #196]	; (8007a00 <list_files+0xec>)
 800793a:	f009 ff1f 	bl	801177c <puts>
 800793e:	e059      	b.n	80079f4 <list_files+0xe0>
        return;
    }

    // Loop through all files in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 8007940:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007944:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8007948:	1d3b      	adds	r3, r7, #4
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	f7ff fe24 	bl	8007598 <lfs_dir_read>
 8007950:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
        if (err < 0) {
 8007954:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007958:	2b00      	cmp	r3, #0
 800795a:	da03      	bge.n	8007964 <list_files+0x50>
            printf("Failed to read directory\n");
 800795c:	4829      	ldr	r0, [pc, #164]	; (8007a04 <list_files+0xf0>)
 800795e:	f009 ff0d 	bl	801177c <puts>
            break;
 8007962:	e040      	b.n	80079e6 <list_files+0xd2>
        }

        // If no more files, break
        if (err == 0) {
 8007964:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007968:	2b00      	cmp	r3, #0
 800796a:	d03b      	beq.n	80079e4 <list_files+0xd0>
            break;
        }
        uint8_t dir[100];
        // Print the type and name of the file
        if (info.type == LFS_TYPE_REG) {
 800796c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d118      	bne.n	80079a8 <list_files+0x94>
            sprintf(dir,"File: %s\n\0", info.name);
 8007976:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800797a:	f103 0208 	add.w	r2, r3, #8
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	4921      	ldr	r1, [pc, #132]	; (8007a08 <list_files+0xf4>)
 8007984:	4618      	mov	r0, r3
 8007986:	f009 ff45 	bl	8011814 <siprintf>
            HAL_UART_Transmit(&huart7, dir, strlen(dir),1000);
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	4618      	mov	r0, r3
 8007990:	f7f8 fc38 	bl	8000204 <strlen>
 8007994:	4603      	mov	r3, r0
 8007996:	b29a      	uxth	r2, r3
 8007998:	f107 010c 	add.w	r1, r7, #12
 800799c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079a0:	481a      	ldr	r0, [pc, #104]	; (8007a0c <list_files+0xf8>)
 80079a2:	f004 fe56 	bl	800c652 <HAL_UART_Transmit>
 80079a6:	e7cb      	b.n	8007940 <list_files+0x2c>
        } else if (info.type == LFS_TYPE_DIR) {
 80079a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d1c6      	bne.n	8007940 <list_files+0x2c>
        	sprintf(dir,"Directory: %s\n\0", info.name);
 80079b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80079b6:	f103 0208 	add.w	r2, r3, #8
 80079ba:	f107 030c 	add.w	r3, r7, #12
 80079be:	4914      	ldr	r1, [pc, #80]	; (8007a10 <list_files+0xfc>)
 80079c0:	4618      	mov	r0, r3
 80079c2:	f009 ff27 	bl	8011814 <siprintf>

            HAL_UART_Transmit(&huart7, dir, strlen(dir),1000);
 80079c6:	f107 030c 	add.w	r3, r7, #12
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7f8 fc1a 	bl	8000204 <strlen>
 80079d0:	4603      	mov	r3, r0
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f107 010c 	add.w	r1, r7, #12
 80079d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079dc:	480b      	ldr	r0, [pc, #44]	; (8007a0c <list_files+0xf8>)
 80079de:	f004 fe38 	bl	800c652 <HAL_UART_Transmit>
    while (true) {
 80079e2:	e7ad      	b.n	8007940 <list_files+0x2c>
            break;
 80079e4:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 80079e6:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80079ea:	1d3b      	adds	r3, r7, #4
 80079ec:	4611      	mov	r1, r2
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	f7ff fdbc 	bl	800756c <lfs_dir_close>
}
 80079f4:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	08012f38 	.word	0x08012f38
 8007a00:	08012f3c 	.word	0x08012f3c
 8007a04:	08012f58 	.word	0x08012f58
 8007a08:	08012f74 	.word	0x08012f74
 8007a0c:	20000490 	.word	0x20000490
 8007a10:	08012f80 	.word	0x08012f80

08007a14 <__init_littefs>:

void __init_littefs(){
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
	// because of static qualifier, this variable
	// will have a dedicated address
	static struct lfs_config LfsConfig = {0};
		int Error;

		LfsConfig.read_size = 256;
 8007a1a:	4b21      	ldr	r3, [pc, #132]	; (8007aa0 <__init_littefs+0x8c>)
 8007a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a20:	615a      	str	r2, [r3, #20]
		LfsConfig.prog_size = 256;
 8007a22:	4b1f      	ldr	r3, [pc, #124]	; (8007aa0 <__init_littefs+0x8c>)
 8007a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a28:	619a      	str	r2, [r3, #24]
		LfsConfig.block_size = Nor.info.u16SectorSize;
 8007a2a:	4b1e      	ldr	r3, [pc, #120]	; (8007aa4 <__init_littefs+0x90>)
 8007a2c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4b1b      	ldr	r3, [pc, #108]	; (8007aa0 <__init_littefs+0x8c>)
 8007a32:	61da      	str	r2, [r3, #28]
		LfsConfig.block_count =  16384;//Nor.info.u32SectorCount;
 8007a34:	4b1a      	ldr	r3, [pc, #104]	; (8007aa0 <__init_littefs+0x8c>)
 8007a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a3a:	621a      	str	r2, [r3, #32]
		LfsConfig.cache_size = Nor.info.u16PageSize;
 8007a3c:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <__init_littefs+0x90>)
 8007a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a40:	461a      	mov	r2, r3
 8007a42:	4b17      	ldr	r3, [pc, #92]	; (8007aa0 <__init_littefs+0x8c>)
 8007a44:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig.lookahead_size = 8;//Nor.info.u32SectorCount/8;
 8007a46:	4b16      	ldr	r3, [pc, #88]	; (8007aa0 <__init_littefs+0x8c>)
 8007a48:	2208      	movs	r2, #8
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig.block_cycles = 15000;
 8007a4c:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <__init_littefs+0x8c>)
 8007a4e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007a52:	625a      	str	r2, [r3, #36]	; 0x24

		LfsConfig.read = _fs_read;
 8007a54:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <__init_littefs+0x8c>)
 8007a56:	4a14      	ldr	r2, [pc, #80]	; (8007aa8 <__init_littefs+0x94>)
 8007a58:	605a      	str	r2, [r3, #4]
		LfsConfig.prog = _fs_write;
 8007a5a:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <__init_littefs+0x8c>)
 8007a5c:	4a13      	ldr	r2, [pc, #76]	; (8007aac <__init_littefs+0x98>)
 8007a5e:	609a      	str	r2, [r3, #8]
		LfsConfig.erase = _fs_erase;
 8007a60:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <__init_littefs+0x8c>)
 8007a62:	4a13      	ldr	r2, [pc, #76]	; (8007ab0 <__init_littefs+0x9c>)
 8007a64:	60da      	str	r2, [r3, #12]
		LfsConfig.sync = _fs_sync;
 8007a66:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <__init_littefs+0x8c>)
 8007a68:	4a12      	ldr	r2, [pc, #72]	; (8007ab4 <__init_littefs+0xa0>)
 8007a6a:	611a      	str	r2, [r3, #16]

		Error = lfs_mount(&Lfs, &LfsConfig);
 8007a6c:	490c      	ldr	r1, [pc, #48]	; (8007aa0 <__init_littefs+0x8c>)
 8007a6e:	4812      	ldr	r0, [pc, #72]	; (8007ab8 <__init_littefs+0xa4>)
 8007a70:	f7ff fc48 	bl	8007304 <lfs_mount>
 8007a74:	6078      	str	r0, [r7, #4]
		if (Error != LFS_ERR_OK){
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00d      	beq.n	8007a98 <__init_littefs+0x84>
			lfs_format(&Lfs, &LfsConfig);
 8007a7c:	4908      	ldr	r1, [pc, #32]	; (8007aa0 <__init_littefs+0x8c>)
 8007a7e:	480e      	ldr	r0, [pc, #56]	; (8007ab8 <__init_littefs+0xa4>)
 8007a80:	f7ff fc2a 	bl	80072d8 <lfs_format>
			Error = lfs_mount(&Lfs, &LfsConfig);
 8007a84:	4906      	ldr	r1, [pc, #24]	; (8007aa0 <__init_littefs+0x8c>)
 8007a86:	480c      	ldr	r0, [pc, #48]	; (8007ab8 <__init_littefs+0xa4>)
 8007a88:	f7ff fc3c 	bl	8007304 <lfs_mount>
 8007a8c:	6078      	str	r0, [r7, #4]
			if (Error != LFS_ERR_OK){
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <__init_littefs+0x84>
				Error_Handler();
 8007a94:	f000 fc26 	bl	80082e4 <Error_Handler>
			}
		}

}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000210 	.word	0x20000210
 8007aa4:	200007c8 	.word	0x200007c8
 8007aa8:	08007861 	.word	0x08007861
 8007aac:	08007899 	.word	0x08007899
 8007ab0:	080078d1 	.word	0x080078d1
 8007ab4:	080078fd 	.word	0x080078fd
 8007ab8:	20000818 	.word	0x20000818

08007abc <list_files_with_size>:


#define PATH_MAX_LEN 256

// Recursive function to list files and directories with full paths
void list_files_with_size(lfs_t *lfs, const char *path) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8007ac2:	af02      	add	r7, sp, #8
 8007ac4:	1d3b      	adds	r3, r7, #4
 8007ac6:	6018      	str	r0, [r3, #0]
 8007ac8:	463b      	mov	r3, r7
 8007aca:	6019      	str	r1, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;

    // Open the directory at the given path
    int err = lfs_dir_open(lfs, &dir, path);
 8007acc:	463a      	mov	r2, r7
 8007ace:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8007ad2:	1d3b      	adds	r3, r7, #4
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	f7ff fd16 	bl	8007508 <lfs_dir_open>
 8007adc:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
    if (err) {
 8007ae0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <list_files_with_size+0x38>
        printf("Failed to open directory: %s\n", path);
 8007ae8:	463b      	mov	r3, r7
 8007aea:	6819      	ldr	r1, [r3, #0]
 8007aec:	4844      	ldr	r0, [pc, #272]	; (8007c00 <list_files_with_size+0x144>)
 8007aee:	f009 fdbf 	bl	8011670 <iprintf>
 8007af2:	e081      	b.n	8007bf8 <list_files_with_size+0x13c>
        return;
    }

    // Loop through all files in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 8007af4:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8007af8:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8007afc:	1d3b      	adds	r3, r7, #4
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	f7ff fd4a 	bl	8007598 <lfs_dir_read>
 8007b04:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
        if (err < 0) {
 8007b08:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	da05      	bge.n	8007b1c <list_files_with_size+0x60>
            printf("Failed to read directory: %s\n", path);
 8007b10:	463b      	mov	r3, r7
 8007b12:	6819      	ldr	r1, [r3, #0]
 8007b14:	483b      	ldr	r0, [pc, #236]	; (8007c04 <list_files_with_size+0x148>)
 8007b16:	f009 fdab 	bl	8011670 <iprintf>
            break;
 8007b1a:	e066      	b.n	8007bea <list_files_with_size+0x12e>
        }

        // If no more files, break
        if (err == 0) {
 8007b1c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d061      	beq.n	8007be8 <list_files_with_size+0x12c>
            break;
        }

        // Build the full path for the current file/directory
        char full_path[PATH_MAX_LEN];
        snprintf(full_path, sizeof(full_path), "%s/%s", path, info.name);
 8007b24:	463b      	mov	r3, r7
 8007b26:	f107 000c 	add.w	r0, r7, #12
 8007b2a:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8007b2e:	3208      	adds	r2, #8
 8007b30:	9200      	str	r2, [sp, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a34      	ldr	r2, [pc, #208]	; (8007c08 <list_files_with_size+0x14c>)
 8007b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b3a:	f009 fe37 	bl	80117ac <sniprintf>
        char pa[500];
        // Check if the entry is a file or directory
        if (info.type == LFS_TYPE_REG) {
 8007b3e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d118      	bne.n	8007b7a <list_files_with_size+0xbe>
            sprintf(pa,"File: %s, Size: %ld bytes\n", full_path, info.size);
 8007b48:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f107 020c 	add.w	r2, r7, #12
 8007b52:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8007b56:	492d      	ldr	r1, [pc, #180]	; (8007c0c <list_files_with_size+0x150>)
 8007b58:	f009 fe5c 	bl	8011814 <siprintf>
            HAL_UART_Transmit(&huart7, pa, strlen(pa),1000);
 8007b5c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7f8 fb4f 	bl	8000204 <strlen>
 8007b66:	4603      	mov	r3, r0
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8007b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b72:	4827      	ldr	r0, [pc, #156]	; (8007c10 <list_files_with_size+0x154>)
 8007b74:	f004 fd6d 	bl	800c652 <HAL_UART_Transmit>
 8007b78:	e7bc      	b.n	8007af4 <list_files_with_size+0x38>
        } else if (info.type == LFS_TYPE_DIR && strcmp(info.name, ".") != 0 && strcmp(info.name, "..") != 0) {
 8007b7a:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d1b7      	bne.n	8007af4 <list_files_with_size+0x38>
 8007b84:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8007b88:	3308      	adds	r3, #8
 8007b8a:	4922      	ldr	r1, [pc, #136]	; (8007c14 <list_files_with_size+0x158>)
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7f8 fb2f 	bl	80001f0 <strcmp>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0ad      	beq.n	8007af4 <list_files_with_size+0x38>
 8007b98:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	491e      	ldr	r1, [pc, #120]	; (8007c18 <list_files_with_size+0x15c>)
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7f8 fb25 	bl	80001f0 <strcmp>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0a3      	beq.n	8007af4 <list_files_with_size+0x38>
            sprintf(pa,"Directory: %s\n", full_path);
 8007bac:	f107 020c 	add.w	r2, r7, #12
 8007bb0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007bb4:	4919      	ldr	r1, [pc, #100]	; (8007c1c <list_files_with_size+0x160>)
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f009 fe2c 	bl	8011814 <siprintf>
            HAL_UART_Transmit(&huart7, pa, strlen(pa),1000);
 8007bbc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7f8 fb1f 	bl	8000204 <strlen>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8007bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bd2:	480f      	ldr	r0, [pc, #60]	; (8007c10 <list_files_with_size+0x154>)
 8007bd4:	f004 fd3d 	bl	800c652 <HAL_UART_Transmit>
            // Recursively list the contents of the directory
            list_files_with_size(lfs, full_path);
 8007bd8:	f107 020c 	add.w	r2, r7, #12
 8007bdc:	1d3b      	adds	r3, r7, #4
 8007bde:	4611      	mov	r1, r2
 8007be0:	6818      	ldr	r0, [r3, #0]
 8007be2:	f7ff ff6b 	bl	8007abc <list_files_with_size>
    while (true) {
 8007be6:	e785      	b.n	8007af4 <list_files_with_size+0x38>
            break;
 8007be8:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 8007bea:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8007bee:	1d3b      	adds	r3, r7, #4
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	f7ff fcba 	bl	800756c <lfs_dir_close>
}
 8007bf8:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	08012f90 	.word	0x08012f90
 8007c04:	08012fb0 	.word	0x08012fb0
 8007c08:	08012fd0 	.word	0x08012fd0
 8007c0c:	08012fd8 	.word	0x08012fd8
 8007c10:	20000490 	.word	0x20000490
 8007c14:	08012ff4 	.word	0x08012ff4
 8007c18:	08012ff8 	.word	0x08012ff8
 8007c1c:	08012ffc 	.word	0x08012ffc

08007c20 <__init_storage>:
void __init_storage(){
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
	__init_nor();
 8007c24:	f7ff fdf4 	bl	8007810 <__init_nor>
	__init_littefs();
 8007c28:	f7ff fef4 	bl	8007a14 <__init_littefs>
}
 8007c2c:	bf00      	nop
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c30:	b5b0      	push	{r4, r5, r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c36:	f001 fadb 	bl	80091f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c3a:	f000 f889 	bl	8007d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c3e:	f000 fa55 	bl	80080ec <MX_GPIO_Init>
  MX_SPI3_Init();
 8007c42:	f000 f993 	bl	8007f6c <MX_SPI3_Init>
  MX_UART7_Init();
 8007c46:	f000 f9fd 	bl	8008044 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8007c4a:	f008 fbf7 	bl	801043c <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8007c4e:	f000 f9c3 	bl	8007fd8 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8007c52:	f000 fa21 	bl	8008098 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8007c56:	f000 f8e5 	bl	8007e24 <MX_ADC1_Init>
  MX_ADC3_Init();
 8007c5a:	f000 f935 	bl	8007ec8 <MX_ADC3_Init>
	//	  Sector_Erase_4B(&hspi3, add, 64);
	//	  add+=65536;
	//  }

	  // myprintf("Starting LittleFS application........\n");
    HAL_Delay(100);
 8007c5e:	2064      	movs	r0, #100	; 0x64
 8007c60:	f001 fb38 	bl	80092d4 <HAL_Delay>

  HAL_UART_Transmit(&huart7,"EPDM is starting *********\n", sizeof("EPDM is starting *********\n"),1000);
 8007c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c68:	221c      	movs	r2, #28
 8007c6a:	492c      	ldr	r1, [pc, #176]	; (8007d1c <main+0xec>)
 8007c6c:	482c      	ldr	r0, [pc, #176]	; (8007d20 <main+0xf0>)
 8007c6e:	f004 fcf0 	bl	800c652 <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart7,"Chip erase starting....\n", sizeof("Chip erase starting....\n"),1000);
 8007c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c76:	2219      	movs	r2, #25
 8007c78:	492a      	ldr	r1, [pc, #168]	; (8007d24 <main+0xf4>)
 8007c7a:	4829      	ldr	r0, [pc, #164]	; (8007d20 <main+0xf0>)
 8007c7c:	f004 fce9 	bl	800c652 <HAL_UART_Transmit>
//  Chip_Erase(&hspi3);

  HAL_UART_Transmit(&huart7,"Chip erase ending....\n", sizeof("Chip erase ending....\n"),1000);
 8007c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c84:	2217      	movs	r2, #23
 8007c86:	4928      	ldr	r1, [pc, #160]	; (8007d28 <main+0xf8>)
 8007c88:	4825      	ldr	r0, [pc, #148]	; (8007d20 <main+0xf0>)
 8007c8a:	f004 fce2 	bl	800c652 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart7,"Chip erase ending....\n", sizeof("Chip erase ending....\n"),1000);
 8007c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c92:	2217      	movs	r2, #23
 8007c94:	4924      	ldr	r1, [pc, #144]	; (8007d28 <main+0xf8>)
 8007c96:	4822      	ldr	r0, [pc, #136]	; (8007d20 <main+0xf0>)
 8007c98:	f004 fcdb 	bl	800c652 <HAL_UART_Transmit>

  __init_storage();
 8007c9c:	f7ff ffc0 	bl	8007c20 <__init_storage>
  list_files(&Lfs);
 8007ca0:	4822      	ldr	r0, [pc, #136]	; (8007d2c <main+0xfc>)
 8007ca2:	f7ff fe37 	bl	8007914 <list_files>
//  char path[200];
  char txt[]="sangam is writing it manually";
 8007ca6:	4b22      	ldr	r3, [pc, #136]	; (8007d30 <main+0x100>)
 8007ca8:	463c      	mov	r4, r7
 8007caa:	461d      	mov	r5, r3
 8007cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007cb4:	c407      	stmia	r4!, {r0, r1, r2}
 8007cb6:	8023      	strh	r3, [r4, #0]

	__init_littefs();
 8007cb8:	f7ff feac 	bl	8007a14 <__init_littefs>
  list_files_with_size(&Lfs, "/");
 8007cbc:	491d      	ldr	r1, [pc, #116]	; (8007d34 <main+0x104>)
 8007cbe:	481b      	ldr	r0, [pc, #108]	; (8007d2c <main+0xfc>)
 8007cc0:	f7ff fefc 	bl	8007abc <list_files_with_size>
  		  lfs_file_open(&Lfs, &File, "satHealth.txt", LFS_O_RDWR  |LFS_O_APPEND);
 8007cc4:	f640 0303 	movw	r3, #2051	; 0x803
 8007cc8:	4a1b      	ldr	r2, [pc, #108]	; (8007d38 <main+0x108>)
 8007cca:	491c      	ldr	r1, [pc, #112]	; (8007d3c <main+0x10c>)
 8007ccc:	4817      	ldr	r0, [pc, #92]	; (8007d2c <main+0xfc>)
 8007cce:	f7ff fb2f 	bl	8007330 <lfs_file_open>
  		  lfs_file_write(&Lfs, &File, &txt, sizeof(txt));
 8007cd2:	463a      	mov	r2, r7
 8007cd4:	231e      	movs	r3, #30
 8007cd6:	4919      	ldr	r1, [pc, #100]	; (8007d3c <main+0x10c>)
 8007cd8:	4814      	ldr	r0, [pc, #80]	; (8007d2c <main+0xfc>)
 8007cda:	f7ff fbb9 	bl	8007450 <lfs_file_write>
  		  lfs_file_close(&Lfs, &File);
 8007cde:	4917      	ldr	r1, [pc, #92]	; (8007d3c <main+0x10c>)
 8007ce0:	4812      	ldr	r0, [pc, #72]	; (8007d2c <main+0xfc>)
 8007ce2:	f7ff fb59 	bl	8007398 <lfs_file_close>
  read_file_from_littlefs(&Lfs, "satHealth.txt");
 8007ce6:	4914      	ldr	r1, [pc, #80]	; (8007d38 <main+0x108>)
 8007ce8:	4810      	ldr	r0, [pc, #64]	; (8007d2c <main+0xfc>)
 8007cea:	f7ff fcab 	bl	8007644 <read_file_from_littlefs>
//  read_file_from_littlefs(&Lfs, "sat_health.txt");
  read_file_from_littlefs(&Lfs, "flags.txt");
 8007cee:	4914      	ldr	r1, [pc, #80]	; (8007d40 <main+0x110>)
 8007cf0:	480e      	ldr	r0, [pc, #56]	; (8007d2c <main+0xfc>)
 8007cf2:	f7ff fca7 	bl	8007644 <read_file_from_littlefs>
//    //   lfs_file_read(&Lfs, &File, &Counter, sizeof(app_count_t));
//
//       lfs_file_read(&Lfs, &File, &tx, sizeof(tx));
//       HAL_UART_Transmit(&huart7,tx,strlen(tx),1000);
//       lfs_file_close(&Lfs, &File);
   Counter.bootCount += 1;
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <main+0x114>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	4a11      	ldr	r2, [pc, #68]	; (8007d44 <main+0x114>)
 8007cfe:	6053      	str	r3, [r2, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { sprintf(Text, "Bt %lu |Ct %lu\n", Counter.bootCount, Counter.secCount);
 8007d00:	4b10      	ldr	r3, [pc, #64]	; (8007d44 <main+0x114>)
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	4b0f      	ldr	r3, [pc, #60]	; (8007d44 <main+0x114>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	490f      	ldr	r1, [pc, #60]	; (8007d48 <main+0x118>)
 8007d0a:	4810      	ldr	r0, [pc, #64]	; (8007d4c <main+0x11c>)
 8007d0c:	f009 fd82 	bl	8011814 <siprintf>
//		  lfs_file_close(&Lfs, &File);

//		  while ((HAL_GetTick() - HalTickAux) < 1000);
//		  HAL_Delay(1000);

		  Counter.secCount += 1;
 8007d10:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <main+0x114>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3301      	adds	r3, #1
 8007d16:	4a0b      	ldr	r2, [pc, #44]	; (8007d44 <main+0x114>)
 8007d18:	6013      	str	r3, [r2, #0]
  { sprintf(Text, "Bt %lu |Ct %lu\n", Counter.bootCount, Counter.secCount);
 8007d1a:	e7f1      	b.n	8007d00 <main+0xd0>
 8007d1c:	0801300c 	.word	0x0801300c
 8007d20:	20000490 	.word	0x20000490
 8007d24:	08013028 	.word	0x08013028
 8007d28:	08013044 	.word	0x08013044
 8007d2c:	20000818 	.word	0x20000818
 8007d30:	08013088 	.word	0x08013088
 8007d34:	08012f38 	.word	0x08012f38
 8007d38:	0801305c 	.word	0x0801305c
 8007d3c:	200004d4 	.word	0x200004d4
 8007d40:	0801306c 	.word	0x0801306c
 8007d44:	20000204 	.word	0x20000204
 8007d48:	08013078 	.word	0x08013078
 8007d4c:	20000894 	.word	0x20000894

08007d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b094      	sub	sp, #80	; 0x50
 8007d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d56:	f107 0320 	add.w	r3, r7, #32
 8007d5a:	2230      	movs	r2, #48	; 0x30
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f009 f8e6 	bl	8010f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d64:	f107 030c 	add.w	r3, r7, #12
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	605a      	str	r2, [r3, #4]
 8007d6e:	609a      	str	r2, [r3, #8]
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d74:	2300      	movs	r3, #0
 8007d76:	60bb      	str	r3, [r7, #8]
 8007d78:	4b28      	ldr	r3, [pc, #160]	; (8007e1c <SystemClock_Config+0xcc>)
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	4a27      	ldr	r2, [pc, #156]	; (8007e1c <SystemClock_Config+0xcc>)
 8007d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d82:	6413      	str	r3, [r2, #64]	; 0x40
 8007d84:	4b25      	ldr	r3, [pc, #148]	; (8007e1c <SystemClock_Config+0xcc>)
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d8c:	60bb      	str	r3, [r7, #8]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d90:	2300      	movs	r3, #0
 8007d92:	607b      	str	r3, [r7, #4]
 8007d94:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <SystemClock_Config+0xd0>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a21      	ldr	r2, [pc, #132]	; (8007e20 <SystemClock_Config+0xd0>)
 8007d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	4b1f      	ldr	r3, [pc, #124]	; (8007e20 <SystemClock_Config+0xd0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007dac:	2301      	movs	r3, #1
 8007dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007db6:	2302      	movs	r3, #2
 8007db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8007dc0:	230c      	movs	r3, #12
 8007dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007dc4:	23a8      	movs	r3, #168	; 0xa8
 8007dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007dcc:	2307      	movs	r3, #7
 8007dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007dd0:	f107 0320 	add.w	r3, r7, #32
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f003 f9ff 	bl	800b1d8 <HAL_RCC_OscConfig>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007de0:	f000 fa80 	bl	80082e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007de4:	230f      	movs	r3, #15
 8007de6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007de8:	2302      	movs	r3, #2
 8007dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007df0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007dfc:	f107 030c 	add.w	r3, r7, #12
 8007e00:	2105      	movs	r1, #5
 8007e02:	4618      	mov	r0, r3
 8007e04:	f003 fc60 	bl	800b6c8 <HAL_RCC_ClockConfig>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007e0e:	f000 fa69 	bl	80082e4 <Error_Handler>
  }
}
 8007e12:	bf00      	nop
 8007e14:	3750      	adds	r7, #80	; 0x50
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40023800 	.word	0x40023800
 8007e20:	40007000 	.word	0x40007000

08007e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	605a      	str	r2, [r3, #4]
 8007e32:	609a      	str	r2, [r3, #8]
 8007e34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007e36:	4b21      	ldr	r3, [pc, #132]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e38:	4a21      	ldr	r2, [pc, #132]	; (8007ec0 <MX_ADC1_Init+0x9c>)
 8007e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007e3c:	4b1f      	ldr	r3, [pc, #124]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007e44:	4b1d      	ldr	r3, [pc, #116]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007e4a:	4b1c      	ldr	r3, [pc, #112]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007e50:	4b1a      	ldr	r3, [pc, #104]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007e56:	4b19      	ldr	r3, [pc, #100]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007e5e:	4b17      	ldr	r3, [pc, #92]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007e64:	4b15      	ldr	r3, [pc, #84]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e66:	4a17      	ldr	r2, [pc, #92]	; (8007ec4 <MX_ADC1_Init+0xa0>)
 8007e68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007e6a:	4b14      	ldr	r3, [pc, #80]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007e70:	4b12      	ldr	r3, [pc, #72]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e72:	2201      	movs	r2, #1
 8007e74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007e76:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007e7e:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e80:	2201      	movs	r2, #1
 8007e82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007e84:	480d      	ldr	r0, [pc, #52]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007e86:	f001 fa49 	bl	800931c <HAL_ADC_Init>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007e90:	f000 fa28 	bl	80082e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4805      	ldr	r0, [pc, #20]	; (8007ebc <MX_ADC1_Init+0x98>)
 8007ea6:	f001 fa7d 	bl	80093a4 <HAL_ADC_ConfigChannel>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007eb0:	f000 fa18 	bl	80082e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007eb4:	bf00      	nop
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20000580 	.word	0x20000580
 8007ec0:	40012000 	.word	0x40012000
 8007ec4:	0f000001 	.word	0x0f000001

08007ec8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007ece:	463b      	mov	r3, r7
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	605a      	str	r2, [r3, #4]
 8007ed6:	609a      	str	r2, [r3, #8]
 8007ed8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8007eda:	4b21      	ldr	r3, [pc, #132]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007edc:	4a21      	ldr	r2, [pc, #132]	; (8007f64 <MX_ADC3_Init+0x9c>)
 8007ede:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007ee0:	4b1f      	ldr	r3, [pc, #124]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007ee2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ee6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8007ee8:	4b1d      	ldr	r3, [pc, #116]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8007eee:	4b1c      	ldr	r3, [pc, #112]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007efa:	4b19      	ldr	r3, [pc, #100]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007f02:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007f0a:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <MX_ADC3_Init+0xa0>)
 8007f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007f0e:	4b14      	ldr	r3, [pc, #80]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8007f14:	4b12      	ldr	r3, [pc, #72]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007f16:	2201      	movs	r2, #1
 8007f18:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8007f1a:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007f22:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007f28:	480d      	ldr	r0, [pc, #52]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007f2a:	f001 f9f7 	bl	800931c <HAL_ADC_Init>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8007f34:	f000 f9d6 	bl	80082e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007f38:	230e      	movs	r3, #14
 8007f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007f44:	463b      	mov	r3, r7
 8007f46:	4619      	mov	r1, r3
 8007f48:	4805      	ldr	r0, [pc, #20]	; (8007f60 <MX_ADC3_Init+0x98>)
 8007f4a:	f001 fa2b 	bl	80093a4 <HAL_ADC_ConfigChannel>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8007f54:	f000 f9c6 	bl	80082e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	200005c8 	.word	0x200005c8
 8007f64:	40012200 	.word	0x40012200
 8007f68:	0f000001 	.word	0x0f000001

08007f6c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007f70:	4b17      	ldr	r3, [pc, #92]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007f72:	4a18      	ldr	r2, [pc, #96]	; (8007fd4 <MX_SPI3_Init+0x68>)
 8007f74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007f76:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007f7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007f7e:	4b14      	ldr	r3, [pc, #80]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f84:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f8a:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f9c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007f9e:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007fa4:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007faa:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fb0:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007fb6:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007fb8:	220a      	movs	r2, #10
 8007fba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007fbc:	4804      	ldr	r0, [pc, #16]	; (8007fd0 <MX_SPI3_Init+0x64>)
 8007fbe:	f003 fd53 	bl	800ba68 <HAL_SPI_Init>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007fc8:	f000 f98c 	bl	80082e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007fcc:	bf00      	nop
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20000528 	.word	0x20000528
 8007fd4:	40003c00 	.word	0x40003c00

08007fd8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8007fdc:	4b17      	ldr	r3, [pc, #92]	; (800803c <MX_SPI4_Init+0x64>)
 8007fde:	4a18      	ldr	r2, [pc, #96]	; (8008040 <MX_SPI4_Init+0x68>)
 8007fe0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8007fe2:	4b16      	ldr	r3, [pc, #88]	; (800803c <MX_SPI4_Init+0x64>)
 8007fe4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007fe8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8007fea:	4b14      	ldr	r3, [pc, #80]	; (800803c <MX_SPI4_Init+0x64>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ff0:	4b12      	ldr	r3, [pc, #72]	; (800803c <MX_SPI4_Init+0x64>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ff6:	4b11      	ldr	r3, [pc, #68]	; (800803c <MX_SPI4_Init+0x64>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	; (800803c <MX_SPI4_Init+0x64>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8008002:	4b0e      	ldr	r3, [pc, #56]	; (800803c <MX_SPI4_Init+0x64>)
 8008004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008008:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800800a:	4b0c      	ldr	r3, [pc, #48]	; (800803c <MX_SPI4_Init+0x64>)
 800800c:	2208      	movs	r2, #8
 800800e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008010:	4b0a      	ldr	r3, [pc, #40]	; (800803c <MX_SPI4_Init+0x64>)
 8008012:	2200      	movs	r2, #0
 8008014:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8008016:	4b09      	ldr	r3, [pc, #36]	; (800803c <MX_SPI4_Init+0x64>)
 8008018:	2200      	movs	r2, #0
 800801a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800801c:	4b07      	ldr	r3, [pc, #28]	; (800803c <MX_SPI4_Init+0x64>)
 800801e:	2200      	movs	r2, #0
 8008020:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8008022:	4b06      	ldr	r3, [pc, #24]	; (800803c <MX_SPI4_Init+0x64>)
 8008024:	220a      	movs	r2, #10
 8008026:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8008028:	4804      	ldr	r0, [pc, #16]	; (800803c <MX_SPI4_Init+0x64>)
 800802a:	f003 fd1d 	bl	800ba68 <HAL_SPI_Init>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8008034:	f000 f956 	bl	80082e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8008038:	bf00      	nop
 800803a:	bd80      	pop	{r7, pc}
 800803c:	2000076c 	.word	0x2000076c
 8008040:	40013400 	.word	0x40013400

08008044 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8008048:	4b11      	ldr	r3, [pc, #68]	; (8008090 <MX_UART7_Init+0x4c>)
 800804a:	4a12      	ldr	r2, [pc, #72]	; (8008094 <MX_UART7_Init+0x50>)
 800804c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800804e:	4b10      	ldr	r3, [pc, #64]	; (8008090 <MX_UART7_Init+0x4c>)
 8008050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008054:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8008056:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <MX_UART7_Init+0x4c>)
 8008058:	2200      	movs	r2, #0
 800805a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800805c:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <MX_UART7_Init+0x4c>)
 800805e:	2200      	movs	r2, #0
 8008060:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8008062:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <MX_UART7_Init+0x4c>)
 8008064:	2200      	movs	r2, #0
 8008066:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8008068:	4b09      	ldr	r3, [pc, #36]	; (8008090 <MX_UART7_Init+0x4c>)
 800806a:	220c      	movs	r2, #12
 800806c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800806e:	4b08      	ldr	r3, [pc, #32]	; (8008090 <MX_UART7_Init+0x4c>)
 8008070:	2200      	movs	r2, #0
 8008072:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8008074:	4b06      	ldr	r3, [pc, #24]	; (8008090 <MX_UART7_Init+0x4c>)
 8008076:	2200      	movs	r2, #0
 8008078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800807a:	4805      	ldr	r0, [pc, #20]	; (8008090 <MX_UART7_Init+0x4c>)
 800807c:	f004 fa9c 	bl	800c5b8 <HAL_UART_Init>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8008086:	f000 f92d 	bl	80082e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800808a:	bf00      	nop
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20000490 	.word	0x20000490
 8008094:	40007800 	.word	0x40007800

08008098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800809c:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 800809e:	4a12      	ldr	r2, [pc, #72]	; (80080e8 <MX_USART1_UART_Init+0x50>)
 80080a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80080a2:	4b10      	ldr	r3, [pc, #64]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80080a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80080aa:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80080b0:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80080b6:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080be:	220c      	movs	r2, #12
 80080c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80080c2:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80080c8:	4b06      	ldr	r3, [pc, #24]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80080ce:	4805      	ldr	r0, [pc, #20]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080d0:	f004 fa72 	bl	800c5b8 <HAL_UART_Init>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80080da:	f000 f903 	bl	80082e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80080de:	bf00      	nop
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20000610 	.word	0x20000610
 80080e8:	40011000 	.word	0x40011000

080080ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08e      	sub	sp, #56	; 0x38
 80080f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	605a      	str	r2, [r3, #4]
 80080fc:	609a      	str	r2, [r3, #8]
 80080fe:	60da      	str	r2, [r3, #12]
 8008100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008102:	2300      	movs	r3, #0
 8008104:	623b      	str	r3, [r7, #32]
 8008106:	4b71      	ldr	r3, [pc, #452]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	4a70      	ldr	r2, [pc, #448]	; (80082cc <MX_GPIO_Init+0x1e0>)
 800810c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008110:	6313      	str	r3, [r2, #48]	; 0x30
 8008112:	4b6e      	ldr	r3, [pc, #440]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811a:	623b      	str	r3, [r7, #32]
 800811c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	4b6a      	ldr	r3, [pc, #424]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008126:	4a69      	ldr	r2, [pc, #420]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008128:	f043 0302 	orr.w	r3, r3, #2
 800812c:	6313      	str	r3, [r2, #48]	; 0x30
 800812e:	4b67      	ldr	r3, [pc, #412]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	61fb      	str	r3, [r7, #28]
 8008138:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800813a:	2300      	movs	r3, #0
 800813c:	61bb      	str	r3, [r7, #24]
 800813e:	4b63      	ldr	r3, [pc, #396]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008142:	4a62      	ldr	r2, [pc, #392]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008144:	f043 0308 	orr.w	r3, r3, #8
 8008148:	6313      	str	r3, [r2, #48]	; 0x30
 800814a:	4b60      	ldr	r3, [pc, #384]	; (80082cc <MX_GPIO_Init+0x1e0>)
 800814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	61bb      	str	r3, [r7, #24]
 8008154:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	4b5c      	ldr	r3, [pc, #368]	; (80082cc <MX_GPIO_Init+0x1e0>)
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	4a5b      	ldr	r2, [pc, #364]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008160:	f043 0304 	orr.w	r3, r3, #4
 8008164:	6313      	str	r3, [r2, #48]	; 0x30
 8008166:	4b59      	ldr	r3, [pc, #356]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008172:	2300      	movs	r3, #0
 8008174:	613b      	str	r3, [r7, #16]
 8008176:	4b55      	ldr	r3, [pc, #340]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817a:	4a54      	ldr	r2, [pc, #336]	; (80082cc <MX_GPIO_Init+0x1e0>)
 800817c:	f043 0301 	orr.w	r3, r3, #1
 8008180:	6313      	str	r3, [r2, #48]	; 0x30
 8008182:	4b52      	ldr	r3, [pc, #328]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	4b4e      	ldr	r3, [pc, #312]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	4a4d      	ldr	r2, [pc, #308]	; (80082cc <MX_GPIO_Init+0x1e0>)
 8008198:	f043 0310 	orr.w	r3, r3, #16
 800819c:	6313      	str	r3, [r2, #48]	; 0x30
 800819e:	4b4b      	ldr	r3, [pc, #300]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a2:	f003 0310 	and.w	r3, r3, #16
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	4b47      	ldr	r3, [pc, #284]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	4a46      	ldr	r2, [pc, #280]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b8:	6313      	str	r3, [r2, #48]	; 0x30
 80081ba:	4b44      	ldr	r3, [pc, #272]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80081c6:	2300      	movs	r3, #0
 80081c8:	607b      	str	r3, [r7, #4]
 80081ca:	4b40      	ldr	r3, [pc, #256]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	4a3f      	ldr	r2, [pc, #252]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081d0:	f043 0320 	orr.w	r3, r3, #32
 80081d4:	6313      	str	r3, [r2, #48]	; 0x30
 80081d6:	4b3d      	ldr	r3, [pc, #244]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	607b      	str	r3, [r7, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80081e2:	2300      	movs	r3, #0
 80081e4:	603b      	str	r3, [r7, #0]
 80081e6:	4b39      	ldr	r3, [pc, #228]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	4a38      	ldr	r2, [pc, #224]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f0:	6313      	str	r3, [r2, #48]	; 0x30
 80081f2:	4b36      	ldr	r3, [pc, #216]	; (80082cc <MX_GPIO_Init+0x1e0>)
 80081f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin, GPIO_PIN_RESET);
 80081fe:	2200      	movs	r2, #0
 8008200:	21d0      	movs	r1, #208	; 0xd0
 8008202:	4833      	ldr	r0, [pc, #204]	; (80082d0 <MX_GPIO_Init+0x1e4>)
 8008204:	f001 fe4c 	bl	8009ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAIN_FM_CS_GPIO_Port, MAIN_FM_CS_Pin, GPIO_PIN_RESET);
 8008208:	2200      	movs	r2, #0
 800820a:	2108      	movs	r1, #8
 800820c:	4831      	ldr	r0, [pc, #196]	; (80082d4 <MX_GPIO_Init+0x1e8>)
 800820e:	f001 fe47 	bl	8009ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_EN_Pin|MPU_INT_Pin, GPIO_PIN_RESET);
 8008212:	2200      	movs	r2, #0
 8008214:	2141      	movs	r1, #65	; 0x41
 8008216:	4830      	ldr	r0, [pc, #192]	; (80082d8 <MX_GPIO_Init+0x1ec>)
 8008218:	f001 fe42 	bl	8009ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin, GPIO_PIN_RESET);
 800821c:	2200      	movs	r2, #0
 800821e:	f641 4108 	movw	r1, #7176	; 0x1c08
 8008222:	482e      	ldr	r0, [pc, #184]	; (80082dc <MX_GPIO_Init+0x1f0>)
 8008224:	f001 fe3c 	bl	8009ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MAG_INT_Pin|CS_MAG_Pin, GPIO_PIN_RESET);
 8008228:	2200      	movs	r2, #0
 800822a:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800822e:	482c      	ldr	r0, [pc, #176]	; (80082e0 <MX_GPIO_Init+0x1f4>)
 8008230:	f001 fe36 	bl	8009ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SMSN_FM_CS_OBC_Pin MSN_FM_MODE_Pin EN_4V_DCDC_Pin */
  GPIO_InitStruct.Pin = SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin;
 8008234:	23d0      	movs	r3, #208	; 0xd0
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008238:	2301      	movs	r3, #1
 800823a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800823c:	2300      	movs	r3, #0
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008240:	2300      	movs	r3, #0
 8008242:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008248:	4619      	mov	r1, r3
 800824a:	4821      	ldr	r0, [pc, #132]	; (80082d0 <MX_GPIO_Init+0x1e4>)
 800824c:	f001 fc7c 	bl	8009b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAIN_FM_CS_Pin */
  GPIO_InitStruct.Pin = MAIN_FM_CS_Pin;
 8008250:	2308      	movs	r3, #8
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008254:	2301      	movs	r3, #1
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008258:	2300      	movs	r3, #0
 800825a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800825c:	2300      	movs	r3, #0
 800825e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MAIN_FM_CS_GPIO_Port, &GPIO_InitStruct);
 8008260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008264:	4619      	mov	r1, r3
 8008266:	481b      	ldr	r0, [pc, #108]	; (80082d4 <MX_GPIO_Init+0x1e8>)
 8008268:	f001 fc6e 	bl	8009b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_EN_Pin MPU_INT_Pin */
  GPIO_InitStruct.Pin = MUX_EN_Pin|MPU_INT_Pin;
 800826c:	2341      	movs	r3, #65	; 0x41
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008270:	2301      	movs	r3, #1
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008274:	2300      	movs	r3, #0
 8008276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008278:	2300      	movs	r3, #0
 800827a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800827c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008280:	4619      	mov	r1, r3
 8008282:	4815      	ldr	r0, [pc, #84]	; (80082d8 <MX_GPIO_Init+0x1ec>)
 8008284:	f001 fc60 	bl	8009b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_DRDY_Pin EN_4V_Pin EN_3V3_COM_Pin CS_MPU_Pin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin;
 8008288:	f641 4308 	movw	r3, #7176	; 0x1c08
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800828e:	2301      	movs	r3, #1
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008292:	2300      	movs	r3, #0
 8008294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008296:	2300      	movs	r3, #0
 8008298:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800829a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800829e:	4619      	mov	r1, r3
 80082a0:	480e      	ldr	r0, [pc, #56]	; (80082dc <MX_GPIO_Init+0x1f0>)
 80082a2:	f001 fc51 	bl	8009b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_INT_Pin CS_MAG_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|CS_MAG_Pin;
 80082a6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ac:	2301      	movs	r3, #1
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082b4:	2300      	movs	r3, #0
 80082b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80082b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082bc:	4619      	mov	r1, r3
 80082be:	4808      	ldr	r0, [pc, #32]	; (80082e0 <MX_GPIO_Init+0x1f4>)
 80082c0:	f001 fc42 	bl	8009b48 <HAL_GPIO_Init>

}
 80082c4:	bf00      	nop
 80082c6:	3738      	adds	r7, #56	; 0x38
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	40023800 	.word	0x40023800
 80082d0:	40022000 	.word	0x40022000
 80082d4:	40020c00 	.word	0x40020c00
 80082d8:	40021800 	.word	0x40021800
 80082dc:	40021c00 	.word	0x40021c00
 80082e0:	40021400 	.word	0x40021400

080082e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082e8:	b672      	cpsid	i
}
 80082ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082ec:	e7fe      	b.n	80082ec <Error_Handler+0x8>

080082ee <_nor_cs_assert>:
	_SELECT_SR3,
};

/* Functions */

static void _nor_cs_assert(nor_t *nor){
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
	nor->config.CsAssert();
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <_nor_cs_deassert>:

static void _nor_cs_deassert(nor_t *nor){
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	nor->config.CsDeassert();
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <_nor_spi_tx>:

static void _nor_spi_tx(nor_t *nor, uint8_t *txBuf, uint32_t size){
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	607a      	str	r2, [r7, #4]
	nor->config.SpiTxFxn(txBuf, size);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	68b8      	ldr	r0, [r7, #8]
 800832e:	4798      	blx	r3
}
 8008330:	bf00      	nop
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_nor_spi_rx>:

static void _nor_spi_rx(nor_t *nor, uint8_t *rxBuf, uint32_t size){
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
	nor->config.SpiRxFxn(rxBuf, size);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	68b8      	ldr	r0, [r7, #8]
 800834c:	4798      	blx	r3
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <_nor_delay_us>:

static void _nor_delay_us(nor_t *nor, uint32_t us){
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
	nor->config.DelayUs(us);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	6838      	ldr	r0, [r7, #0]
 8008366:	4798      	blx	r3
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <_nor_ReadID>:

static uint32_t _nor_ReadID(nor_t *nor)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	uint8_t JedecIdCmd = NOR_JEDEC_ID;
 8008378:	239e      	movs	r3, #158	; 0x9e
 800837a:	73fb      	strb	r3, [r7, #15]
	uint32_t ID = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	60bb      	str	r3, [r7, #8]

	_nor_cs_assert(nor);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff ffb4 	bl	80082ee <_nor_cs_assert>
	_nor_spi_tx(nor, &JedecIdCmd, sizeof(JedecIdCmd));
 8008386:	f107 030f 	add.w	r3, r7, #15
 800838a:	2201      	movs	r2, #1
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff ffc3 	bl	800831a <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&ID, 3);
 8008394:	f107 0308 	add.w	r3, r7, #8
 8008398:	2203      	movs	r2, #3
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff ffcb 	bl	8008338 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff ffae 	bl	8008304 <_nor_cs_deassert>

	return ID;
 80083a8:	68bb      	ldr	r3, [r7, #8]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <_nor_ReadUniqID>:

static uint64_t _nor_ReadUniqID(nor_t *nor)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b088      	sub	sp, #32
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
	uint8_t UniqueIdCmd = NOR_UNIQUE_ID;
 80083ba:	234b      	movs	r3, #75	; 0x4b
 80083bc:	77fb      	strb	r3, [r7, #31]
	uint64_t UniqueId = 0;
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t DummyU32 = (~0UL);
 80083ca:	f04f 33ff 	mov.w	r3, #4294967295
 80083ce:	60fb      	str	r3, [r7, #12]

	_nor_cs_assert(nor);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff ff8c 	bl	80082ee <_nor_cs_assert>
	_nor_spi_tx(nor, &UniqueIdCmd, sizeof(UniqueIdCmd));
 80083d6:	f107 031f 	add.w	r3, r7, #31
 80083da:	2201      	movs	r2, #1
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff ff9b 	bl	800831a <_nor_spi_tx>
	// this if the 4 dummy byte
	_nor_spi_tx(nor, (uint8_t*)&DummyU32, 4);
 80083e4:	f107 030c 	add.w	r3, r7, #12
 80083e8:	2204      	movs	r2, #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff ff94 	bl	800831a <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&UniqueId, sizeof(UniqueId));
 80083f2:	f107 0310 	add.w	r3, r7, #16
 80083f6:	2208      	movs	r2, #8
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff ff9c 	bl	8008338 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff ff7f 	bl	8008304 <_nor_cs_deassert>

	return UniqueId;
 8008406:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800840a:	4610      	mov	r0, r2
 800840c:	4619      	mov	r1, r3
 800840e:	3720      	adds	r7, #32
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <_nor_WriteEnable>:

static void _nor_WriteEnable(nor_t *nor)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	uint8_t WriteEnCmd = NOR_CMD_WRITE_EN;
 800841c:	2306      	movs	r3, #6
 800841e:	73fb      	strb	r3, [r7, #15]

	_nor_cs_assert(nor);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff ff64 	bl	80082ee <_nor_cs_assert>
	_nor_spi_tx(nor, &WriteEnCmd, sizeof(WriteEnCmd));
 8008426:	f107 030f 	add.w	r3, r7, #15
 800842a:	2201      	movs	r2, #1
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff ff73 	bl	800831a <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff ff65 	bl	8008304 <_nor_cs_deassert>
	// TODO Check if a delay was needed here
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <_nor_ReadStatusRegister>:
	_nor_spi_tx(nor, &WriteDisCmd, sizeof(WriteDisCmd));
	_nor_cs_deassert(nor);
}

uint8_t _nor_ReadStatusRegister(nor_t *nor, enum _nor_sr_select_e SelectSR)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0, ReadSRCmd;
 800844e:	2300      	movs	r3, #0
 8008450:	72fb      	strb	r3, [r7, #11]
	uint8_t *SrUpdateHandler;

	switch (SelectSR){
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d012      	beq.n	800847e <_nor_ReadStatusRegister+0x3c>
 8008458:	2b02      	cmp	r3, #2
 800845a:	dc16      	bgt.n	800848a <_nor_ReadStatusRegister+0x48>
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <_nor_ReadStatusRegister+0x24>
 8008460:	2b01      	cmp	r3, #1
 8008462:	d006      	beq.n	8008472 <_nor_ReadStatusRegister+0x30>
 8008464:	e011      	b.n	800848a <_nor_ReadStatusRegister+0x48>
	case _SELECT_SR1:
		ReadSRCmd = NOR_READ_SR1;
 8008466:	2305      	movs	r3, #5
 8008468:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3342      	adds	r3, #66	; 0x42
 800846e:	60fb      	str	r3, [r7, #12]
		break;
 8008470:	e00d      	b.n	800848e <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR2:
		ReadSRCmd = NOR_READ_SR2;
 8008472:	2370      	movs	r3, #112	; 0x70
 8008474:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3342      	adds	r3, #66	; 0x42
 800847a:	60fb      	str	r3, [r7, #12]
		break;
 800847c:	e007      	b.n	800848e <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR3:
		ReadSRCmd = NOR_READ_SR3;
 800847e:	2315      	movs	r3, #21
 8008480:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	3342      	adds	r3, #66	; 0x42
 8008486:	60fb      	str	r3, [r7, #12]
		break;
 8008488:	e001      	b.n	800848e <_nor_ReadStatusRegister+0x4c>
	default:
		return 0xFF;
 800848a:	23ff      	movs	r3, #255	; 0xff
 800848c:	e017      	b.n	80084be <_nor_ReadStatusRegister+0x7c>
	}
	_nor_cs_assert(nor);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7ff ff2d 	bl	80082ee <_nor_cs_assert>
	_nor_spi_tx(nor, &ReadSRCmd, sizeof(ReadSRCmd));
 8008494:	f107 030a 	add.w	r3, r7, #10
 8008498:	2201      	movs	r2, #1
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff ff3c 	bl	800831a <_nor_spi_tx>
	_nor_spi_rx(nor, &status, sizeof(status));
 80084a2:	f107 030b 	add.w	r3, r7, #11
 80084a6:	2201      	movs	r2, #1
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff ff44 	bl	8008338 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff ff27 	bl	8008304 <_nor_cs_deassert>

	*SrUpdateHandler = status;
 80084b6:	7afa      	ldrb	r2, [r7, #11]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	701a      	strb	r2, [r3, #0]

	return status;
 80084bc:	7afb      	ldrb	r3, [r7, #11]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <_nor_WaitForWriteEnd>:
	_nor_spi_tx(nor, WriteSR, sizeof(WriteSR));
	_nor_cs_deassert(nor);
}

nor_err_e _nor_WaitForWriteEnd(nor_t *nor, uint32_t msTimeout)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
	uint8_t ReadSr1Cmd = NOR_READ_SR1;
 80084d0:	2305      	movs	r3, #5
 80084d2:	73fb      	strb	r3, [r7, #15]

	// multply timeout for 10, we must run a delay of 100us on each iteraction
	msTimeout *= 10;
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	603b      	str	r3, [r7, #0]
	_nor_cs_assert(nor);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff ff04 	bl	80082ee <_nor_cs_assert>
	_nor_spi_tx(nor, (uint8_t*)&ReadSr1Cmd, sizeof(ReadSr1Cmd));
 80084e6:	f107 030f 	add.w	r3, r7, #15
 80084ea:	2201      	movs	r2, #1
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff ff13 	bl	800831a <_nor_spi_tx>
	do{
		_nor_spi_rx(nor, &nor->_internal.u8StatusReg1, sizeof(uint8_t));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3342      	adds	r3, #66	; 0x42
 80084f8:	2201      	movs	r2, #1
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff ff1b 	bl	8008338 <_nor_spi_rx>
		_nor_delay_us(nor, 100);
 8008502:	2164      	movs	r1, #100	; 0x64
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff ff26 	bl	8008356 <_nor_delay_us>
		msTimeout -= 100;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	3b64      	subs	r3, #100	; 0x64
 800850e:	603b      	str	r3, [r7, #0]
	}while ((nor->_internal.u8StatusReg1 & SR1_BUSY_BIT) && (msTimeout > 0));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <_nor_WaitForWriteEnd+0x5e>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e7      	bne.n	80084f4 <_nor_WaitForWriteEnd+0x2e>
	_nor_cs_deassert(nor);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff feed 	bl	8008304 <_nor_cs_deassert>

	if (msTimeout == 0){
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <_nor_WaitForWriteEnd+0x6e>
		return NOR_FAIL;
 8008530:	2301      	movs	r3, #1
 8008532:	e000      	b.n	8008536 <_nor_WaitForWriteEnd+0x70>
	}
	return NOR_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <NOR_Init>:

/*
 * Publics
 */

nor_err_e NOR_Init(nor_t *nor){
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
	uint8_t ExitPDCmd = NOR_RELEASE_PD;
 8008546:	23ab      	movs	r3, #171	; 0xab
 8008548:	73fb      	strb	r3, [r7, #15]

	if (nor == NULL || nor->config.CsAssert == NULL ||
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d013      	beq.n	8008578 <NOR_Init+0x3a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00f      	beq.n	8008578 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
	if (nor == NULL || nor->config.CsAssert == NULL ||
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <NOR_Init+0x3e>
		NOR_PRINTF("ERROR: Invalid Parameters on %s function\n", __func__);
		return NOR_INVALID_PARAMS;
 8008578:	2302      	movs	r3, #2
 800857a:	e09a      	b.n	80086b2 <NOR_Init+0x174>
	}
	if (nor->_internal.u16Initialized == NOR_INITIALIZED_FLAG){
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008582:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008586:	4293      	cmp	r3, r2
 8008588:	d101      	bne.n	800858e <NOR_Init+0x50>
		// the flash instance is already initialized
		NOR_PRINTF("Warning: Flash is already initialized.\n");
		return NOR_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	e091      	b.n	80086b2 <NOR_Init+0x174>
	}
	// we must have sure that the NOR has your CS pin deasserted
	_nor_cs_deassert(nor);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff feb8 	bl	8008304 <_nor_cs_deassert>
	_nor_delay_us(nor, 100);
 8008594:	2164      	movs	r1, #100	; 0x64
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff fedd 	bl	8008356 <_nor_delay_us>

	// we are assuming, on startup, that the Flash is on Power Down State
	nor->_internal.u8PdCount = 0;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nor->pdState = NOR_IN_IDLE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	_nor_cs_assert(nor);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff fe9e 	bl	80082ee <_nor_cs_assert>
	_nor_spi_tx(nor, &ExitPDCmd, sizeof(ExitPDCmd));
 80085b2:	f107 030f 	add.w	r3, r7, #15
 80085b6:	2201      	movs	r2, #1
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7ff fead 	bl	800831a <_nor_spi_tx>
	_nor_cs_deassert(nor);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff fe9f 	bl	8008304 <_nor_cs_deassert>

	nor->info.u32JedecID = _nor_ReadID(nor);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7ff fed2 	bl	8008370 <_nor_ReadID>
 80085cc:	4602      	mov	r2, r0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	621a      	str	r2, [r3, #32]
	if (nor->info.u32JedecID == 0x000000 || nor->info.u32JedecID == 0xFFFFFF){
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <NOR_Init+0xa8>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d101      	bne.n	80085ea <NOR_Init+0xac>
		// invalid Id, I thing we don't has any flash on SPI
		NOR_PRINTF("ERROR: Flash memory bus fault.\n");
		return NOR_NO_MEMORY_FOUND;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e063      	b.n	80086b2 <NOR_Init+0x174>
	}
	nor->Manufacturer = NOR_IDS_Interpret_Manufacturer(nor->info.u32JedecID);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fa30 	bl	8008a54 <NOR_IDS_Interpret_Manufacturer>
 80085f4:	4603      	mov	r3, r0
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	nor->Model = NOR_IDS_Interpret_Model(nor->info.u32JedecID);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fa32 	bl	8008a6c <NOR_IDS_Interpret_Model>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	if (nor->Model == NOR_MODEL_UNKNOWN){
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800861c:	4293      	cmp	r3, r2
 800861e:	d101      	bne.n	8008624 <NOR_Init+0xe6>
		NOR_PRINTF("ERROR: The flash memory model wasn't reconignized.\n"
				"You can, yet, start with NOR_Init_wo_ID to ignore the Flash ID.");
		return NOR_UNKNOWN_DEVICE;
 8008620:	2304      	movs	r3, #4
 8008622:	e046      	b.n	80086b2 <NOR_Init+0x174>
	}

	nor->info.u64UniqueId = _nor_ReadUniqID(nor);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff fec4 	bl	80083b2 <_nor_ReadUniqID>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	e9c1 2306 	strd	r2, r3, [r1, #24]
//	nor->info.u32BlockSize = NOR_BLOCK_SIZE;
//	nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
//	nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
//	nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);

		nor->info.u32BlockCount = NOR_IDS_GetQtdBlocks(nor->info.u32JedecID);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fa3b 	bl	8008ab4 <NOR_IDS_GetQtdBlocks>
 800863e:	4602      	mov	r2, r0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	63da      	str	r2, [r3, #60]	; 0x3c

		nor->info.u16PageSize = NOR_PAGE_SIZE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800864a:	851a      	strh	r2, [r3, #40]	; 0x28
		nor->info.u16SectorSize = NOR_SECTOR_SIZE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008652:	861a      	strh	r2, [r3, #48]	; 0x30
		nor->info.u32BlockSize = NOR_BLOCK_SIZE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800865a:	639a      	str	r2, [r3, #56]	; 0x38
		nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008660:	011a      	lsls	r2, r3, #4
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	635a      	str	r2, [r3, #52]	; 0x34
		nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800866e:	fb02 f303 	mul.w	r3, r2, r3
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008676:	fbb3 f2f2 	udiv	r2, r3, r2
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	62da      	str	r2, [r3, #44]	; 0x2c
		nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8008686:	fb02 f203 	mul.w	r2, r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	625a      	str	r2, [r3, #36]	; 0x24

	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 800868e:	2100      	movs	r1, #0
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff fed6 	bl	8008442 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8008696:	2100      	movs	r1, #0
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fed2 	bl	8008442 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 800869e:	2100      	movs	r1, #0
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fece 	bl	8008442 <_nor_ReadStatusRegister>

	nor->_internal.u16Initialized = NOR_INITIALIZED_FLAG;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80086ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	NOR_PRINTF(" Sector Count | %d Sectors\n", (uint)nor->info.u32SectorCount);
	NOR_PRINTF(" Block Count  | %d Blocks\n", (uint)nor->info.u32BlockCount);
	NOR_PRINTF(" Capacity     | %d KB\n", (uint)(nor->info.u32Size/1024));
	NOR_PRINTF(" == NOR Initialization Done ==\n");

	return NOR_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <NOR_EraseAddress>:
	}
	NOR_PRINTF("Done!\n");
	return err;
}

nor_err_e NOR_EraseAddress(nor_t *nor, uint32_t Address, nor_erase_method_e method){
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	71fb      	strb	r3, [r7, #7]
	uint8_t EraseChipCmd[4];
	uint32_t expectedTimeoutUs;
	nor_err_e err;

	_SANITY_CHECK(nor);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <NOR_EraseAddress+0x18>
 80086d0:	2302      	movs	r3, #2
 80086d2:	e043      	b.n	800875c <NOR_EraseAddress+0xa0>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80086da:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80086de:	4293      	cmp	r3, r2
 80086e0:	d001      	beq.n	80086e6 <NOR_EraseAddress+0x2a>
 80086e2:	2306      	movs	r3, #6
 80086e4:	e03a      	b.n	800875c <NOR_EraseAddress+0xa0>

	switch (method){
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d010      	beq.n	800870e <NOR_EraseAddress+0x52>
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	dc13      	bgt.n	8008718 <NOR_EraseAddress+0x5c>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <NOR_EraseAddress+0x3e>
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d005      	beq.n	8008704 <NOR_EraseAddress+0x48>
 80086f8:	e00e      	b.n	8008718 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_4K:
		NOR_PRINTF("Erasing 4K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_4K;
 80086fa:	2320      	movs	r3, #32
 80086fc:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_4K_ERASE_TIME;
 80086fe:	4b19      	ldr	r3, [pc, #100]	; (8008764 <NOR_EraseAddress+0xa8>)
 8008700:	61fb      	str	r3, [r7, #28]
		break;
 8008702:	e009      	b.n	8008718 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_32K:
		NOR_PRINTF("Erasing 32K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_32K;
 8008704:	2352      	movs	r3, #82	; 0x52
 8008706:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_32K_ERASE_TIME;
 8008708:	4b17      	ldr	r3, [pc, #92]	; (8008768 <NOR_EraseAddress+0xac>)
 800870a:	61fb      	str	r3, [r7, #28]
		break;
 800870c:	e004      	b.n	8008718 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_64K:
		NOR_PRINTF("Erasing 64K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_64K;
 800870e:	23d8      	movs	r3, #216	; 0xd8
 8008710:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_64K_ERASE_TIME;
 8008712:	4b16      	ldr	r3, [pc, #88]	; (800876c <NOR_EraseAddress+0xb0>)
 8008714:	61fb      	str	r3, [r7, #28]
		break;
 8008716:	bf00      	nop
	}
	EraseChipCmd[1] = ((Address >> 16) & 0xFF);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	b2db      	uxtb	r3, r3
 800871e:	757b      	strb	r3, [r7, #21]
	EraseChipCmd[2] = ((Address >> 8) & 0xFF);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	0a1b      	lsrs	r3, r3, #8
 8008724:	b2db      	uxtb	r3, r3
 8008726:	75bb      	strb	r3, [r7, #22]
	EraseChipCmd[3] = ((Address) & 0xFF);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	75fb      	strb	r3, [r7, #23]

	_nor_WriteEnable(nor);
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7ff fe70 	bl	8008414 <_nor_WriteEnable>
	_nor_cs_assert(nor);
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7ff fdda 	bl	80082ee <_nor_cs_assert>
	_nor_spi_tx(nor, EraseChipCmd, sizeof(EraseChipCmd));
 800873a:	f107 0314 	add.w	r3, r7, #20
 800873e:	2204      	movs	r2, #4
 8008740:	4619      	mov	r1, r3
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f7ff fde9 	bl	800831a <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f7ff fddb 	bl	8008304 <_nor_cs_deassert>
	err = _nor_WaitForWriteEnd(nor, expectedTimeoutUs);
 800874e:	69f9      	ldr	r1, [r7, #28]
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff feb8 	bl	80084c6 <_nor_WaitForWriteEnd>
 8008756:	4603      	mov	r3, r0
 8008758:	76fb      	strb	r3, [r7, #27]
	if (err != NOR_OK){
		NOR_PRINTF("ERROR: Failed to erase flash\n");
	}
	NOR_PRINTF("Done!\n");

	return err;
 800875a:	7efb      	ldrb	r3, [r7, #27]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3720      	adds	r7, #32
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	00061a80 	.word	0x00061a80
 8008768:	00186a00 	.word	0x00186a00
 800876c:	001e8480 	.word	0x001e8480

08008770 <NOR_EraseSector>:

nor_err_e NOR_EraseSector(nor_t *nor, uint32_t SectorAddr){
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <NOR_EraseSector+0x14>
 8008780:	2302      	movs	r3, #2
 8008782:	e015      	b.n	80087b0 <NOR_EraseSector+0x40>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800878a:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800878e:	4293      	cmp	r3, r2
 8008790:	d001      	beq.n	8008796 <NOR_EraseSector+0x26>
 8008792:	2306      	movs	r3, #6
 8008794:	e00c      	b.n	80087b0 <NOR_EraseSector+0x40>

	Address = SectorAddr * nor->info.u16SectorSize;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800879a:	461a      	mov	r2, r3
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	fb02 f303 	mul.w	r3, r2, r3
 80087a2:	60fb      	str	r3, [r7, #12]
	return NOR_EraseAddress(nor, Address, NOR_ERASE_4K);
 80087a4:	2200      	movs	r2, #0
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff ff87 	bl	80086bc <NOR_EraseAddress>
 80087ae:	4603      	mov	r3, r0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <NOR_WriteBytes>:

	ActAddress = (nor->info.u32BlockSize * BlockAddr) + Offset;
	return NOR_IsEmptyAddress(nor, ActAddress, NumBytesToCheck);
}

nor_err_e NOR_WriteBytes(nor_t *nor, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NumBytesToWrite){
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
	uint8_t WriteCmd[4];
	uint32_t _BytesToWrite;

	_SANITY_CHECK(nor);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <NOR_WriteBytes+0x18>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e05f      	b.n	8008890 <NOR_WriteBytes+0xd8>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80087d6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80087da:	4293      	cmp	r3, r2
 80087dc:	d001      	beq.n	80087e2 <NOR_WriteBytes+0x2a>
 80087de:	2306      	movs	r3, #6
 80087e0:	e056      	b.n	8008890 <NOR_WriteBytes+0xd8>

	if (NumBytesToWrite == 0){
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <NOR_WriteBytes+0x34>
		NOR_PRINTF("ERROR: Invalid parameters on NOR_WriteBytes\n");
		return NOR_INVALID_PARAMS;
 80087e8:	2302      	movs	r3, #2
 80087ea:	e051      	b.n	8008890 <NOR_WriteBytes+0xd8>
	}
	// TODO check if Address is not grater than the Flash size
	NOR_PRINTF("Writing %d bytes into Address %08X.\n", (uint)NumBytesToWrite, (uint)WriteAddr);
	NOR_PRINTF("Buffer to Write into Flash:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < NumBytesToWrite; i++)
 80087ec:	2300      	movs	r3, #0
 80087ee:	61bb      	str	r3, [r7, #24]
 80087f0:	e002      	b.n	80087f8 <NOR_WriteBytes+0x40>
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	3301      	adds	r3, #1
 80087f6:	61bb      	str	r3, [r7, #24]
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d3f8      	bcc.n	80087f2 <NOR_WriteBytes+0x3a>
		}
		NOR_PRINTF("%02X ", pBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	do{
		if (((WriteAddr%nor->info.u16PageSize)+NumBytesToWrite) > nor->info.u16PageSize){
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008804:	461a      	mov	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	fbb3 f1f2 	udiv	r1, r3, r2
 800880c:	fb02 f201 	mul.w	r2, r2, r1
 8008810:	1a9a      	subs	r2, r3, r2
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	4413      	add	r3, r2
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800881a:	4293      	cmp	r3, r2
 800881c:	d903      	bls.n	8008826 <NOR_WriteBytes+0x6e>
			_BytesToWrite = nor->info.u16PageSize;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008822:	61fb      	str	r3, [r7, #28]
 8008824:	e001      	b.n	800882a <NOR_WriteBytes+0x72>
		}
		else{
			_BytesToWrite = NumBytesToWrite;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	61fb      	str	r3, [r7, #28]
		}
		_nor_WriteEnable(nor);
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff fdf2 	bl	8008414 <_nor_WriteEnable>
		WriteCmd[0] = NOR_PAGE_PROGRAM;
 8008830:	2302      	movs	r3, #2
 8008832:	753b      	strb	r3, [r7, #20]
		WriteCmd[1] = ((WriteAddr >> 16) & 0xFF);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	0c1b      	lsrs	r3, r3, #16
 8008838:	b2db      	uxtb	r3, r3
 800883a:	757b      	strb	r3, [r7, #21]
		WriteCmd[2] = ((WriteAddr >> 8) & 0xFF);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	0a1b      	lsrs	r3, r3, #8
 8008840:	b2db      	uxtb	r3, r3
 8008842:	75bb      	strb	r3, [r7, #22]
		WriteCmd[3] = ((WriteAddr) & 0xFF);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	75fb      	strb	r3, [r7, #23]
		_nor_cs_assert(nor);
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff fd4f 	bl	80082ee <_nor_cs_assert>
		_nor_spi_tx(nor, WriteCmd, sizeof(WriteCmd));
 8008850:	f107 0314 	add.w	r3, r7, #20
 8008854:	2204      	movs	r2, #4
 8008856:	4619      	mov	r1, r3
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7ff fd5e 	bl	800831a <_nor_spi_tx>
		_nor_spi_tx(nor, pBuffer, _BytesToWrite);
 800885e:	69fa      	ldr	r2, [r7, #28]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff fd59 	bl	800831a <_nor_spi_tx>
		_nor_cs_deassert(nor);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7ff fd4b 	bl	8008304 <_nor_cs_deassert>
		_nor_WaitForWriteEnd(nor, NOR_EXPECT_PAGE_PROG_TIME);
 800886e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f7ff fe27 	bl	80084c6 <_nor_WaitForWriteEnd>
		pBuffer += _BytesToWrite;
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	4413      	add	r3, r2
 800887e:	60bb      	str	r3, [r7, #8]
		NumBytesToWrite -= _BytesToWrite;
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	603b      	str	r3, [r7, #0]
	}while (NumBytesToWrite > 0);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1b8      	bne.n	8008800 <NOR_WriteBytes+0x48>
	NOR_PRINTF("Write done.!\n");

	return NOR_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3720      	adds	r7, #32
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <NOR_WriteSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_WriteSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumBytesToWrite){
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <NOR_WriteSector+0x18>
 80088ac:	2302      	movs	r3, #2
 80088ae:	e027      	b.n	8008900 <NOR_WriteSector+0x68>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80088b6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d00a      	beq.n	80088d4 <NOR_WriteSector+0x3c>
 80088be:	2306      	movs	r3, #6
 80088c0:	e01e      	b.n	8008900 <NOR_WriteSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3301      	adds	r3, #1
 80088c6:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80088cc:	461a      	mov	r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	1a9b      	subs	r3, r3, r2
 80088d2:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80088d8:	461a      	mov	r2, r3
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	4293      	cmp	r3, r2
 80088de:	d2f0      	bcs.n	80088c2 <NOR_WriteSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80088e4:	461a      	mov	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	fb03 f302 	mul.w	r3, r3, r2
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	4413      	add	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f7ff ff5d 	bl	80087b8 <NOR_WriteBytes>
 80088fe:	4603      	mov	r3, r0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <NOR_ReadBytes>:

	Address = (BlockAddr * nor->info.u32BlockSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_ReadBytes(nor_t *nor, uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead){
 8008908:	b580      	push	{r7, lr}
 800890a:	b08a      	sub	sp, #40	; 0x28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
	uint8_t ReadCmd[5];
	uint32_t _BytesToRead;
	uint8_t *originalBuffer;
	uint32_t originalNumBytes;

	_SANITY_CHECK(nor);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <NOR_ReadBytes+0x18>
 800891c:	2302      	movs	r3, #2
 800891e:	e05d      	b.n	80089dc <NOR_ReadBytes+0xd4>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008926:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800892a:	4293      	cmp	r3, r2
 800892c:	d001      	beq.n	8008932 <NOR_ReadBytes+0x2a>
 800892e:	2306      	movs	r3, #6
 8008930:	e054      	b.n	80089dc <NOR_ReadBytes+0xd4>

	if (NumByteToRead == 0){
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <NOR_ReadBytes+0x34>
		return NOR_INVALID_PARAMS;
 8008938:	2302      	movs	r3, #2
 800893a:	e04f      	b.n	80089dc <NOR_ReadBytes+0xd4>
	}
	// TODO check if Address is not grater than the Flash size

	originalBuffer = pBuffer;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	61fb      	str	r3, [r7, #28]
	originalNumBytes = NumByteToRead;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	61bb      	str	r3, [r7, #24]
	NOR_PRINTF("Reading %d bytes on the Address %08X.\n", (uint)NumByteToRead, (uint)ReadAddr);
	do{
		if (((ReadAddr%nor->info.u16PageSize)+NumByteToRead) > nor->info.u16PageSize){
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008948:	461a      	mov	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008950:	fb02 f201 	mul.w	r2, r2, r1
 8008954:	1a9a      	subs	r2, r3, r2
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	4413      	add	r3, r2
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800895e:	4293      	cmp	r3, r2
 8008960:	d903      	bls.n	800896a <NOR_ReadBytes+0x62>
			_BytesToRead = nor->info.u16PageSize;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008966:	627b      	str	r3, [r7, #36]	; 0x24
 8008968:	e001      	b.n	800896e <NOR_ReadBytes+0x66>
		}
		else{
			_BytesToRead = NumByteToRead;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		ReadCmd[0] = NOR_READ_FAST_DATA;
 800896e:	230b      	movs	r3, #11
 8008970:	743b      	strb	r3, [r7, #16]
		ReadCmd[1] = ((ReadAddr >> 16) & 0xFF);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	0c1b      	lsrs	r3, r3, #16
 8008976:	b2db      	uxtb	r3, r3
 8008978:	747b      	strb	r3, [r7, #17]
		ReadCmd[2] = ((ReadAddr >> 8) & 0xFF);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	b2db      	uxtb	r3, r3
 8008980:	74bb      	strb	r3, [r7, #18]
		ReadCmd[3] = ((ReadAddr) & 0xFF);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	74fb      	strb	r3, [r7, #19]
		ReadCmd[4] = 0x00;
 8008988:	2300      	movs	r3, #0
 800898a:	753b      	strb	r3, [r7, #20]
		_nor_cs_assert(nor);
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff fcae 	bl	80082ee <_nor_cs_assert>
		_nor_spi_tx(nor, ReadCmd, sizeof(ReadCmd));
 8008992:	f107 0310 	add.w	r3, r7, #16
 8008996:	2205      	movs	r2, #5
 8008998:	4619      	mov	r1, r3
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f7ff fcbd 	bl	800831a <_nor_spi_tx>
		_nor_spi_rx(nor, pBuffer, _BytesToRead);
 80089a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7ff fcc7 	bl	8008338 <_nor_spi_rx>
		_nor_cs_deassert(nor);
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7ff fcaa 	bl	8008304 <_nor_cs_deassert>
		pBuffer += _BytesToRead;
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	4413      	add	r3, r2
 80089b6:	60bb      	str	r3, [r7, #8]
		NumByteToRead -= _BytesToRead;
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	603b      	str	r3, [r7, #0]
	}while(NumByteToRead > 0);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1be      	bne.n	8008944 <NOR_ReadBytes+0x3c>

	NOR_PRINTF("Buffer readed from NOR:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < originalNumBytes; i++)
 80089c6:	2300      	movs	r3, #0
 80089c8:	623b      	str	r3, [r7, #32]
 80089ca:	e002      	b.n	80089d2 <NOR_ReadBytes+0xca>
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	3301      	adds	r3, #1
 80089d0:	623b      	str	r3, [r7, #32]
 80089d2:	6a3a      	ldr	r2, [r7, #32]
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d3f8      	bcc.n	80089cc <NOR_ReadBytes+0xc4>
		NOR_PRINTF("%02X ", originalBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	NOR_PRINTF("w25qxx ReadBytes done.\n");

	return NOR_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3728      	adds	r7, #40	; 0x28
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <NOR_ReadSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
}

nor_err_e NOR_ReadSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumByteToRead){
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <NOR_ReadSector+0x18>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e027      	b.n	8008a4c <NOR_ReadSector+0x68>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008a02:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00a      	beq.n	8008a20 <NOR_ReadSector+0x3c>
 8008a0a:	2306      	movs	r3, #6
 8008a0c:	e01e      	b.n	8008a4c <NOR_ReadSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3301      	adds	r3, #1
 8008a12:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008a18:	461a      	mov	r2, r3
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	1a9b      	subs	r3, r3, r2
 8008a1e:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008a24:	461a      	mov	r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d2f0      	bcs.n	8008a0e <NOR_ReadSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008a30:	461a      	mov	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	fb03 f302 	mul.w	r3, r3, r2
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff ff5f 	bl	8008908 <NOR_ReadBytes>
 8008a4a:	4603      	mov	r3, r0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <NOR_IDS_Interpret_Manufacturer>:
 *      Author: pablo-jean
 */

#include "nor_ids.h"

nor_manuf_e NOR_IDS_Interpret_Manufacturer (uint32_t JedecID){
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
	return (nor_manuf_e)(JedecID & 0xFF);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	b2db      	uxtb	r3, r3
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <NOR_IDS_Interpret_Model>:

nor_model_e NOR_IDS_Interpret_Model (uint32_t JedecID){
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff ffed 	bl	8008a54 <NOR_IDS_Interpret_Manufacturer>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73fb      	strb	r3, [r7, #15]

	switch (Manuf){
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	2bef      	cmp	r3, #239	; 0xef
 8008a82:	d00e      	beq.n	8008aa2 <NOR_IDS_Interpret_Model+0x36>
 8008a84:	2bef      	cmp	r3, #239	; 0xef
 8008a86:	dc03      	bgt.n	8008a90 <NOR_IDS_Interpret_Model+0x24>
 8008a88:	2b20      	cmp	r3, #32
 8008a8a:	d00e      	beq.n	8008aaa <NOR_IDS_Interpret_Model+0x3e>
 8008a8c:	2bc2      	cmp	r3, #194	; 0xc2
 8008a8e:	d002      	beq.n	8008a96 <NOR_IDS_Interpret_Model+0x2a>
	case	MANUF_PUYA:
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		return NOR_MODEL_UNKNOWN;
 8008a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a94:	e00a      	b.n	8008aac <NOR_IDS_Interpret_Model+0x40>
	case 	MANUF_MXIC:
		return ((JedecID >> 16) & 0xFF);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	0c1b      	lsrs	r3, r3, #16
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	e004      	b.n	8008aac <NOR_IDS_Interpret_Model+0x40>
		break;
	case	MANUF_WINBOND:
		return ((JedecID >> 8) & 0xFFFF);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	0a1b      	lsrs	r3, r3, #8
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	e000      	b.n	8008aac <NOR_IDS_Interpret_Model+0x40>
		break;

	case    MANUF_MT25QL:
		return ((0x9E >> 8) & 0xFFFF);
 8008aaa:	2300      	movs	r3, #0
		break;
	}
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <NOR_IDS_GetQtdBlocks>:

uint32_t NOR_IDS_GetQtdBlocks(uint32_t JedecID){
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff ffc9 	bl	8008a54 <NOR_IDS_Interpret_Manufacturer>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
	uint8_t density, i;
	uint32_t blocks;

	switch (Manuf){
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	2bef      	cmp	r3, #239	; 0xef
 8008aca:	d029      	beq.n	8008b20 <NOR_IDS_GetQtdBlocks+0x6c>
 8008acc:	2bef      	cmp	r3, #239	; 0xef
 8008ace:	dc24      	bgt.n	8008b1a <NOR_IDS_GetQtdBlocks+0x66>
 8008ad0:	2bc2      	cmp	r3, #194	; 0xc2
 8008ad2:	d025      	beq.n	8008b20 <NOR_IDS_GetQtdBlocks+0x6c>
 8008ad4:	2bc2      	cmp	r3, #194	; 0xc2
 8008ad6:	dc20      	bgt.n	8008b1a <NOR_IDS_GetQtdBlocks+0x66>
 8008ad8:	2bbf      	cmp	r3, #191	; 0xbf
 8008ada:	d009      	beq.n	8008af0 <NOR_IDS_GetQtdBlocks+0x3c>
 8008adc:	2bbf      	cmp	r3, #191	; 0xbf
 8008ade:	dc1c      	bgt.n	8008b1a <NOR_IDS_GetQtdBlocks+0x66>
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	dc02      	bgt.n	8008aea <NOR_IDS_GetQtdBlocks+0x36>
 8008ae4:	2b1f      	cmp	r3, #31
 8008ae6:	da03      	bge.n	8008af0 <NOR_IDS_GetQtdBlocks+0x3c>
 8008ae8:	e017      	b.n	8008b1a <NOR_IDS_GetQtdBlocks+0x66>
 8008aea:	2b85      	cmp	r3, #133	; 0x85
 8008aec:	d018      	beq.n	8008b20 <NOR_IDS_GetQtdBlocks+0x6c>
 8008aee:	e014      	b.n	8008b1a <NOR_IDS_GetQtdBlocks+0x66>
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	case    MANUF_MT25QL:
		density = ((0x9E >> 16) & 0xFF);
 8008af0:	2300      	movs	r3, #0
 8008af2:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	3b11      	subs	r3, #17
 8008af8:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 8008afa:	2302      	movs	r3, #2
 8008afc:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 8008afe:	2300      	movs	r3, #0
 8008b00:	75fb      	strb	r3, [r7, #23]
 8008b02:	e005      	b.n	8008b10 <NOR_IDS_GetQtdBlocks+0x5c>
			blocks *= 2;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	75fb      	strb	r3, [r7, #23]
 8008b10:	7dfa      	ldrb	r2, [r7, #23]
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d3f5      	bcc.n	8008b04 <NOR_IDS_GetQtdBlocks+0x50>
		}
	break;
 8008b18:	e018      	b.n	8008b4c <NOR_IDS_GetQtdBlocks+0x98>
	default:
		blocks = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	613b      	str	r3, [r7, #16]
		break;
 8008b1e:	e015      	b.n	8008b4c <NOR_IDS_GetQtdBlocks+0x98>
	case	MANUF_PUYA:
	case 	MANUF_MXIC:
	case	MANUF_WINBOND:
		density = ((JedecID >> 16) & 0xFF);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	0c1b      	lsrs	r3, r3, #16
 8008b24:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	3b11      	subs	r3, #17
 8008b2a:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 8008b30:	2300      	movs	r3, #0
 8008b32:	75fb      	strb	r3, [r7, #23]
 8008b34:	e005      	b.n	8008b42 <NOR_IDS_GetQtdBlocks+0x8e>
			blocks *= 2;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
 8008b42:	7dfa      	ldrb	r2, [r7, #23]
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d3f5      	bcc.n	8008b36 <NOR_IDS_GetQtdBlocks+0x82>
		}
		break;
 8008b4a:	bf00      	nop
	}

	return blocks;
 8008b4c:	693b      	ldr	r3, [r7, #16]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b5e:	2300      	movs	r3, #0
 8008b60:	607b      	str	r3, [r7, #4]
 8008b62:	4b10      	ldr	r3, [pc, #64]	; (8008ba4 <HAL_MspInit+0x4c>)
 8008b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b66:	4a0f      	ldr	r2, [pc, #60]	; (8008ba4 <HAL_MspInit+0x4c>)
 8008b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <HAL_MspInit+0x4c>)
 8008b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b76:	607b      	str	r3, [r7, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	603b      	str	r3, [r7, #0]
 8008b7e:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <HAL_MspInit+0x4c>)
 8008b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b82:	4a08      	ldr	r2, [pc, #32]	; (8008ba4 <HAL_MspInit+0x4c>)
 8008b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b88:	6413      	str	r3, [r2, #64]	; 0x40
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <HAL_MspInit+0x4c>)
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b92:	603b      	str	r3, [r7, #0]
 8008b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	40023800 	.word	0x40023800

08008ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08e      	sub	sp, #56	; 0x38
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	605a      	str	r2, [r3, #4]
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a48      	ldr	r2, [pc, #288]	; (8008ce8 <HAL_ADC_MspInit+0x140>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d15c      	bne.n	8008c84 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008bca:	2300      	movs	r3, #0
 8008bcc:	623b      	str	r3, [r7, #32]
 8008bce:	4b47      	ldr	r3, [pc, #284]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd2:	4a46      	ldr	r2, [pc, #280]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8008bda:	4b44      	ldr	r3, [pc, #272]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be2:	623b      	str	r3, [r7, #32]
 8008be4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008be6:	2300      	movs	r3, #0
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	4b40      	ldr	r3, [pc, #256]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bee:	4a3f      	ldr	r2, [pc, #252]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008bf0:	f043 0304 	orr.w	r3, r3, #4
 8008bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8008bf6:	4b3d      	ldr	r3, [pc, #244]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfa:	f003 0304 	and.w	r3, r3, #4
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c02:	2300      	movs	r3, #0
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	4b39      	ldr	r3, [pc, #228]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0a:	4a38      	ldr	r2, [pc, #224]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008c0c:	f043 0301 	orr.w	r3, r3, #1
 8008c10:	6313      	str	r3, [r2, #48]	; 0x30
 8008c12:	4b36      	ldr	r3, [pc, #216]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	61bb      	str	r3, [r7, #24]
 8008c1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c1e:	2300      	movs	r3, #0
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	4b32      	ldr	r3, [pc, #200]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c26:	4a31      	ldr	r2, [pc, #196]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008c28:	f043 0302 	orr.w	r3, r3, #2
 8008c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2e:	4b2f      	ldr	r3, [pc, #188]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	617b      	str	r3, [r7, #20]
 8008c38:	697b      	ldr	r3, [r7, #20]
    PC5     ------> ADC1_IN15
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8008c3a:	2337      	movs	r3, #55	; 0x37
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4828      	ldr	r0, [pc, #160]	; (8008cf0 <HAL_ADC_MspInit+0x148>)
 8008c4e:	f000 ff7b 	bl	8009b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7
 8008c52:	23fd      	movs	r3, #253	; 0xfd
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c56:	2303      	movs	r3, #3
 8008c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c62:	4619      	mov	r1, r3
 8008c64:	4823      	ldr	r0, [pc, #140]	; (8008cf4 <HAL_ADC_MspInit+0x14c>)
 8008c66:	f000 ff6f 	bl	8009b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	481e      	ldr	r0, [pc, #120]	; (8008cf8 <HAL_ADC_MspInit+0x150>)
 8008c7e:	f000 ff63 	bl	8009b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8008c82:	e02c      	b.n	8008cde <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC3)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a1c      	ldr	r2, [pc, #112]	; (8008cfc <HAL_ADC_MspInit+0x154>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d127      	bne.n	8008cde <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008c8e:	2300      	movs	r3, #0
 8008c90:	613b      	str	r3, [r7, #16]
 8008c92:	4b16      	ldr	r3, [pc, #88]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c96:	4a15      	ldr	r2, [pc, #84]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008c98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c9e:	4b13      	ldr	r3, [pc, #76]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca6:	613b      	str	r3, [r7, #16]
 8008ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb2:	4a0e      	ldr	r2, [pc, #56]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008cb4:	f043 0320 	orr.w	r3, r3, #32
 8008cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8008cba:	4b0c      	ldr	r3, [pc, #48]	; (8008cec <HAL_ADC_MspInit+0x144>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008cc6:	2310      	movs	r3, #16
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4809      	ldr	r0, [pc, #36]	; (8008d00 <HAL_ADC_MspInit+0x158>)
 8008cda:	f000 ff35 	bl	8009b48 <HAL_GPIO_Init>
}
 8008cde:	bf00      	nop
 8008ce0:	3738      	adds	r7, #56	; 0x38
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	40012000 	.word	0x40012000
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	40020800 	.word	0x40020800
 8008cf4:	40020000 	.word	0x40020000
 8008cf8:	40020400 	.word	0x40020400
 8008cfc:	40012200 	.word	0x40012200
 8008d00:	40021400 	.word	0x40021400

08008d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08c      	sub	sp, #48	; 0x30
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d0c:	f107 031c 	add.w	r3, r7, #28
 8008d10:	2200      	movs	r2, #0
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	605a      	str	r2, [r3, #4]
 8008d16:	609a      	str	r2, [r3, #8]
 8008d18:	60da      	str	r2, [r3, #12]
 8008d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a41      	ldr	r2, [pc, #260]	; (8008e28 <HAL_SPI_MspInit+0x124>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d14b      	bne.n	8008dbe <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008d26:	2300      	movs	r3, #0
 8008d28:	61bb      	str	r3, [r7, #24]
 8008d2a:	4b40      	ldr	r3, [pc, #256]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	4a3f      	ldr	r2, [pc, #252]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d34:	6413      	str	r3, [r2, #64]	; 0x40
 8008d36:	4b3d      	ldr	r3, [pc, #244]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d3e:	61bb      	str	r3, [r7, #24]
 8008d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d42:	2300      	movs	r3, #0
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	4b39      	ldr	r3, [pc, #228]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4a:	4a38      	ldr	r2, [pc, #224]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008d4c:	f043 0302 	orr.w	r3, r3, #2
 8008d50:	6313      	str	r3, [r2, #48]	; 0x30
 8008d52:	4b36      	ldr	r3, [pc, #216]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d5e:	2300      	movs	r3, #0
 8008d60:	613b      	str	r3, [r7, #16]
 8008d62:	4b32      	ldr	r3, [pc, #200]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d66:	4a31      	ldr	r2, [pc, #196]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008d68:	f043 0304 	orr.w	r3, r3, #4
 8008d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d6e:	4b2f      	ldr	r3, [pc, #188]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	f003 0304 	and.w	r3, r3, #4
 8008d76:	613b      	str	r3, [r7, #16]
 8008d78:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PB4     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = MAIN_FM_MISO_Pin|MAIN_FM_SCK_Pin;
 8008d7a:	2318      	movs	r3, #24
 8008d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d7e:	2302      	movs	r3, #2
 8008d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d86:	2303      	movs	r3, #3
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008d8a:	2306      	movs	r3, #6
 8008d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d8e:	f107 031c 	add.w	r3, r7, #28
 8008d92:	4619      	mov	r1, r3
 8008d94:	4826      	ldr	r0, [pc, #152]	; (8008e30 <HAL_SPI_MspInit+0x12c>)
 8008d96:	f000 fed7 	bl	8009b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_FM_MOSI_Pin;
 8008d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008da0:	2302      	movs	r3, #2
 8008da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da4:	2300      	movs	r3, #0
 8008da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008da8:	2303      	movs	r3, #3
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008dac:	2306      	movs	r3, #6
 8008dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MAIN_FM_MOSI_GPIO_Port, &GPIO_InitStruct);
 8008db0:	f107 031c 	add.w	r3, r7, #28
 8008db4:	4619      	mov	r1, r3
 8008db6:	481f      	ldr	r0, [pc, #124]	; (8008e34 <HAL_SPI_MspInit+0x130>)
 8008db8:	f000 fec6 	bl	8009b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8008dbc:	e030      	b.n	8008e20 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI4)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a1d      	ldr	r2, [pc, #116]	; (8008e38 <HAL_SPI_MspInit+0x134>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d12b      	bne.n	8008e20 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	4b17      	ldr	r3, [pc, #92]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd0:	4a16      	ldr	r2, [pc, #88]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008dd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8008dd8:	4b14      	ldr	r3, [pc, #80]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008de4:	2300      	movs	r3, #0
 8008de6:	60bb      	str	r3, [r7, #8]
 8008de8:	4b10      	ldr	r3, [pc, #64]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dec:	4a0f      	ldr	r2, [pc, #60]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008dee:	f043 0310 	orr.w	r3, r3, #16
 8008df2:	6313      	str	r3, [r2, #48]	; 0x30
 8008df4:	4b0d      	ldr	r3, [pc, #52]	; (8008e2c <HAL_SPI_MspInit+0x128>)
 8008df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df8:	f003 0310 	and.w	r3, r3, #16
 8008dfc:	60bb      	str	r3, [r7, #8]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|SMSN_FM_MISO_OBC_Pin|SMSN_FM_MOSI_OBC_Pin;
 8008e00:	2364      	movs	r3, #100	; 0x64
 8008e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e04:	2302      	movs	r3, #2
 8008e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8008e10:	2305      	movs	r3, #5
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008e14:	f107 031c 	add.w	r3, r7, #28
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4808      	ldr	r0, [pc, #32]	; (8008e3c <HAL_SPI_MspInit+0x138>)
 8008e1c:	f000 fe94 	bl	8009b48 <HAL_GPIO_Init>
}
 8008e20:	bf00      	nop
 8008e22:	3730      	adds	r7, #48	; 0x30
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	40003c00 	.word	0x40003c00
 8008e2c:	40023800 	.word	0x40023800
 8008e30:	40020400 	.word	0x40020400
 8008e34:	40020800 	.word	0x40020800
 8008e38:	40013400 	.word	0x40013400
 8008e3c:	40021000 	.word	0x40021000

08008e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08c      	sub	sp, #48	; 0x30
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e48:	f107 031c 	add.w	r3, r7, #28
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	605a      	str	r2, [r3, #4]
 8008e52:	609a      	str	r2, [r3, #8]
 8008e54:	60da      	str	r2, [r3, #12]
 8008e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a3a      	ldr	r2, [pc, #232]	; (8008f48 <HAL_UART_MspInit+0x108>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d135      	bne.n	8008ece <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8008e62:	2300      	movs	r3, #0
 8008e64:	61bb      	str	r3, [r7, #24]
 8008e66:	4b39      	ldr	r3, [pc, #228]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6a:	4a38      	ldr	r2, [pc, #224]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e70:	6413      	str	r3, [r2, #64]	; 0x40
 8008e72:	4b36      	ldr	r3, [pc, #216]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e7a:	61bb      	str	r3, [r7, #24]
 8008e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]
 8008e82:	4b32      	ldr	r3, [pc, #200]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	4a31      	ldr	r2, [pc, #196]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008e88:	f043 0310 	orr.w	r3, r3, #16
 8008e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e8e:	4b2f      	ldr	r3, [pc, #188]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	f003 0310 	and.w	r3, r3, #16
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_OBC_Pin|DEBUG_RX_OBC_Pin;
 8008e9a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8008eac:	2308      	movs	r3, #8
 8008eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008eb0:	f107 031c 	add.w	r3, r7, #28
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4826      	ldr	r0, [pc, #152]	; (8008f50 <HAL_UART_MspInit+0x110>)
 8008eb8:	f000 fe46 	bl	8009b48 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	2052      	movs	r0, #82	; 0x52
 8008ec2:	f000 fd78 	bl	80099b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8008ec6:	2052      	movs	r0, #82	; 0x52
 8008ec8:	f000 fd91 	bl	80099ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008ecc:	e038      	b.n	8008f40 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART1)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a20      	ldr	r2, [pc, #128]	; (8008f54 <HAL_UART_MspInit+0x114>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d133      	bne.n	8008f40 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ed8:	2300      	movs	r3, #0
 8008eda:	613b      	str	r3, [r7, #16]
 8008edc:	4b1b      	ldr	r3, [pc, #108]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee0:	4a1a      	ldr	r2, [pc, #104]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008ee2:	f043 0310 	orr.w	r3, r3, #16
 8008ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8008ee8:	4b18      	ldr	r3, [pc, #96]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eec:	f003 0310 	and.w	r3, r3, #16
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	4b14      	ldr	r3, [pc, #80]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	4a13      	ldr	r2, [pc, #76]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008efe:	f043 0302 	orr.w	r3, r3, #2
 8008f02:	6313      	str	r3, [r2, #48]	; 0x30
 8008f04:	4b11      	ldr	r3, [pc, #68]	; (8008f4c <HAL_UART_MspInit+0x10c>)
 8008f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8008f10:	23c0      	movs	r3, #192	; 0xc0
 8008f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f14:	2302      	movs	r3, #2
 8008f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008f20:	2307      	movs	r3, #7
 8008f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f24:	f107 031c 	add.w	r3, r7, #28
 8008f28:	4619      	mov	r1, r3
 8008f2a:	480b      	ldr	r0, [pc, #44]	; (8008f58 <HAL_UART_MspInit+0x118>)
 8008f2c:	f000 fe0c 	bl	8009b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008f30:	2200      	movs	r2, #0
 8008f32:	2100      	movs	r1, #0
 8008f34:	2025      	movs	r0, #37	; 0x25
 8008f36:	f000 fd3e 	bl	80099b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008f3a:	2025      	movs	r0, #37	; 0x25
 8008f3c:	f000 fd57 	bl	80099ee <HAL_NVIC_EnableIRQ>
}
 8008f40:	bf00      	nop
 8008f42:	3730      	adds	r7, #48	; 0x30
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40007800 	.word	0x40007800
 8008f4c:	40023800 	.word	0x40023800
 8008f50:	40021000 	.word	0x40021000
 8008f54:	40011000 	.word	0x40011000
 8008f58:	40020400 	.word	0x40020400

08008f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008f60:	e7fe      	b.n	8008f60 <NMI_Handler+0x4>

08008f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f62:	b480      	push	{r7}
 8008f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f66:	e7fe      	b.n	8008f66 <HardFault_Handler+0x4>

08008f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f6c:	e7fe      	b.n	8008f6c <MemManage_Handler+0x4>

08008f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f72:	e7fe      	b.n	8008f72 <BusFault_Handler+0x4>

08008f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f78:	e7fe      	b.n	8008f78 <UsageFault_Handler+0x4>

08008f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008f7e:	bf00      	nop
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f8c:	bf00      	nop
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f96:	b480      	push	{r7}
 8008f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f9a:	bf00      	nop
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008fa8:	f000 f974 	bl	8009294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008fac:	bf00      	nop
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008fb4:	4802      	ldr	r0, [pc, #8]	; (8008fc0 <USART1_IRQHandler+0x10>)
 8008fb6:	f003 fbdf 	bl	800c778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008fba:	bf00      	nop
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000610 	.word	0x20000610

08008fc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008fc8:	4802      	ldr	r0, [pc, #8]	; (8008fd4 <OTG_FS_IRQHandler+0x10>)
 8008fca:	f001 f8d2 	bl	800a172 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008fce:	bf00      	nop
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20001d7c 	.word	0x20001d7c

08008fd8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8008fdc:	4802      	ldr	r0, [pc, #8]	; (8008fe8 <UART7_IRQHandler+0x10>)
 8008fde:	f003 fbcb 	bl	800c778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8008fe2:	bf00      	nop
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000490 	.word	0x20000490

08008fec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008fec:	b480      	push	{r7}
 8008fee:	af00      	add	r7, sp, #0
	return 1;
 8008ff0:	2301      	movs	r3, #1
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <_kill>:

int _kill(int pid, int sig)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009006:	f007 ff2b 	bl	8010e60 <__errno>
 800900a:	4603      	mov	r3, r0
 800900c:	2216      	movs	r2, #22
 800900e:	601a      	str	r2, [r3, #0]
	return -1;
 8009010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <_exit>:

void _exit (int status)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009024:	f04f 31ff 	mov.w	r1, #4294967295
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff ffe7 	bl	8008ffc <_kill>
	while (1) {}		/* Make sure we hang here */
 800902e:	e7fe      	b.n	800902e <_exit+0x12>

08009030 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	e00a      	b.n	8009058 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009042:	f3af 8000 	nop.w
 8009046:	4601      	mov	r1, r0
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	60ba      	str	r2, [r7, #8]
 800904e:	b2ca      	uxtb	r2, r1
 8009050:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	3301      	adds	r3, #1
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	429a      	cmp	r2, r3
 800905e:	dbf0      	blt.n	8009042 <_read+0x12>
	}

return len;
 8009060:	687b      	ldr	r3, [r7, #4]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b086      	sub	sp, #24
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
 800907a:	e009      	b.n	8009090 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	60ba      	str	r2, [r7, #8]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	4618      	mov	r0, r3
 8009086:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	3301      	adds	r3, #1
 800908e:	617b      	str	r3, [r7, #20]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	429a      	cmp	r2, r3
 8009096:	dbf1      	blt.n	800907c <_write+0x12>
	}
	return len;
 8009098:	687b      	ldr	r3, [r7, #4]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <_close>:

int _close(int file)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
	return -1;
 80090aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80090ca:	605a      	str	r2, [r3, #4]
	return 0;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <_isatty>:

int _isatty(int file)
{
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
	return 1;
 80090e2:	2301      	movs	r3, #1
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
	return 0;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
	...

0800910c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009114:	4a14      	ldr	r2, [pc, #80]	; (8009168 <_sbrk+0x5c>)
 8009116:	4b15      	ldr	r3, [pc, #84]	; (800916c <_sbrk+0x60>)
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009120:	4b13      	ldr	r3, [pc, #76]	; (8009170 <_sbrk+0x64>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d102      	bne.n	800912e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009128:	4b11      	ldr	r3, [pc, #68]	; (8009170 <_sbrk+0x64>)
 800912a:	4a12      	ldr	r2, [pc, #72]	; (8009174 <_sbrk+0x68>)
 800912c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800912e:	4b10      	ldr	r3, [pc, #64]	; (8009170 <_sbrk+0x64>)
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4413      	add	r3, r2
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	429a      	cmp	r2, r3
 800913a:	d207      	bcs.n	800914c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800913c:	f007 fe90 	bl	8010e60 <__errno>
 8009140:	4603      	mov	r3, r0
 8009142:	220c      	movs	r2, #12
 8009144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009146:	f04f 33ff 	mov.w	r3, #4294967295
 800914a:	e009      	b.n	8009160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800914c:	4b08      	ldr	r3, [pc, #32]	; (8009170 <_sbrk+0x64>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009152:	4b07      	ldr	r3, [pc, #28]	; (8009170 <_sbrk+0x64>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4413      	add	r3, r2
 800915a:	4a05      	ldr	r2, [pc, #20]	; (8009170 <_sbrk+0x64>)
 800915c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800915e:	68fb      	ldr	r3, [r7, #12]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20030000 	.word	0x20030000
 800916c:	00000400 	.word	0x00000400
 8009170:	2000025c 	.word	0x2000025c
 8009174:	20002198 	.word	0x20002198

08009178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800917c:	4b06      	ldr	r3, [pc, #24]	; (8009198 <SystemInit+0x20>)
 800917e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009182:	4a05      	ldr	r2, [pc, #20]	; (8009198 <SystemInit+0x20>)
 8009184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800918c:	bf00      	nop
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	e000ed00 	.word	0xe000ed00

0800919c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800919c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80091d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80091a0:	480d      	ldr	r0, [pc, #52]	; (80091d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80091a2:	490e      	ldr	r1, [pc, #56]	; (80091dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80091a4:	4a0e      	ldr	r2, [pc, #56]	; (80091e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80091a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091a8:	e002      	b.n	80091b0 <LoopCopyDataInit>

080091aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091ae:	3304      	adds	r3, #4

080091b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091b4:	d3f9      	bcc.n	80091aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091b6:	4a0b      	ldr	r2, [pc, #44]	; (80091e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80091b8:	4c0b      	ldr	r4, [pc, #44]	; (80091e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80091ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091bc:	e001      	b.n	80091c2 <LoopFillZerobss>

080091be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091c0:	3204      	adds	r2, #4

080091c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091c4:	d3fb      	bcc.n	80091be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80091c6:	f7ff ffd7 	bl	8009178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80091ca:	f007 fe61 	bl	8010e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80091ce:	f7fe fd2f 	bl	8007c30 <main>
  bx  lr    
 80091d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80091d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80091d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091dc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80091e0:	0801339c 	.word	0x0801339c
  ldr r2, =_sbss
 80091e4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80091e8:	20002194 	.word	0x20002194

080091ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80091ec:	e7fe      	b.n	80091ec <ADC_IRQHandler>
	...

080091f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80091f4:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <HAL_Init+0x40>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a0d      	ldr	r2, [pc, #52]	; (8009230 <HAL_Init+0x40>)
 80091fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009200:	4b0b      	ldr	r3, [pc, #44]	; (8009230 <HAL_Init+0x40>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a0a      	ldr	r2, [pc, #40]	; (8009230 <HAL_Init+0x40>)
 8009206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800920a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800920c:	4b08      	ldr	r3, [pc, #32]	; (8009230 <HAL_Init+0x40>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a07      	ldr	r2, [pc, #28]	; (8009230 <HAL_Init+0x40>)
 8009212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009218:	2003      	movs	r0, #3
 800921a:	f000 fbc1 	bl	80099a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800921e:	200f      	movs	r0, #15
 8009220:	f000 f808 	bl	8009234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009224:	f7ff fc98 	bl	8008b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40023c00 	.word	0x40023c00

08009234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800923c:	4b12      	ldr	r3, [pc, #72]	; (8009288 <HAL_InitTick+0x54>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4b12      	ldr	r3, [pc, #72]	; (800928c <HAL_InitTick+0x58>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	4619      	mov	r1, r3
 8009246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800924a:	fbb3 f3f1 	udiv	r3, r3, r1
 800924e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fbd9 	bl	8009a0a <HAL_SYSTICK_Config>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e00e      	b.n	8009280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b0f      	cmp	r3, #15
 8009266:	d80a      	bhi.n	800927e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009268:	2200      	movs	r2, #0
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	f000 fba1 	bl	80099b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009274:	4a06      	ldr	r2, [pc, #24]	; (8009290 <HAL_InitTick+0x5c>)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	e000      	b.n	8009280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000000 	.word	0x20000000
 800928c:	20000008 	.word	0x20000008
 8009290:	20000004 	.word	0x20000004

08009294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009298:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <HAL_IncTick+0x20>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	4b06      	ldr	r3, [pc, #24]	; (80092b8 <HAL_IncTick+0x24>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4413      	add	r3, r2
 80092a4:	4a04      	ldr	r2, [pc, #16]	; (80092b8 <HAL_IncTick+0x24>)
 80092a6:	6013      	str	r3, [r2, #0]
}
 80092a8:	bf00      	nop
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	20000008 	.word	0x20000008
 80092b8:	200008a8 	.word	0x200008a8

080092bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
  return uwTick;
 80092c0:	4b03      	ldr	r3, [pc, #12]	; (80092d0 <HAL_GetTick+0x14>)
 80092c2:	681b      	ldr	r3, [r3, #0]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	200008a8 	.word	0x200008a8

080092d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092dc:	f7ff ffee 	bl	80092bc <HAL_GetTick>
 80092e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ec:	d005      	beq.n	80092fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80092ee:	4b0a      	ldr	r3, [pc, #40]	; (8009318 <HAL_Delay+0x44>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80092fa:	bf00      	nop
 80092fc:	f7ff ffde 	bl	80092bc <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	429a      	cmp	r2, r3
 800930a:	d8f7      	bhi.n	80092fc <HAL_Delay+0x28>
  {
  }
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000008 	.word	0x20000008

0800931c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e033      	b.n	800939a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d109      	bne.n	800934e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7ff fc34 	bl	8008ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	f003 0310 	and.w	r3, r3, #16
 8009356:	2b00      	cmp	r3, #0
 8009358:	d118      	bne.n	800938c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009362:	f023 0302 	bic.w	r3, r3, #2
 8009366:	f043 0202 	orr.w	r2, r3, #2
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f94a 	bl	8009608 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	f023 0303 	bic.w	r3, r3, #3
 8009382:	f043 0201 	orr.w	r2, r3, #1
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	641a      	str	r2, [r3, #64]	; 0x40
 800938a:	e001      	b.n	8009390 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d101      	bne.n	80093c0 <HAL_ADC_ConfigChannel+0x1c>
 80093bc:	2302      	movs	r3, #2
 80093be:	e113      	b.n	80095e8 <HAL_ADC_ConfigChannel+0x244>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b09      	cmp	r3, #9
 80093ce:	d925      	bls.n	800941c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68d9      	ldr	r1, [r3, #12]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	b29b      	uxth	r3, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	4613      	mov	r3, r2
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	4413      	add	r3, r2
 80093e4:	3b1e      	subs	r3, #30
 80093e6:	2207      	movs	r2, #7
 80093e8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ec:	43da      	mvns	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	400a      	ands	r2, r1
 80093f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68d9      	ldr	r1, [r3, #12]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	4618      	mov	r0, r3
 8009408:	4603      	mov	r3, r0
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	4403      	add	r3, r0
 800940e:	3b1e      	subs	r3, #30
 8009410:	409a      	lsls	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	60da      	str	r2, [r3, #12]
 800941a:	e022      	b.n	8009462 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6919      	ldr	r1, [r3, #16]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	461a      	mov	r2, r3
 800942a:	4613      	mov	r3, r2
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	4413      	add	r3, r2
 8009430:	2207      	movs	r2, #7
 8009432:	fa02 f303 	lsl.w	r3, r2, r3
 8009436:	43da      	mvns	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	400a      	ands	r2, r1
 800943e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6919      	ldr	r1, [r3, #16]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	689a      	ldr	r2, [r3, #8]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	b29b      	uxth	r3, r3
 8009450:	4618      	mov	r0, r3
 8009452:	4603      	mov	r3, r0
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	4403      	add	r3, r0
 8009458:	409a      	lsls	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2b06      	cmp	r3, #6
 8009468:	d824      	bhi.n	80094b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	4613      	mov	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	3b05      	subs	r3, #5
 800947c:	221f      	movs	r2, #31
 800947e:	fa02 f303 	lsl.w	r3, r2, r3
 8009482:	43da      	mvns	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	400a      	ands	r2, r1
 800948a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	b29b      	uxth	r3, r3
 8009498:	4618      	mov	r0, r3
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	3b05      	subs	r3, #5
 80094a6:	fa00 f203 	lsl.w	r2, r0, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	635a      	str	r2, [r3, #52]	; 0x34
 80094b2:	e04c      	b.n	800954e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2b0c      	cmp	r3, #12
 80094ba:	d824      	bhi.n	8009506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	3b23      	subs	r3, #35	; 0x23
 80094ce:	221f      	movs	r2, #31
 80094d0:	fa02 f303 	lsl.w	r3, r2, r3
 80094d4:	43da      	mvns	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	400a      	ands	r2, r1
 80094dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	4618      	mov	r0, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	3b23      	subs	r3, #35	; 0x23
 80094f8:	fa00 f203 	lsl.w	r2, r0, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	430a      	orrs	r2, r1
 8009502:	631a      	str	r2, [r3, #48]	; 0x30
 8009504:	e023      	b.n	800954e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	3b41      	subs	r3, #65	; 0x41
 8009518:	221f      	movs	r2, #31
 800951a:	fa02 f303 	lsl.w	r3, r2, r3
 800951e:	43da      	mvns	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	400a      	ands	r2, r1
 8009526:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	b29b      	uxth	r3, r3
 8009534:	4618      	mov	r0, r3
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	3b41      	subs	r3, #65	; 0x41
 8009542:	fa00 f203 	lsl.w	r2, r0, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800954e:	4b29      	ldr	r3, [pc, #164]	; (80095f4 <HAL_ADC_ConfigChannel+0x250>)
 8009550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a28      	ldr	r2, [pc, #160]	; (80095f8 <HAL_ADC_ConfigChannel+0x254>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d10f      	bne.n	800957c <HAL_ADC_ConfigChannel+0x1d8>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b12      	cmp	r3, #18
 8009562:	d10b      	bne.n	800957c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a1d      	ldr	r2, [pc, #116]	; (80095f8 <HAL_ADC_ConfigChannel+0x254>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d12b      	bne.n	80095de <HAL_ADC_ConfigChannel+0x23a>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a1c      	ldr	r2, [pc, #112]	; (80095fc <HAL_ADC_ConfigChannel+0x258>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <HAL_ADC_ConfigChannel+0x1f4>
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b11      	cmp	r3, #17
 8009596:	d122      	bne.n	80095de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a11      	ldr	r2, [pc, #68]	; (80095fc <HAL_ADC_ConfigChannel+0x258>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d111      	bne.n	80095de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80095ba:	4b11      	ldr	r3, [pc, #68]	; (8009600 <HAL_ADC_ConfigChannel+0x25c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a11      	ldr	r2, [pc, #68]	; (8009604 <HAL_ADC_ConfigChannel+0x260>)
 80095c0:	fba2 2303 	umull	r2, r3, r2, r3
 80095c4:	0c9a      	lsrs	r2, r3, #18
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	005b      	lsls	r3, r3, #1
 80095ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80095d0:	e002      	b.n	80095d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f9      	bne.n	80095d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	40012300 	.word	0x40012300
 80095f8:	40012000 	.word	0x40012000
 80095fc:	10000012 	.word	0x10000012
 8009600:	20000000 	.word	0x20000000
 8009604:	431bde83 	.word	0x431bde83

08009608 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009610:	4b79      	ldr	r3, [pc, #484]	; (80097f8 <ADC_Init+0x1f0>)
 8009612:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	431a      	orrs	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800963c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6859      	ldr	r1, [r3, #4]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	021a      	lsls	r2, r3, #8
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6859      	ldr	r1, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689a      	ldr	r2, [r3, #8]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689a      	ldr	r2, [r3, #8]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6899      	ldr	r1, [r3, #8]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68da      	ldr	r2, [r3, #12]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969a:	4a58      	ldr	r2, [pc, #352]	; (80097fc <ADC_Init+0x1f4>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d022      	beq.n	80096e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6899      	ldr	r1, [r3, #8]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689a      	ldr	r2, [r3, #8]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80096d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6899      	ldr	r1, [r3, #8]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	609a      	str	r2, [r3, #8]
 80096e4:	e00f      	b.n	8009706 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	689a      	ldr	r2, [r3, #8]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009704:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689a      	ldr	r2, [r3, #8]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 0202 	bic.w	r2, r2, #2
 8009714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6899      	ldr	r1, [r3, #8]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	7e1b      	ldrb	r3, [r3, #24]
 8009720:	005a      	lsls	r2, r3, #1
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01b      	beq.n	800976c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009742:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009752:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6859      	ldr	r1, [r3, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	3b01      	subs	r3, #1
 8009760:	035a      	lsls	r2, r3, #13
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	605a      	str	r2, [r3, #4]
 800976a:	e007      	b.n	800977c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800977a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800978a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	3b01      	subs	r3, #1
 8009798:	051a      	lsls	r2, r3, #20
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80097b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6899      	ldr	r1, [r3, #8]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097be:	025a      	lsls	r2, r3, #9
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	430a      	orrs	r2, r1
 80097c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6899      	ldr	r1, [r3, #8]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	029a      	lsls	r2, r3, #10
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	430a      	orrs	r2, r1
 80097ea:	609a      	str	r2, [r3, #8]
}
 80097ec:	bf00      	nop
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	40012300 	.word	0x40012300
 80097fc:	0f000001 	.word	0x0f000001

08009800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009810:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <__NVIC_SetPriorityGrouping+0x44>)
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800981c:	4013      	ands	r3, r2
 800981e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800982c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009832:	4a04      	ldr	r2, [pc, #16]	; (8009844 <__NVIC_SetPriorityGrouping+0x44>)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	60d3      	str	r3, [r2, #12]
}
 8009838:	bf00      	nop
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	e000ed00 	.word	0xe000ed00

08009848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800984c:	4b04      	ldr	r3, [pc, #16]	; (8009860 <__NVIC_GetPriorityGrouping+0x18>)
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	0a1b      	lsrs	r3, r3, #8
 8009852:	f003 0307 	and.w	r3, r3, #7
}
 8009856:	4618      	mov	r0, r3
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	e000ed00 	.word	0xe000ed00

08009864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800986e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009872:	2b00      	cmp	r3, #0
 8009874:	db0b      	blt.n	800988e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	f003 021f 	and.w	r2, r3, #31
 800987c:	4907      	ldr	r1, [pc, #28]	; (800989c <__NVIC_EnableIRQ+0x38>)
 800987e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009882:	095b      	lsrs	r3, r3, #5
 8009884:	2001      	movs	r0, #1
 8009886:	fa00 f202 	lsl.w	r2, r0, r2
 800988a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800988e:	bf00      	nop
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	e000e100 	.word	0xe000e100

080098a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	6039      	str	r1, [r7, #0]
 80098aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	db0a      	blt.n	80098ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	490c      	ldr	r1, [pc, #48]	; (80098ec <__NVIC_SetPriority+0x4c>)
 80098ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098be:	0112      	lsls	r2, r2, #4
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	440b      	add	r3, r1
 80098c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80098c8:	e00a      	b.n	80098e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	4908      	ldr	r1, [pc, #32]	; (80098f0 <__NVIC_SetPriority+0x50>)
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	f003 030f 	and.w	r3, r3, #15
 80098d6:	3b04      	subs	r3, #4
 80098d8:	0112      	lsls	r2, r2, #4
 80098da:	b2d2      	uxtb	r2, r2
 80098dc:	440b      	add	r3, r1
 80098de:	761a      	strb	r2, [r3, #24]
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	e000e100 	.word	0xe000e100
 80098f0:	e000ed00 	.word	0xe000ed00

080098f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b089      	sub	sp, #36	; 0x24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f003 0307 	and.w	r3, r3, #7
 8009906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	f1c3 0307 	rsb	r3, r3, #7
 800990e:	2b04      	cmp	r3, #4
 8009910:	bf28      	it	cs
 8009912:	2304      	movcs	r3, #4
 8009914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	3304      	adds	r3, #4
 800991a:	2b06      	cmp	r3, #6
 800991c:	d902      	bls.n	8009924 <NVIC_EncodePriority+0x30>
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	3b03      	subs	r3, #3
 8009922:	e000      	b.n	8009926 <NVIC_EncodePriority+0x32>
 8009924:	2300      	movs	r3, #0
 8009926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009928:	f04f 32ff 	mov.w	r2, #4294967295
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	fa02 f303 	lsl.w	r3, r2, r3
 8009932:	43da      	mvns	r2, r3
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	401a      	ands	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800993c:	f04f 31ff 	mov.w	r1, #4294967295
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	fa01 f303 	lsl.w	r3, r1, r3
 8009946:	43d9      	mvns	r1, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800994c:	4313      	orrs	r3, r2
         );
}
 800994e:	4618      	mov	r0, r3
 8009950:	3724      	adds	r7, #36	; 0x24
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
	...

0800995c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3b01      	subs	r3, #1
 8009968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800996c:	d301      	bcc.n	8009972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800996e:	2301      	movs	r3, #1
 8009970:	e00f      	b.n	8009992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009972:	4a0a      	ldr	r2, [pc, #40]	; (800999c <SysTick_Config+0x40>)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3b01      	subs	r3, #1
 8009978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800997a:	210f      	movs	r1, #15
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	f7ff ff8e 	bl	80098a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009984:	4b05      	ldr	r3, [pc, #20]	; (800999c <SysTick_Config+0x40>)
 8009986:	2200      	movs	r2, #0
 8009988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800998a:	4b04      	ldr	r3, [pc, #16]	; (800999c <SysTick_Config+0x40>)
 800998c:	2207      	movs	r2, #7
 800998e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	e000e010 	.word	0xe000e010

080099a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff ff29 	bl	8009800 <__NVIC_SetPriorityGrouping>
}
 80099ae:	bf00      	nop
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b086      	sub	sp, #24
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	4603      	mov	r3, r0
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]
 80099c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80099c4:	2300      	movs	r3, #0
 80099c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80099c8:	f7ff ff3e 	bl	8009848 <__NVIC_GetPriorityGrouping>
 80099cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	68b9      	ldr	r1, [r7, #8]
 80099d2:	6978      	ldr	r0, [r7, #20]
 80099d4:	f7ff ff8e 	bl	80098f4 <NVIC_EncodePriority>
 80099d8:	4602      	mov	r2, r0
 80099da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099de:	4611      	mov	r1, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff ff5d 	bl	80098a0 <__NVIC_SetPriority>
}
 80099e6:	bf00      	nop
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	4603      	mov	r3, r0
 80099f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80099f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff ff31 	bl	8009864 <__NVIC_EnableIRQ>
}
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff ffa2 	bl	800995c <SysTick_Config>
 8009a18:	4603      	mov	r3, r0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009a30:	f7ff fc44 	bl	80092bc <HAL_GetTick>
 8009a34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d008      	beq.n	8009a54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2280      	movs	r2, #128	; 0x80
 8009a46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e052      	b.n	8009afa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f022 0216 	bic.w	r2, r2, #22
 8009a62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695a      	ldr	r2, [r3, #20]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d103      	bne.n	8009a84 <HAL_DMA_Abort+0x62>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d007      	beq.n	8009a94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0208 	bic.w	r2, r2, #8
 8009a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 0201 	bic.w	r2, r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009aa4:	e013      	b.n	8009ace <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009aa6:	f7ff fc09 	bl	80092bc <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b05      	cmp	r3, #5
 8009ab2:	d90c      	bls.n	8009ace <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2203      	movs	r2, #3
 8009abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e015      	b.n	8009afa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e4      	bne.n	8009aa6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ae0:	223f      	movs	r2, #63	; 0x3f
 8009ae2:	409a      	lsls	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d004      	beq.n	8009b20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2280      	movs	r2, #128	; 0x80
 8009b1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e00c      	b.n	8009b3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2205      	movs	r2, #5
 8009b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f022 0201 	bic.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
	...

08009b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b089      	sub	sp, #36	; 0x24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	e177      	b.n	8009e54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009b64:	2201      	movs	r2, #1
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	4013      	ands	r3, r2
 8009b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	f040 8166 	bne.w	8009e4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d005      	beq.n	8009b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d130      	bne.n	8009bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8009baa:	43db      	mvns	r3, r3
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd8:	43db      	mvns	r3, r3
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	4013      	ands	r3, r2
 8009bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	091b      	lsrs	r3, r3, #4
 8009be6:	f003 0201 	and.w	r2, r3, #1
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	69ba      	ldr	r2, [r7, #24]
 8009bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f003 0303 	and.w	r3, r3, #3
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d017      	beq.n	8009c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	2203      	movs	r2, #3
 8009c14:	fa02 f303 	lsl.w	r3, r2, r3
 8009c18:	43db      	mvns	r3, r3
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d123      	bne.n	8009c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	08da      	lsrs	r2, r3, #3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3208      	adds	r2, #8
 8009c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	f003 0307 	and.w	r3, r3, #7
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	220f      	movs	r2, #15
 8009c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c60:	43db      	mvns	r3, r3
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	4013      	ands	r3, r2
 8009c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	691a      	ldr	r2, [r3, #16]
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	fa02 f303 	lsl.w	r3, r2, r3
 8009c78:	69ba      	ldr	r2, [r7, #24]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	08da      	lsrs	r2, r3, #3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	3208      	adds	r2, #8
 8009c86:	69b9      	ldr	r1, [r7, #24]
 8009c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	2203      	movs	r2, #3
 8009c98:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9c:	43db      	mvns	r3, r3
 8009c9e:	69ba      	ldr	r2, [r7, #24]
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f003 0203 	and.w	r2, r3, #3
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 80c0 	beq.w	8009e4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	4b66      	ldr	r3, [pc, #408]	; (8009e6c <HAL_GPIO_Init+0x324>)
 8009cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd6:	4a65      	ldr	r2, [pc, #404]	; (8009e6c <HAL_GPIO_Init+0x324>)
 8009cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8009cde:	4b63      	ldr	r3, [pc, #396]	; (8009e6c <HAL_GPIO_Init+0x324>)
 8009ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009cea:	4a61      	ldr	r2, [pc, #388]	; (8009e70 <HAL_GPIO_Init+0x328>)
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	089b      	lsrs	r3, r3, #2
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	220f      	movs	r2, #15
 8009d02:	fa02 f303 	lsl.w	r3, r2, r3
 8009d06:	43db      	mvns	r3, r3
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a58      	ldr	r2, [pc, #352]	; (8009e74 <HAL_GPIO_Init+0x32c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d037      	beq.n	8009d86 <HAL_GPIO_Init+0x23e>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a57      	ldr	r2, [pc, #348]	; (8009e78 <HAL_GPIO_Init+0x330>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d031      	beq.n	8009d82 <HAL_GPIO_Init+0x23a>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a56      	ldr	r2, [pc, #344]	; (8009e7c <HAL_GPIO_Init+0x334>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d02b      	beq.n	8009d7e <HAL_GPIO_Init+0x236>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a55      	ldr	r2, [pc, #340]	; (8009e80 <HAL_GPIO_Init+0x338>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d025      	beq.n	8009d7a <HAL_GPIO_Init+0x232>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a54      	ldr	r2, [pc, #336]	; (8009e84 <HAL_GPIO_Init+0x33c>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d01f      	beq.n	8009d76 <HAL_GPIO_Init+0x22e>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a53      	ldr	r2, [pc, #332]	; (8009e88 <HAL_GPIO_Init+0x340>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d019      	beq.n	8009d72 <HAL_GPIO_Init+0x22a>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a52      	ldr	r2, [pc, #328]	; (8009e8c <HAL_GPIO_Init+0x344>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d013      	beq.n	8009d6e <HAL_GPIO_Init+0x226>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a51      	ldr	r2, [pc, #324]	; (8009e90 <HAL_GPIO_Init+0x348>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d00d      	beq.n	8009d6a <HAL_GPIO_Init+0x222>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a50      	ldr	r2, [pc, #320]	; (8009e94 <HAL_GPIO_Init+0x34c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d007      	beq.n	8009d66 <HAL_GPIO_Init+0x21e>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a4f      	ldr	r2, [pc, #316]	; (8009e98 <HAL_GPIO_Init+0x350>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d101      	bne.n	8009d62 <HAL_GPIO_Init+0x21a>
 8009d5e:	2309      	movs	r3, #9
 8009d60:	e012      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d62:	230a      	movs	r3, #10
 8009d64:	e010      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d66:	2308      	movs	r3, #8
 8009d68:	e00e      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d6a:	2307      	movs	r3, #7
 8009d6c:	e00c      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d6e:	2306      	movs	r3, #6
 8009d70:	e00a      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d72:	2305      	movs	r3, #5
 8009d74:	e008      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d76:	2304      	movs	r3, #4
 8009d78:	e006      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e004      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e002      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e000      	b.n	8009d88 <HAL_GPIO_Init+0x240>
 8009d86:	2300      	movs	r3, #0
 8009d88:	69fa      	ldr	r2, [r7, #28]
 8009d8a:	f002 0203 	and.w	r2, r2, #3
 8009d8e:	0092      	lsls	r2, r2, #2
 8009d90:	4093      	lsls	r3, r2
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d98:	4935      	ldr	r1, [pc, #212]	; (8009e70 <HAL_GPIO_Init+0x328>)
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	089b      	lsrs	r3, r3, #2
 8009d9e:	3302      	adds	r3, #2
 8009da0:	69ba      	ldr	r2, [r7, #24]
 8009da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009da6:	4b3d      	ldr	r3, [pc, #244]	; (8009e9c <HAL_GPIO_Init+0x354>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	43db      	mvns	r3, r3
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	4013      	ands	r3, r2
 8009db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009dca:	4a34      	ldr	r2, [pc, #208]	; (8009e9c <HAL_GPIO_Init+0x354>)
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009dd0:	4b32      	ldr	r3, [pc, #200]	; (8009e9c <HAL_GPIO_Init+0x354>)
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	43db      	mvns	r3, r3
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009dec:	69ba      	ldr	r2, [r7, #24]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009df4:	4a29      	ldr	r2, [pc, #164]	; (8009e9c <HAL_GPIO_Init+0x354>)
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009dfa:	4b28      	ldr	r3, [pc, #160]	; (8009e9c <HAL_GPIO_Init+0x354>)
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	43db      	mvns	r3, r3
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	4013      	ands	r3, r2
 8009e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009e1e:	4a1f      	ldr	r2, [pc, #124]	; (8009e9c <HAL_GPIO_Init+0x354>)
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009e24:	4b1d      	ldr	r3, [pc, #116]	; (8009e9c <HAL_GPIO_Init+0x354>)
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	43db      	mvns	r3, r3
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	4013      	ands	r3, r2
 8009e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d003      	beq.n	8009e48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009e48:	4a14      	ldr	r2, [pc, #80]	; (8009e9c <HAL_GPIO_Init+0x354>)
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	3301      	adds	r3, #1
 8009e52:	61fb      	str	r3, [r7, #28]
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	2b0f      	cmp	r3, #15
 8009e58:	f67f ae84 	bls.w	8009b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009e5c:	bf00      	nop
 8009e5e:	bf00      	nop
 8009e60:	3724      	adds	r7, #36	; 0x24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	40023800 	.word	0x40023800
 8009e70:	40013800 	.word	0x40013800
 8009e74:	40020000 	.word	0x40020000
 8009e78:	40020400 	.word	0x40020400
 8009e7c:	40020800 	.word	0x40020800
 8009e80:	40020c00 	.word	0x40020c00
 8009e84:	40021000 	.word	0x40021000
 8009e88:	40021400 	.word	0x40021400
 8009e8c:	40021800 	.word	0x40021800
 8009e90:	40021c00 	.word	0x40021c00
 8009e94:	40022000 	.word	0x40022000
 8009e98:	40022400 	.word	0x40022400
 8009e9c:	40013c00 	.word	0x40013c00

08009ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	807b      	strh	r3, [r7, #2]
 8009eac:	4613      	mov	r3, r2
 8009eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009eb0:	787b      	ldrb	r3, [r7, #1]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009eb6:	887a      	ldrh	r2, [r7, #2]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009ebc:	e003      	b.n	8009ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009ebe:	887b      	ldrh	r3, [r7, #2]
 8009ec0:	041a      	lsls	r2, r3, #16
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	619a      	str	r2, [r3, #24]
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed4:	b08f      	sub	sp, #60	; 0x3c
 8009ed6:	af0a      	add	r7, sp, #40	; 0x28
 8009ed8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e10f      	b.n	800a104 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f006 fc7c 	bl	80107fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2203      	movs	r2, #3
 8009f08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f003 fbc5 	bl	800d6b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	603b      	str	r3, [r7, #0]
 8009f2e:	687e      	ldr	r6, [r7, #4]
 8009f30:	466d      	mov	r5, sp
 8009f32:	f106 0410 	add.w	r4, r6, #16
 8009f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009f42:	e885 0003 	stmia.w	r5, {r0, r1}
 8009f46:	1d33      	adds	r3, r6, #4
 8009f48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f4a:	6838      	ldr	r0, [r7, #0]
 8009f4c:	f003 fa9c 	bl	800d488 <USB_CoreInit>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d005      	beq.n	8009f62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2202      	movs	r2, #2
 8009f5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e0d0      	b.n	800a104 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2100      	movs	r1, #0
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f003 fbb3 	bl	800d6d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]
 8009f72:	e04a      	b.n	800a00a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009f74:	7bfa      	ldrb	r2, [r7, #15]
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	1a9b      	subs	r3, r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	333d      	adds	r3, #61	; 0x3d
 8009f84:	2201      	movs	r2, #1
 8009f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009f88:	7bfa      	ldrb	r2, [r7, #15]
 8009f8a:	6879      	ldr	r1, [r7, #4]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	00db      	lsls	r3, r3, #3
 8009f90:	1a9b      	subs	r3, r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	440b      	add	r3, r1
 8009f96:	333c      	adds	r3, #60	; 0x3c
 8009f98:	7bfa      	ldrb	r2, [r7, #15]
 8009f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009f9c:	7bfa      	ldrb	r2, [r7, #15]
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
 8009fa0:	b298      	uxth	r0, r3
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	1a9b      	subs	r3, r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	440b      	add	r3, r1
 8009fae:	3342      	adds	r3, #66	; 0x42
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009fb4:	7bfa      	ldrb	r2, [r7, #15]
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	1a9b      	subs	r3, r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	333f      	adds	r3, #63	; 0x3f
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009fc8:	7bfa      	ldrb	r2, [r7, #15]
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	00db      	lsls	r3, r3, #3
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	3344      	adds	r3, #68	; 0x44
 8009fd8:	2200      	movs	r2, #0
 8009fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009fdc:	7bfa      	ldrb	r2, [r7, #15]
 8009fde:	6879      	ldr	r1, [r7, #4]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	440b      	add	r3, r1
 8009fea:	3348      	adds	r3, #72	; 0x48
 8009fec:	2200      	movs	r2, #0
 8009fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009ff0:	7bfa      	ldrb	r2, [r7, #15]
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	1a9b      	subs	r3, r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	440b      	add	r3, r1
 8009ffe:	3350      	adds	r3, #80	; 0x50
 800a000:	2200      	movs	r2, #0
 800a002:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	3301      	adds	r3, #1
 800a008:	73fb      	strb	r3, [r7, #15]
 800a00a:	7bfa      	ldrb	r2, [r7, #15]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d3af      	bcc.n	8009f74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a014:	2300      	movs	r3, #0
 800a016:	73fb      	strb	r3, [r7, #15]
 800a018:	e044      	b.n	800a0a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a01a:	7bfa      	ldrb	r2, [r7, #15]
 800a01c:	6879      	ldr	r1, [r7, #4]
 800a01e:	4613      	mov	r3, r2
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	1a9b      	subs	r3, r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	440b      	add	r3, r1
 800a028:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a02c:	2200      	movs	r2, #0
 800a02e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a030:	7bfa      	ldrb	r2, [r7, #15]
 800a032:	6879      	ldr	r1, [r7, #4]
 800a034:	4613      	mov	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	1a9b      	subs	r3, r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	440b      	add	r3, r1
 800a03e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a042:	7bfa      	ldrb	r2, [r7, #15]
 800a044:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a046:	7bfa      	ldrb	r2, [r7, #15]
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	4613      	mov	r3, r2
 800a04c:	00db      	lsls	r3, r3, #3
 800a04e:	1a9b      	subs	r3, r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	440b      	add	r3, r1
 800a054:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a05c:	7bfa      	ldrb	r2, [r7, #15]
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	4613      	mov	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	1a9b      	subs	r3, r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a06e:	2200      	movs	r2, #0
 800a070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a072:	7bfa      	ldrb	r2, [r7, #15]
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	4613      	mov	r3, r2
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	1a9b      	subs	r3, r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	440b      	add	r3, r1
 800a080:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a088:	7bfa      	ldrb	r2, [r7, #15]
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	4613      	mov	r3, r2
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	1a9b      	subs	r3, r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	440b      	add	r3, r1
 800a096:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a09a:	2200      	movs	r2, #0
 800a09c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	73fb      	strb	r3, [r7, #15]
 800a0a4:	7bfa      	ldrb	r2, [r7, #15]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d3b5      	bcc.n	800a01a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	687e      	ldr	r6, [r7, #4]
 800a0b6:	466d      	mov	r5, sp
 800a0b8:	f106 0410 	add.w	r4, r6, #16
 800a0bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a0c8:	e885 0003 	stmia.w	r5, {r0, r1}
 800a0cc:	1d33      	adds	r3, r6, #4
 800a0ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0d0:	6838      	ldr	r0, [r7, #0]
 800a0d2:	f003 fb4b 	bl	800d76c <USB_DevInit>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e00d      	b.n	800a104 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f004 fbc7 	bl	800e890 <USB_DevDisconnect>

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a10c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a120:	2b01      	cmp	r3, #1
 800a122:	d101      	bne.n	800a128 <HAL_PCD_Start+0x1c>
 800a124:	2302      	movs	r3, #2
 800a126:	e020      	b.n	800a16a <HAL_PCD_Start+0x5e>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	2b01      	cmp	r3, #1
 800a136:	d109      	bne.n	800a14c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d005      	beq.n	800a14c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a144:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	f003 fa9d 	bl	800d690 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f004 fb77 	bl	800e84e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a172:	b590      	push	{r4, r7, lr}
 800a174:	b08d      	sub	sp, #52	; 0x34
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4618      	mov	r0, r3
 800a18a:	f004 fc35 	bl	800e9f8 <USB_GetMode>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	f040 839d 	bne.w	800a8d0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f004 fb99 	bl	800e8d2 <USB_ReadInterrupts>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 8393 	beq.w	800a8ce <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f004 fb90 	bl	800e8d2 <USB_ReadInterrupts>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d107      	bne.n	800a1cc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	695a      	ldr	r2, [r3, #20]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f002 0202 	and.w	r2, r2, #2
 800a1ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f004 fb7e 	bl	800e8d2 <USB_ReadInterrupts>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	f003 0310 	and.w	r3, r3, #16
 800a1dc:	2b10      	cmp	r3, #16
 800a1de:	d161      	bne.n	800a2a4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	699a      	ldr	r2, [r3, #24]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 0210 	bic.w	r2, r2, #16
 800a1ee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f003 020f 	and.w	r2, r3, #15
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	1a9b      	subs	r3, r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	4413      	add	r3, r2
 800a20c:	3304      	adds	r3, #4
 800a20e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	0c5b      	lsrs	r3, r3, #17
 800a214:	f003 030f 	and.w	r3, r3, #15
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d124      	bne.n	800a266 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a222:	4013      	ands	r3, r2
 800a224:	2b00      	cmp	r3, #0
 800a226:	d035      	beq.n	800a294 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	091b      	lsrs	r3, r3, #4
 800a230:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a236:	b29b      	uxth	r3, r3
 800a238:	461a      	mov	r2, r3
 800a23a:	6a38      	ldr	r0, [r7, #32]
 800a23c:	f004 f9b5 	bl	800e5aa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	091b      	lsrs	r3, r3, #4
 800a248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a24c:	441a      	add	r2, r3
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	699a      	ldr	r2, [r3, #24]
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	091b      	lsrs	r3, r3, #4
 800a25a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a25e:	441a      	add	r2, r3
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	619a      	str	r2, [r3, #24]
 800a264:	e016      	b.n	800a294 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	0c5b      	lsrs	r3, r3, #17
 800a26a:	f003 030f 	and.w	r3, r3, #15
 800a26e:	2b06      	cmp	r3, #6
 800a270:	d110      	bne.n	800a294 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a278:	2208      	movs	r2, #8
 800a27a:	4619      	mov	r1, r3
 800a27c:	6a38      	ldr	r0, [r7, #32]
 800a27e:	f004 f994 	bl	800e5aa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	699a      	ldr	r2, [r3, #24]
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	091b      	lsrs	r3, r3, #4
 800a28a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a28e:	441a      	add	r2, r3
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	699a      	ldr	r2, [r3, #24]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f042 0210 	orr.w	r2, r2, #16
 800a2a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f004 fb12 	bl	800e8d2 <USB_ReadInterrupts>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a2b8:	d16e      	bne.n	800a398 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f004 fb18 	bl	800e8f8 <USB_ReadDevAllOutEpInterrupt>
 800a2c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a2ca:	e062      	b.n	800a392 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d057      	beq.n	800a386 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2dc:	b2d2      	uxtb	r2, r2
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f004 fb3d 	bl	800e960 <USB_ReadDevOutEPInterrupt>
 800a2e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00c      	beq.n	800a30c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fe:	461a      	mov	r2, r3
 800a300:	2301      	movs	r3, #1
 800a302:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fdb0 	bl	800ae6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f003 0308 	and.w	r3, r3, #8
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00c      	beq.n	800a330 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a322:	461a      	mov	r2, r3
 800a324:	2308      	movs	r3, #8
 800a326:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a328:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 feaa 	bl	800b084 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f003 0310 	and.w	r3, r3, #16
 800a336:	2b00      	cmp	r3, #0
 800a338:	d008      	beq.n	800a34c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a346:	461a      	mov	r2, r3
 800a348:	2310      	movs	r3, #16
 800a34a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f003 0320 	and.w	r3, r3, #32
 800a352:	2b00      	cmp	r3, #0
 800a354:	d008      	beq.n	800a368 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a362:	461a      	mov	r2, r3
 800a364:	2320      	movs	r3, #32
 800a366:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d009      	beq.n	800a386 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37e:	461a      	mov	r2, r3
 800a380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a384:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	3301      	adds	r3, #1
 800a38a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	085b      	lsrs	r3, r3, #1
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	2b00      	cmp	r3, #0
 800a396:	d199      	bne.n	800a2cc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f004 fa98 	bl	800e8d2 <USB_ReadInterrupts>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3ac:	f040 80c0 	bne.w	800a530 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f004 fab9 	bl	800e92c <USB_ReadDevAllInEpInterrupt>
 800a3ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a3c0:	e0b2      	b.n	800a528 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 80a7 	beq.w	800a51c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d4:	b2d2      	uxtb	r2, r2
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f004 fadf 	bl	800e99c <USB_ReadDevInEPInterrupt>
 800a3de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d057      	beq.n	800a49a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	f003 030f 	and.w	r3, r3, #15
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	43db      	mvns	r3, r3
 800a404:	69f9      	ldr	r1, [r7, #28]
 800a406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a40a:	4013      	ands	r3, r2
 800a40c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41a:	461a      	mov	r2, r3
 800a41c:	2301      	movs	r3, #1
 800a41e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d132      	bne.n	800a48e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42c:	4613      	mov	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	1a9b      	subs	r3, r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	440b      	add	r3, r1
 800a436:	3348      	adds	r3, #72	; 0x48
 800a438:	6819      	ldr	r1, [r3, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a43e:	4613      	mov	r3, r2
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	1a9b      	subs	r3, r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4403      	add	r3, r0
 800a448:	3344      	adds	r3, #68	; 0x44
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4419      	add	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a452:	4613      	mov	r3, r2
 800a454:	00db      	lsls	r3, r3, #3
 800a456:	1a9b      	subs	r3, r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4403      	add	r3, r0
 800a45c:	3348      	adds	r3, #72	; 0x48
 800a45e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	2b00      	cmp	r3, #0
 800a464:	d113      	bne.n	800a48e <HAL_PCD_IRQHandler+0x31c>
 800a466:	6879      	ldr	r1, [r7, #4]
 800a468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46a:	4613      	mov	r3, r2
 800a46c:	00db      	lsls	r3, r3, #3
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	440b      	add	r3, r1
 800a474:	3350      	adds	r3, #80	; 0x50
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d108      	bne.n	800a48e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6818      	ldr	r0, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a486:	461a      	mov	r2, r3
 800a488:	2101      	movs	r1, #1
 800a48a:	f004 fae7 	bl	800ea5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	b2db      	uxtb	r3, r3
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f006 fa32 	bl	80108fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f003 0308 	and.w	r3, r3, #8
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d008      	beq.n	800a4b6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	2308      	movs	r3, #8
 800a4b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	f003 0310 	and.w	r3, r3, #16
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d008      	beq.n	800a4d2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	2310      	movs	r3, #16
 800a4d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d008      	beq.n	800a4ee <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d008      	beq.n	800a50a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a504:	461a      	mov	r2, r3
 800a506:	2302      	movs	r3, #2
 800a508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a510:	2b00      	cmp	r3, #0
 800a512:	d003      	beq.n	800a51c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fc1b 	bl	800ad52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	3301      	adds	r3, #1
 800a520:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	085b      	lsrs	r3, r3, #1
 800a526:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f47f af49 	bne.w	800a3c2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f004 f9cc 	bl	800e8d2 <USB_ReadInterrupts>
 800a53a:	4603      	mov	r3, r0
 800a53c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a544:	d122      	bne.n	800a58c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a554:	f023 0301 	bic.w	r3, r3, #1
 800a558:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a560:	2b01      	cmp	r3, #1
 800a562:	d108      	bne.n	800a576 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a56c:	2100      	movs	r1, #0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fe26 	bl	800b1c0 <HAL_PCDEx_LPM_Callback>
 800a574:	e002      	b.n	800a57c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f006 fa38 	bl	80109ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	695a      	ldr	r2, [r3, #20]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a58a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4618      	mov	r0, r3
 800a592:	f004 f99e 	bl	800e8d2 <USB_ReadInterrupts>
 800a596:	4603      	mov	r3, r0
 800a598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a59c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5a0:	d112      	bne.n	800a5c8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d102      	bne.n	800a5b8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f006 f9f4 	bl	80109a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	695a      	ldr	r2, [r3, #20]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a5c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f004 f980 	bl	800e8d2 <USB_ReadInterrupts>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5dc:	f040 80c7 	bne.w	800a76e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5ee:	f023 0301 	bic.w	r3, r3, #1
 800a5f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2110      	movs	r1, #16
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f003 fa1a 	bl	800da34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a600:	2300      	movs	r3, #0
 800a602:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a604:	e056      	b.n	800a6b4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a612:	461a      	mov	r2, r3
 800a614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a618:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62a:	0151      	lsls	r1, r2, #5
 800a62c:	69fa      	ldr	r2, [r7, #28]
 800a62e:	440a      	add	r2, r1
 800a630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a638:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	4413      	add	r3, r2
 800a642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a64a:	0151      	lsls	r1, r2, #5
 800a64c:	69fa      	ldr	r2, [r7, #28]
 800a64e:	440a      	add	r2, r1
 800a650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a658:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	015a      	lsls	r2, r3, #5
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	4413      	add	r3, r2
 800a662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a666:	461a      	mov	r2, r3
 800a668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a66c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a67e:	0151      	lsls	r1, r2, #5
 800a680:	69fa      	ldr	r2, [r7, #28]
 800a682:	440a      	add	r2, r1
 800a684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a688:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a68c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a69e:	0151      	lsls	r1, r2, #5
 800a6a0:	69fa      	ldr	r2, [r7, #28]
 800a6a2:	440a      	add	r2, r1
 800a6a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d3a3      	bcc.n	800a606 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	69fa      	ldr	r2, [r7, #28]
 800a6c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a6d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d016      	beq.n	800a708 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6e4:	69fa      	ldr	r2, [r7, #28]
 800a6e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6ea:	f043 030b 	orr.w	r3, r3, #11
 800a6ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fa:	69fa      	ldr	r2, [r7, #28]
 800a6fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a700:	f043 030b 	orr.w	r3, r3, #11
 800a704:	6453      	str	r3, [r2, #68]	; 0x44
 800a706:	e015      	b.n	800a734 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a71a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a71e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	69fa      	ldr	r2, [r7, #28]
 800a72a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a72e:	f043 030b 	orr.w	r3, r3, #11
 800a732:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	69fa      	ldr	r2, [r7, #28]
 800a73e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a742:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a746:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6818      	ldr	r0, [r3, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a758:	461a      	mov	r2, r3
 800a75a:	f004 f97f 	bl	800ea5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	695a      	ldr	r2, [r3, #20]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a76c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4618      	mov	r0, r3
 800a774:	f004 f8ad 	bl	800e8d2 <USB_ReadInterrupts>
 800a778:	4603      	mov	r3, r0
 800a77a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a77e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a782:	d124      	bne.n	800a7ce <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4618      	mov	r0, r3
 800a78a:	f004 f943 	bl	800ea14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4618      	mov	r0, r3
 800a794:	f003 f9ab 	bl	800daee <USB_GetDevSpeed>
 800a798:	4603      	mov	r3, r0
 800a79a:	461a      	mov	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681c      	ldr	r4, [r3, #0]
 800a7a4:	f001 f92c 	bl	800ba00 <HAL_RCC_GetHCLKFreq>
 800a7a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f002 feca 	bl	800d54c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f006 f8c8 	bl	801094e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	695a      	ldr	r2, [r3, #20]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a7cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f004 f87d 	bl	800e8d2 <USB_ReadInterrupts>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f003 0308 	and.w	r3, r3, #8
 800a7de:	2b08      	cmp	r3, #8
 800a7e0:	d10a      	bne.n	800a7f8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f006 f8a5 	bl	8010932 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	695a      	ldr	r2, [r3, #20]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f002 0208 	and.w	r2, r2, #8
 800a7f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f004 f868 	bl	800e8d2 <USB_ReadInterrupts>
 800a802:	4603      	mov	r3, r0
 800a804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a80c:	d10f      	bne.n	800a82e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a80e:	2300      	movs	r3, #0
 800a810:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	b2db      	uxtb	r3, r3
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f006 f907 	bl	8010a2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	695a      	ldr	r2, [r3, #20]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a82c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4618      	mov	r0, r3
 800a834:	f004 f84d 	bl	800e8d2 <USB_ReadInterrupts>
 800a838:	4603      	mov	r3, r0
 800a83a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a83e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a842:	d10f      	bne.n	800a864 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f006 f8da 	bl	8010a08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	695a      	ldr	r2, [r3, #20]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4618      	mov	r0, r3
 800a86a:	f004 f832 	bl	800e8d2 <USB_ReadInterrupts>
 800a86e:	4603      	mov	r3, r0
 800a870:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a878:	d10a      	bne.n	800a890 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f006 f8e8 	bl	8010a50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	695a      	ldr	r2, [r3, #20]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a88e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4618      	mov	r0, r3
 800a896:	f004 f81c 	bl	800e8d2 <USB_ReadInterrupts>
 800a89a:	4603      	mov	r3, r0
 800a89c:	f003 0304 	and.w	r3, r3, #4
 800a8a0:	2b04      	cmp	r3, #4
 800a8a2:	d115      	bne.n	800a8d0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	f003 0304 	and.w	r3, r3, #4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d002      	beq.n	800a8bc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f006 f8d8 	bl	8010a6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6859      	ldr	r1, [r3, #4]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	605a      	str	r2, [r3, #4]
 800a8cc:	e000      	b.n	800a8d0 <HAL_PCD_IRQHandler+0x75e>
      return;
 800a8ce:	bf00      	nop
    }
  }
}
 800a8d0:	3734      	adds	r7, #52	; 0x34
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd90      	pop	{r4, r7, pc}

0800a8d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d101      	bne.n	800a8f0 <HAL_PCD_SetAddress+0x1a>
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e013      	b.n	800a918 <HAL_PCD_SetAddress+0x42>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	78fa      	ldrb	r2, [r7, #3]
 800a8fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	78fa      	ldrb	r2, [r7, #3]
 800a906:	4611      	mov	r1, r2
 800a908:	4618      	mov	r0, r3
 800a90a:	f003 ff7a 	bl	800e802 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	4608      	mov	r0, r1
 800a92a:	4611      	mov	r1, r2
 800a92c:	461a      	mov	r2, r3
 800a92e:	4603      	mov	r3, r0
 800a930:	70fb      	strb	r3, [r7, #3]
 800a932:	460b      	mov	r3, r1
 800a934:	803b      	strh	r3, [r7, #0]
 800a936:	4613      	mov	r3, r2
 800a938:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a93e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a942:	2b00      	cmp	r3, #0
 800a944:	da0f      	bge.n	800a966 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	f003 020f 	and.w	r2, r3, #15
 800a94c:	4613      	mov	r3, r2
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	1a9b      	subs	r3, r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	3338      	adds	r3, #56	; 0x38
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	4413      	add	r3, r2
 800a95a:	3304      	adds	r3, #4
 800a95c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	705a      	strb	r2, [r3, #1]
 800a964:	e00f      	b.n	800a986 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a966:	78fb      	ldrb	r3, [r7, #3]
 800a968:	f003 020f 	and.w	r2, r3, #15
 800a96c:	4613      	mov	r3, r2
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	1a9b      	subs	r3, r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	4413      	add	r3, r2
 800a97c:	3304      	adds	r3, #4
 800a97e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a986:	78fb      	ldrb	r3, [r7, #3]
 800a988:	f003 030f 	and.w	r3, r3, #15
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a992:	883a      	ldrh	r2, [r7, #0]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	78ba      	ldrb	r2, [r7, #2]
 800a99c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	785b      	ldrb	r3, [r3, #1]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a9b0:	78bb      	ldrb	r3, [r7, #2]
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d102      	bne.n	800a9bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d101      	bne.n	800a9ca <HAL_PCD_EP_Open+0xaa>
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	e00e      	b.n	800a9e8 <HAL_PCD_EP_Open+0xc8>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68f9      	ldr	r1, [r7, #12]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f003 f8ad 	bl	800db38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a9fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	da0f      	bge.n	800aa24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	f003 020f 	and.w	r2, r3, #15
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	00db      	lsls	r3, r3, #3
 800aa0e:	1a9b      	subs	r3, r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	3338      	adds	r3, #56	; 0x38
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	4413      	add	r3, r2
 800aa18:	3304      	adds	r3, #4
 800aa1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	705a      	strb	r2, [r3, #1]
 800aa22:	e00f      	b.n	800aa44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	f003 020f 	and.w	r2, r3, #15
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	00db      	lsls	r3, r3, #3
 800aa2e:	1a9b      	subs	r3, r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	4413      	add	r3, r2
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	f003 030f 	and.w	r3, r3, #15
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d101      	bne.n	800aa5e <HAL_PCD_EP_Close+0x6e>
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	e00e      	b.n	800aa7c <HAL_PCD_EP_Close+0x8c>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68f9      	ldr	r1, [r7, #12]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f003 f8eb 	bl	800dc48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	607a      	str	r2, [r7, #4]
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	460b      	mov	r3, r1
 800aa92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa94:	7afb      	ldrb	r3, [r7, #11]
 800aa96:	f003 020f 	and.w	r2, r3, #15
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	1a9b      	subs	r3, r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	3304      	adds	r3, #4
 800aaac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2200      	movs	r2, #0
 800aabe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2200      	movs	r2, #0
 800aac4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aac6:	7afb      	ldrb	r3, [r7, #11]
 800aac8:	f003 030f 	and.w	r3, r3, #15
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d102      	bne.n	800aae0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aae0:	7afb      	ldrb	r3, [r7, #11]
 800aae2:	f003 030f 	and.w	r3, r3, #15
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d109      	bne.n	800aafe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	6979      	ldr	r1, [r7, #20]
 800aaf8:	f003 fbc6 	bl	800e288 <USB_EP0StartXfer>
 800aafc:	e008      	b.n	800ab10 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6818      	ldr	r0, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6979      	ldr	r1, [r7, #20]
 800ab0c:	f003 f978 	bl	800de00 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	460b      	mov	r3, r1
 800ab24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ab26:	78fb      	ldrb	r3, [r7, #3]
 800ab28:	f003 020f 	and.w	r2, r3, #15
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	00db      	lsls	r3, r3, #3
 800ab32:	1a9b      	subs	r3, r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	440b      	add	r3, r1
 800ab38:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ab3c:	681b      	ldr	r3, [r3, #0]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b086      	sub	sp, #24
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	60f8      	str	r0, [r7, #12]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]
 800ab56:	460b      	mov	r3, r1
 800ab58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab5a:	7afb      	ldrb	r3, [r7, #11]
 800ab5c:	f003 020f 	and.w	r2, r3, #15
 800ab60:	4613      	mov	r3, r2
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	1a9b      	subs	r3, r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	3338      	adds	r3, #56	; 0x38
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	3304      	adds	r3, #4
 800ab70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2200      	movs	r2, #0
 800ab82:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2201      	movs	r2, #1
 800ab88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab8a:	7afb      	ldrb	r3, [r7, #11]
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d102      	bne.n	800aba4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	f003 030f 	and.w	r3, r3, #15
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d109      	bne.n	800abc2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	461a      	mov	r2, r3
 800abba:	6979      	ldr	r1, [r7, #20]
 800abbc:	f003 fb64 	bl	800e288 <USB_EP0StartXfer>
 800abc0:	e008      	b.n	800abd4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6818      	ldr	r0, [r3, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	461a      	mov	r2, r3
 800abce:	6979      	ldr	r1, [r7, #20]
 800abd0:	f003 f916 	bl	800de00 <USB_EPStartXfer>
  }

  return HAL_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	460b      	mov	r3, r1
 800abe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800abea:	78fb      	ldrb	r3, [r7, #3]
 800abec:	f003 020f 	and.w	r2, r3, #15
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d901      	bls.n	800abfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e050      	b.n	800ac9e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800abfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	da0f      	bge.n	800ac24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	f003 020f 	and.w	r2, r3, #15
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	1a9b      	subs	r3, r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	3338      	adds	r3, #56	; 0x38
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	4413      	add	r3, r2
 800ac18:	3304      	adds	r3, #4
 800ac1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	705a      	strb	r2, [r3, #1]
 800ac22:	e00d      	b.n	800ac40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ac24:	78fa      	ldrb	r2, [r7, #3]
 800ac26:	4613      	mov	r3, r2
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	1a9b      	subs	r3, r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	4413      	add	r3, r2
 800ac36:	3304      	adds	r3, #4
 800ac38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2201      	movs	r2, #1
 800ac44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac46:	78fb      	ldrb	r3, [r7, #3]
 800ac48:	f003 030f 	and.w	r3, r3, #15
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d101      	bne.n	800ac60 <HAL_PCD_EP_SetStall+0x82>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	e01e      	b.n	800ac9e <HAL_PCD_EP_SetStall+0xc0>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68f9      	ldr	r1, [r7, #12]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f003 fcf3 	bl	800e65a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	f003 030f 	and.w	r3, r3, #15
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10a      	bne.n	800ac94 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	b2d9      	uxtb	r1, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f003 fee4 	bl	800ea5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	460b      	mov	r3, r1
 800acb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800acb2:	78fb      	ldrb	r3, [r7, #3]
 800acb4:	f003 020f 	and.w	r2, r3, #15
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d901      	bls.n	800acc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e042      	b.n	800ad4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800acc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	da0f      	bge.n	800acec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800accc:	78fb      	ldrb	r3, [r7, #3]
 800acce:	f003 020f 	and.w	r2, r3, #15
 800acd2:	4613      	mov	r3, r2
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	1a9b      	subs	r3, r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	3338      	adds	r3, #56	; 0x38
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4413      	add	r3, r2
 800ace0:	3304      	adds	r3, #4
 800ace2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	705a      	strb	r2, [r3, #1]
 800acea:	e00f      	b.n	800ad0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800acec:	78fb      	ldrb	r3, [r7, #3]
 800acee:	f003 020f 	and.w	r2, r3, #15
 800acf2:	4613      	mov	r3, r2
 800acf4:	00db      	lsls	r3, r3, #3
 800acf6:	1a9b      	subs	r3, r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4413      	add	r3, r2
 800ad02:	3304      	adds	r3, #4
 800ad04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	f003 030f 	and.w	r3, r3, #15
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d101      	bne.n	800ad2c <HAL_PCD_EP_ClrStall+0x86>
 800ad28:	2302      	movs	r3, #2
 800ad2a:	e00e      	b.n	800ad4a <HAL_PCD_EP_ClrStall+0xa4>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68f9      	ldr	r1, [r7, #12]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f003 fcfb 	bl	800e736 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b08a      	sub	sp, #40	; 0x28
 800ad56:	af02      	add	r7, sp, #8
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	1a9b      	subs	r3, r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	3338      	adds	r3, #56	; 0x38
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	4413      	add	r3, r2
 800ad76:	3304      	adds	r3, #4
 800ad78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d901      	bls.n	800ad8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e06c      	b.n	800ae64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	695a      	ldr	r2, [r3, #20]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d902      	bls.n	800ada6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	3303      	adds	r3, #3
 800adaa:	089b      	lsrs	r3, r3, #2
 800adac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800adae:	e02b      	b.n	800ae08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	695a      	ldr	r2, [r3, #20]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	69fa      	ldr	r2, [r7, #28]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d902      	bls.n	800adcc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	3303      	adds	r3, #3
 800add0:	089b      	lsrs	r3, r3, #2
 800add2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	68d9      	ldr	r1, [r3, #12]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	b2da      	uxtb	r2, r3
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	4603      	mov	r3, r0
 800adea:	6978      	ldr	r0, [r7, #20]
 800adec:	f003 fb9f 	bl	800e52e <USB_WritePacket>

    ep->xfer_buff  += len;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	68da      	ldr	r2, [r3, #12]
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	441a      	add	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	699a      	ldr	r2, [r3, #24]
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	441a      	add	r2, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	015a      	lsls	r2, r3, #5
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	4413      	add	r3, r2
 800ae10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	69ba      	ldr	r2, [r7, #24]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d809      	bhi.n	800ae32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	699a      	ldr	r2, [r3, #24]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d203      	bcs.n	800ae32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1be      	bne.n	800adb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	695a      	ldr	r2, [r3, #20]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d811      	bhi.n	800ae62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	2201      	movs	r2, #1
 800ae46:	fa02 f303 	lsl.w	r3, r2, r3
 800ae4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	43db      	mvns	r3, r3
 800ae58:	6939      	ldr	r1, [r7, #16]
 800ae5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae5e:	4013      	ands	r3, r2
 800ae60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	333c      	adds	r3, #60	; 0x3c
 800ae84:	3304      	adds	r3, #4
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	f040 80a0 	bne.w	800afe4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	f003 0308 	and.w	r3, r3, #8
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d015      	beq.n	800aeda <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4a72      	ldr	r2, [pc, #456]	; (800b07c <PCD_EP_OutXfrComplete_int+0x210>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	f240 80dd 	bls.w	800b072 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 80d7 	beq.w	800b072 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed0:	461a      	mov	r2, r3
 800aed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aed6:	6093      	str	r3, [r2, #8]
 800aed8:	e0cb      	b.n	800b072 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f003 0320 	and.w	r3, r3, #32
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d009      	beq.n	800aef8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef0:	461a      	mov	r2, r3
 800aef2:	2320      	movs	r3, #32
 800aef4:	6093      	str	r3, [r2, #8]
 800aef6:	e0bc      	b.n	800b072 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f040 80b7 	bne.w	800b072 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4a5d      	ldr	r2, [pc, #372]	; (800b07c <PCD_EP_OutXfrComplete_int+0x210>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d90f      	bls.n	800af2c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00a      	beq.n	800af2c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af22:	461a      	mov	r2, r3
 800af24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af28:	6093      	str	r3, [r2, #8]
 800af2a:	e0a2      	b.n	800b072 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	4613      	mov	r3, r2
 800af32:	00db      	lsls	r3, r3, #3
 800af34:	1a9b      	subs	r3, r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800af3e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	0159      	lsls	r1, r3, #5
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	440b      	add	r3, r1
 800af48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800af52:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	4613      	mov	r3, r2
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	1a9b      	subs	r3, r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4403      	add	r3, r0
 800af62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800af66:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	4613      	mov	r3, r2
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	1a9b      	subs	r3, r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	440b      	add	r3, r1
 800af76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800af7a:	6819      	ldr	r1, [r3, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	4613      	mov	r3, r2
 800af82:	00db      	lsls	r3, r3, #3
 800af84:	1a9b      	subs	r3, r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4403      	add	r3, r0
 800af8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4419      	add	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	4613      	mov	r3, r2
 800af98:	00db      	lsls	r3, r3, #3
 800af9a:	1a9b      	subs	r3, r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4403      	add	r3, r0
 800afa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800afa4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d114      	bne.n	800afd6 <PCD_EP_OutXfrComplete_int+0x16a>
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	4613      	mov	r3, r2
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	440b      	add	r3, r1
 800afba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d108      	bne.n	800afd6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6818      	ldr	r0, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afce:	461a      	mov	r2, r3
 800afd0:	2101      	movs	r1, #1
 800afd2:	f003 fd43 	bl	800ea5c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f005 fc73 	bl	80108c8 <HAL_PCD_DataOutStageCallback>
 800afe2:	e046      	b.n	800b072 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4a26      	ldr	r2, [pc, #152]	; (800b080 <PCD_EP_OutXfrComplete_int+0x214>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d124      	bne.n	800b036 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b002:	461a      	mov	r2, r3
 800b004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b008:	6093      	str	r3, [r2, #8]
 800b00a:	e032      	b.n	800b072 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	f003 0320 	and.w	r3, r3, #32
 800b012:	2b00      	cmp	r3, #0
 800b014:	d008      	beq.n	800b028 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b022:	461a      	mov	r2, r3
 800b024:	2320      	movs	r3, #32
 800b026:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	4619      	mov	r1, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f005 fc4a 	bl	80108c8 <HAL_PCD_DataOutStageCallback>
 800b034:	e01d      	b.n	800b072 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d114      	bne.n	800b066 <PCD_EP_OutXfrComplete_int+0x1fa>
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	4613      	mov	r3, r2
 800b042:	00db      	lsls	r3, r3, #3
 800b044:	1a9b      	subs	r3, r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	440b      	add	r3, r1
 800b04a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d108      	bne.n	800b066 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6818      	ldr	r0, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b05e:	461a      	mov	r2, r3
 800b060:	2100      	movs	r1, #0
 800b062:	f003 fcfb 	bl	800ea5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f005 fc2b 	bl	80108c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	4f54300a 	.word	0x4f54300a
 800b080:	4f54310a 	.word	0x4f54310a

0800b084 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	333c      	adds	r3, #60	; 0x3c
 800b09c:	3304      	adds	r3, #4
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	015a      	lsls	r2, r3, #5
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	4a15      	ldr	r2, [pc, #84]	; (800b10c <PCD_EP_OutSetupPacket_int+0x88>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d90e      	bls.n	800b0d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d009      	beq.n	800b0d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	015a      	lsls	r2, r3, #5
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f005 fbe3 	bl	80108a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4a0a      	ldr	r2, [pc, #40]	; (800b10c <PCD_EP_OutSetupPacket_int+0x88>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d90c      	bls.n	800b100 <PCD_EP_OutSetupPacket_int+0x7c>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d108      	bne.n	800b100 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6818      	ldr	r0, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	f003 fcae 	bl	800ea5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	4f54300a 	.word	0x4f54300a

0800b110 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
 800b11c:	4613      	mov	r3, r2
 800b11e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b126:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d107      	bne.n	800b13e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b12e:	883b      	ldrh	r3, [r7, #0]
 800b130:	0419      	lsls	r1, r3, #16
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	430a      	orrs	r2, r1
 800b13a:	629a      	str	r2, [r3, #40]	; 0x28
 800b13c:	e028      	b.n	800b190 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b144:	0c1b      	lsrs	r3, r3, #16
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	4413      	add	r3, r2
 800b14a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
 800b150:	e00d      	b.n	800b16e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	3340      	adds	r3, #64	; 0x40
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	0c1b      	lsrs	r3, r3, #16
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	4413      	add	r3, r2
 800b166:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b168:	7bfb      	ldrb	r3, [r7, #15]
 800b16a:	3301      	adds	r3, #1
 800b16c:	73fb      	strb	r3, [r7, #15]
 800b16e:	7bfa      	ldrb	r2, [r7, #15]
 800b170:	78fb      	ldrb	r3, [r7, #3]
 800b172:	3b01      	subs	r3, #1
 800b174:	429a      	cmp	r2, r3
 800b176:	d3ec      	bcc.n	800b152 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b178:	883b      	ldrh	r3, [r7, #0]
 800b17a:	0418      	lsls	r0, r3, #16
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6819      	ldr	r1, [r3, #0]
 800b180:	78fb      	ldrb	r3, [r7, #3]
 800b182:	3b01      	subs	r3, #1
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	4302      	orrs	r2, r0
 800b188:	3340      	adds	r3, #64	; 0x40
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	440b      	add	r3, r1
 800b18e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	887a      	ldrh	r2, [r7, #2]
 800b1b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e264      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d075      	beq.n	800b2e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b1f6:	4ba3      	ldr	r3, [pc, #652]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f003 030c 	and.w	r3, r3, #12
 800b1fe:	2b04      	cmp	r3, #4
 800b200:	d00c      	beq.n	800b21c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b202:	4ba0      	ldr	r3, [pc, #640]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b20a:	2b08      	cmp	r3, #8
 800b20c:	d112      	bne.n	800b234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b20e:	4b9d      	ldr	r3, [pc, #628]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b21a:	d10b      	bne.n	800b234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b21c:	4b99      	ldr	r3, [pc, #612]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d05b      	beq.n	800b2e0 <HAL_RCC_OscConfig+0x108>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d157      	bne.n	800b2e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e23f      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b23c:	d106      	bne.n	800b24c <HAL_RCC_OscConfig+0x74>
 800b23e:	4b91      	ldr	r3, [pc, #580]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a90      	ldr	r2, [pc, #576]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	e01d      	b.n	800b288 <HAL_RCC_OscConfig+0xb0>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b254:	d10c      	bne.n	800b270 <HAL_RCC_OscConfig+0x98>
 800b256:	4b8b      	ldr	r3, [pc, #556]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a8a      	ldr	r2, [pc, #552]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b25c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b260:	6013      	str	r3, [r2, #0]
 800b262:	4b88      	ldr	r3, [pc, #544]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a87      	ldr	r2, [pc, #540]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b26c:	6013      	str	r3, [r2, #0]
 800b26e:	e00b      	b.n	800b288 <HAL_RCC_OscConfig+0xb0>
 800b270:	4b84      	ldr	r3, [pc, #528]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a83      	ldr	r2, [pc, #524]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	4b81      	ldr	r3, [pc, #516]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a80      	ldr	r2, [pc, #512]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d013      	beq.n	800b2b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b290:	f7fe f814 	bl	80092bc <HAL_GetTick>
 800b294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b296:	e008      	b.n	800b2aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b298:	f7fe f810 	bl	80092bc <HAL_GetTick>
 800b29c:	4602      	mov	r2, r0
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	2b64      	cmp	r3, #100	; 0x64
 800b2a4:	d901      	bls.n	800b2aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e204      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2aa:	4b76      	ldr	r3, [pc, #472]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d0f0      	beq.n	800b298 <HAL_RCC_OscConfig+0xc0>
 800b2b6:	e014      	b.n	800b2e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2b8:	f7fe f800 	bl	80092bc <HAL_GetTick>
 800b2bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b2be:	e008      	b.n	800b2d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b2c0:	f7fd fffc 	bl	80092bc <HAL_GetTick>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	2b64      	cmp	r3, #100	; 0x64
 800b2cc:	d901      	bls.n	800b2d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	e1f0      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b2d2:	4b6c      	ldr	r3, [pc, #432]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1f0      	bne.n	800b2c0 <HAL_RCC_OscConfig+0xe8>
 800b2de:	e000      	b.n	800b2e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0302 	and.w	r3, r3, #2
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d063      	beq.n	800b3b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b2ee:	4b65      	ldr	r3, [pc, #404]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	f003 030c 	and.w	r3, r3, #12
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00b      	beq.n	800b312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b2fa:	4b62      	ldr	r3, [pc, #392]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b302:	2b08      	cmp	r3, #8
 800b304:	d11c      	bne.n	800b340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b306:	4b5f      	ldr	r3, [pc, #380]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d116      	bne.n	800b340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b312:	4b5c      	ldr	r3, [pc, #368]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0302 	and.w	r3, r3, #2
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d005      	beq.n	800b32a <HAL_RCC_OscConfig+0x152>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d001      	beq.n	800b32a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e1c4      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b32a:	4b56      	ldr	r3, [pc, #344]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	4952      	ldr	r1, [pc, #328]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b33a:	4313      	orrs	r3, r2
 800b33c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b33e:	e03a      	b.n	800b3b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d020      	beq.n	800b38a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b348:	4b4f      	ldr	r3, [pc, #316]	; (800b488 <HAL_RCC_OscConfig+0x2b0>)
 800b34a:	2201      	movs	r2, #1
 800b34c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b34e:	f7fd ffb5 	bl	80092bc <HAL_GetTick>
 800b352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b354:	e008      	b.n	800b368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b356:	f7fd ffb1 	bl	80092bc <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	2b02      	cmp	r3, #2
 800b362:	d901      	bls.n	800b368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	e1a5      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b368:	4b46      	ldr	r3, [pc, #280]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 0302 	and.w	r3, r3, #2
 800b370:	2b00      	cmp	r3, #0
 800b372:	d0f0      	beq.n	800b356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b374:	4b43      	ldr	r3, [pc, #268]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	00db      	lsls	r3, r3, #3
 800b382:	4940      	ldr	r1, [pc, #256]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b384:	4313      	orrs	r3, r2
 800b386:	600b      	str	r3, [r1, #0]
 800b388:	e015      	b.n	800b3b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b38a:	4b3f      	ldr	r3, [pc, #252]	; (800b488 <HAL_RCC_OscConfig+0x2b0>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b390:	f7fd ff94 	bl	80092bc <HAL_GetTick>
 800b394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b396:	e008      	b.n	800b3aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b398:	f7fd ff90 	bl	80092bc <HAL_GetTick>
 800b39c:	4602      	mov	r2, r0
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d901      	bls.n	800b3aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e184      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b3aa:	4b36      	ldr	r3, [pc, #216]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 0302 	and.w	r3, r3, #2
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1f0      	bne.n	800b398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0308 	and.w	r3, r3, #8
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d030      	beq.n	800b424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	695b      	ldr	r3, [r3, #20]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d016      	beq.n	800b3f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b3ca:	4b30      	ldr	r3, [pc, #192]	; (800b48c <HAL_RCC_OscConfig+0x2b4>)
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3d0:	f7fd ff74 	bl	80092bc <HAL_GetTick>
 800b3d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b3d6:	e008      	b.n	800b3ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b3d8:	f7fd ff70 	bl	80092bc <HAL_GetTick>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d901      	bls.n	800b3ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e164      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b3ea:	4b26      	ldr	r3, [pc, #152]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b3ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ee:	f003 0302 	and.w	r3, r3, #2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0f0      	beq.n	800b3d8 <HAL_RCC_OscConfig+0x200>
 800b3f6:	e015      	b.n	800b424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b3f8:	4b24      	ldr	r3, [pc, #144]	; (800b48c <HAL_RCC_OscConfig+0x2b4>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b3fe:	f7fd ff5d 	bl	80092bc <HAL_GetTick>
 800b402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b404:	e008      	b.n	800b418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b406:	f7fd ff59 	bl	80092bc <HAL_GetTick>
 800b40a:	4602      	mov	r2, r0
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	2b02      	cmp	r3, #2
 800b412:	d901      	bls.n	800b418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b414:	2303      	movs	r3, #3
 800b416:	e14d      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b418:	4b1a      	ldr	r3, [pc, #104]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1f0      	bne.n	800b406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 80a0 	beq.w	800b572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b432:	2300      	movs	r3, #0
 800b434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b436:	4b13      	ldr	r3, [pc, #76]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10f      	bne.n	800b462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b442:	2300      	movs	r3, #0
 800b444:	60bb      	str	r3, [r7, #8]
 800b446:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44a:	4a0e      	ldr	r2, [pc, #56]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b44c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b450:	6413      	str	r3, [r2, #64]	; 0x40
 800b452:	4b0c      	ldr	r3, [pc, #48]	; (800b484 <HAL_RCC_OscConfig+0x2ac>)
 800b454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b45a:	60bb      	str	r3, [r7, #8]
 800b45c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b45e:	2301      	movs	r3, #1
 800b460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b462:	4b0b      	ldr	r3, [pc, #44]	; (800b490 <HAL_RCC_OscConfig+0x2b8>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d121      	bne.n	800b4b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b46e:	4b08      	ldr	r3, [pc, #32]	; (800b490 <HAL_RCC_OscConfig+0x2b8>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a07      	ldr	r2, [pc, #28]	; (800b490 <HAL_RCC_OscConfig+0x2b8>)
 800b474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b47a:	f7fd ff1f 	bl	80092bc <HAL_GetTick>
 800b47e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b480:	e011      	b.n	800b4a6 <HAL_RCC_OscConfig+0x2ce>
 800b482:	bf00      	nop
 800b484:	40023800 	.word	0x40023800
 800b488:	42470000 	.word	0x42470000
 800b48c:	42470e80 	.word	0x42470e80
 800b490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b494:	f7fd ff12 	bl	80092bc <HAL_GetTick>
 800b498:	4602      	mov	r2, r0
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	1ad3      	subs	r3, r2, r3
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d901      	bls.n	800b4a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e106      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4a6:	4b85      	ldr	r3, [pc, #532]	; (800b6bc <HAL_RCC_OscConfig+0x4e4>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0f0      	beq.n	800b494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d106      	bne.n	800b4c8 <HAL_RCC_OscConfig+0x2f0>
 800b4ba:	4b81      	ldr	r3, [pc, #516]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4be:	4a80      	ldr	r2, [pc, #512]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4c0:	f043 0301 	orr.w	r3, r3, #1
 800b4c4:	6713      	str	r3, [r2, #112]	; 0x70
 800b4c6:	e01c      	b.n	800b502 <HAL_RCC_OscConfig+0x32a>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	2b05      	cmp	r3, #5
 800b4ce:	d10c      	bne.n	800b4ea <HAL_RCC_OscConfig+0x312>
 800b4d0:	4b7b      	ldr	r3, [pc, #492]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4d4:	4a7a      	ldr	r2, [pc, #488]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4d6:	f043 0304 	orr.w	r3, r3, #4
 800b4da:	6713      	str	r3, [r2, #112]	; 0x70
 800b4dc:	4b78      	ldr	r3, [pc, #480]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e0:	4a77      	ldr	r2, [pc, #476]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4e2:	f043 0301 	orr.w	r3, r3, #1
 800b4e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b4e8:	e00b      	b.n	800b502 <HAL_RCC_OscConfig+0x32a>
 800b4ea:	4b75      	ldr	r3, [pc, #468]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ee:	4a74      	ldr	r2, [pc, #464]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4f0:	f023 0301 	bic.w	r3, r3, #1
 800b4f4:	6713      	str	r3, [r2, #112]	; 0x70
 800b4f6:	4b72      	ldr	r3, [pc, #456]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4fa:	4a71      	ldr	r2, [pc, #452]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b4fc:	f023 0304 	bic.w	r3, r3, #4
 800b500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d015      	beq.n	800b536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b50a:	f7fd fed7 	bl	80092bc <HAL_GetTick>
 800b50e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b510:	e00a      	b.n	800b528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b512:	f7fd fed3 	bl	80092bc <HAL_GetTick>
 800b516:	4602      	mov	r2, r0
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b520:	4293      	cmp	r3, r2
 800b522:	d901      	bls.n	800b528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	e0c5      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b528:	4b65      	ldr	r3, [pc, #404]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b52a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52c:	f003 0302 	and.w	r3, r3, #2
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0ee      	beq.n	800b512 <HAL_RCC_OscConfig+0x33a>
 800b534:	e014      	b.n	800b560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b536:	f7fd fec1 	bl	80092bc <HAL_GetTick>
 800b53a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b53c:	e00a      	b.n	800b554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b53e:	f7fd febd 	bl	80092bc <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	f241 3288 	movw	r2, #5000	; 0x1388
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d901      	bls.n	800b554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e0af      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b554:	4b5a      	ldr	r3, [pc, #360]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b558:	f003 0302 	and.w	r3, r3, #2
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1ee      	bne.n	800b53e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b560:	7dfb      	ldrb	r3, [r7, #23]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d105      	bne.n	800b572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b566:	4b56      	ldr	r3, [pc, #344]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	4a55      	ldr	r2, [pc, #340]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b56c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 809b 	beq.w	800b6b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b57c:	4b50      	ldr	r3, [pc, #320]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f003 030c 	and.w	r3, r3, #12
 800b584:	2b08      	cmp	r3, #8
 800b586:	d05c      	beq.n	800b642 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d141      	bne.n	800b614 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b590:	4b4c      	ldr	r3, [pc, #304]	; (800b6c4 <HAL_RCC_OscConfig+0x4ec>)
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b596:	f7fd fe91 	bl	80092bc <HAL_GetTick>
 800b59a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b59c:	e008      	b.n	800b5b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b59e:	f7fd fe8d 	bl	80092bc <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d901      	bls.n	800b5b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e081      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b5b0:	4b43      	ldr	r3, [pc, #268]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1f0      	bne.n	800b59e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	69da      	ldr	r2, [r3, #28]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a1b      	ldr	r3, [r3, #32]
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	019b      	lsls	r3, r3, #6
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d2:	085b      	lsrs	r3, r3, #1
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	041b      	lsls	r3, r3, #16
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	061b      	lsls	r3, r3, #24
 800b5e0:	4937      	ldr	r1, [pc, #220]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5e6:	4b37      	ldr	r3, [pc, #220]	; (800b6c4 <HAL_RCC_OscConfig+0x4ec>)
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5ec:	f7fd fe66 	bl	80092bc <HAL_GetTick>
 800b5f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b5f2:	e008      	b.n	800b606 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b5f4:	f7fd fe62 	bl	80092bc <HAL_GetTick>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d901      	bls.n	800b606 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b602:	2303      	movs	r3, #3
 800b604:	e056      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b606:	4b2e      	ldr	r3, [pc, #184]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d0f0      	beq.n	800b5f4 <HAL_RCC_OscConfig+0x41c>
 800b612:	e04e      	b.n	800b6b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b614:	4b2b      	ldr	r3, [pc, #172]	; (800b6c4 <HAL_RCC_OscConfig+0x4ec>)
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b61a:	f7fd fe4f 	bl	80092bc <HAL_GetTick>
 800b61e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b620:	e008      	b.n	800b634 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b622:	f7fd fe4b 	bl	80092bc <HAL_GetTick>
 800b626:	4602      	mov	r2, r0
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d901      	bls.n	800b634 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e03f      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b634:	4b22      	ldr	r3, [pc, #136]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1f0      	bne.n	800b622 <HAL_RCC_OscConfig+0x44a>
 800b640:	e037      	b.n	800b6b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d101      	bne.n	800b64e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e032      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b64e:	4b1c      	ldr	r3, [pc, #112]	; (800b6c0 <HAL_RCC_OscConfig+0x4e8>)
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d028      	beq.n	800b6ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b666:	429a      	cmp	r2, r3
 800b668:	d121      	bne.n	800b6ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b674:	429a      	cmp	r2, r3
 800b676:	d11a      	bne.n	800b6ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b67e:	4013      	ands	r3, r2
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b684:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b686:	4293      	cmp	r3, r2
 800b688:	d111      	bne.n	800b6ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b694:	085b      	lsrs	r3, r3, #1
 800b696:	3b01      	subs	r3, #1
 800b698:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d107      	bne.n	800b6ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d001      	beq.n	800b6b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e000      	b.n	800b6b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3718      	adds	r7, #24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	40007000 	.word	0x40007000
 800b6c0:	40023800 	.word	0x40023800
 800b6c4:	42470060 	.word	0x42470060

0800b6c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d101      	bne.n	800b6dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e0cc      	b.n	800b876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b6dc:	4b68      	ldr	r3, [pc, #416]	; (800b880 <HAL_RCC_ClockConfig+0x1b8>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 030f 	and.w	r3, r3, #15
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d90c      	bls.n	800b704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6ea:	4b65      	ldr	r3, [pc, #404]	; (800b880 <HAL_RCC_ClockConfig+0x1b8>)
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	b2d2      	uxtb	r2, r2
 800b6f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6f2:	4b63      	ldr	r3, [pc, #396]	; (800b880 <HAL_RCC_ClockConfig+0x1b8>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 030f 	and.w	r3, r3, #15
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d001      	beq.n	800b704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	e0b8      	b.n	800b876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 0302 	and.w	r3, r3, #2
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d020      	beq.n	800b752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 0304 	and.w	r3, r3, #4
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d005      	beq.n	800b728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b71c:	4b59      	ldr	r3, [pc, #356]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	4a58      	ldr	r2, [pc, #352]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0308 	and.w	r3, r3, #8
 800b730:	2b00      	cmp	r3, #0
 800b732:	d005      	beq.n	800b740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b734:	4b53      	ldr	r3, [pc, #332]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	4a52      	ldr	r2, [pc, #328]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b73a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b73e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b740:	4b50      	ldr	r3, [pc, #320]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	494d      	ldr	r1, [pc, #308]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b74e:	4313      	orrs	r3, r2
 800b750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d044      	beq.n	800b7e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d107      	bne.n	800b776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b766:	4b47      	ldr	r3, [pc, #284]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d119      	bne.n	800b7a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e07f      	b.n	800b876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d003      	beq.n	800b786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b782:	2b03      	cmp	r3, #3
 800b784:	d107      	bne.n	800b796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b786:	4b3f      	ldr	r3, [pc, #252]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d109      	bne.n	800b7a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	e06f      	b.n	800b876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b796:	4b3b      	ldr	r3, [pc, #236]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f003 0302 	and.w	r3, r3, #2
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e067      	b.n	800b876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b7a6:	4b37      	ldr	r3, [pc, #220]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f023 0203 	bic.w	r2, r3, #3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	4934      	ldr	r1, [pc, #208]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b7b8:	f7fd fd80 	bl	80092bc <HAL_GetTick>
 800b7bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7be:	e00a      	b.n	800b7d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7c0:	f7fd fd7c 	bl	80092bc <HAL_GetTick>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d901      	bls.n	800b7d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e04f      	b.n	800b876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7d6:	4b2b      	ldr	r3, [pc, #172]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f003 020c 	and.w	r2, r3, #12
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d1eb      	bne.n	800b7c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b7e8:	4b25      	ldr	r3, [pc, #148]	; (800b880 <HAL_RCC_ClockConfig+0x1b8>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 030f 	and.w	r3, r3, #15
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d20c      	bcs.n	800b810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7f6:	4b22      	ldr	r3, [pc, #136]	; (800b880 <HAL_RCC_ClockConfig+0x1b8>)
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	b2d2      	uxtb	r2, r2
 800b7fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7fe:	4b20      	ldr	r3, [pc, #128]	; (800b880 <HAL_RCC_ClockConfig+0x1b8>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f003 030f 	and.w	r3, r3, #15
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d001      	beq.n	800b810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e032      	b.n	800b876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d008      	beq.n	800b82e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b81c:	4b19      	ldr	r3, [pc, #100]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	4916      	ldr	r1, [pc, #88]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b82a:	4313      	orrs	r3, r2
 800b82c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f003 0308 	and.w	r3, r3, #8
 800b836:	2b00      	cmp	r3, #0
 800b838:	d009      	beq.n	800b84e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b83a:	4b12      	ldr	r3, [pc, #72]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	490e      	ldr	r1, [pc, #56]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b84a:	4313      	orrs	r3, r2
 800b84c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b84e:	f000 f821 	bl	800b894 <HAL_RCC_GetSysClockFreq>
 800b852:	4602      	mov	r2, r0
 800b854:	4b0b      	ldr	r3, [pc, #44]	; (800b884 <HAL_RCC_ClockConfig+0x1bc>)
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	091b      	lsrs	r3, r3, #4
 800b85a:	f003 030f 	and.w	r3, r3, #15
 800b85e:	490a      	ldr	r1, [pc, #40]	; (800b888 <HAL_RCC_ClockConfig+0x1c0>)
 800b860:	5ccb      	ldrb	r3, [r1, r3]
 800b862:	fa22 f303 	lsr.w	r3, r2, r3
 800b866:	4a09      	ldr	r2, [pc, #36]	; (800b88c <HAL_RCC_ClockConfig+0x1c4>)
 800b868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b86a:	4b09      	ldr	r3, [pc, #36]	; (800b890 <HAL_RCC_ClockConfig+0x1c8>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fd fce0 	bl	8009234 <HAL_InitTick>

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	40023c00 	.word	0x40023c00
 800b884:	40023800 	.word	0x40023800
 800b888:	080132a0 	.word	0x080132a0
 800b88c:	20000000 	.word	0x20000000
 800b890:	20000004 	.word	0x20000004

0800b894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b894:	b5b0      	push	{r4, r5, r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b89a:	2100      	movs	r1, #0
 800b89c:	6079      	str	r1, [r7, #4]
 800b89e:	2100      	movs	r1, #0
 800b8a0:	60f9      	str	r1, [r7, #12]
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b8aa:	4952      	ldr	r1, [pc, #328]	; (800b9f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b8ac:	6889      	ldr	r1, [r1, #8]
 800b8ae:	f001 010c 	and.w	r1, r1, #12
 800b8b2:	2908      	cmp	r1, #8
 800b8b4:	d00d      	beq.n	800b8d2 <HAL_RCC_GetSysClockFreq+0x3e>
 800b8b6:	2908      	cmp	r1, #8
 800b8b8:	f200 8094 	bhi.w	800b9e4 <HAL_RCC_GetSysClockFreq+0x150>
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	d002      	beq.n	800b8c6 <HAL_RCC_GetSysClockFreq+0x32>
 800b8c0:	2904      	cmp	r1, #4
 800b8c2:	d003      	beq.n	800b8cc <HAL_RCC_GetSysClockFreq+0x38>
 800b8c4:	e08e      	b.n	800b9e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b8c6:	4b4c      	ldr	r3, [pc, #304]	; (800b9f8 <HAL_RCC_GetSysClockFreq+0x164>)
 800b8c8:	60bb      	str	r3, [r7, #8]
       break;
 800b8ca:	e08e      	b.n	800b9ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b8cc:	4b4b      	ldr	r3, [pc, #300]	; (800b9fc <HAL_RCC_GetSysClockFreq+0x168>)
 800b8ce:	60bb      	str	r3, [r7, #8]
      break;
 800b8d0:	e08b      	b.n	800b9ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b8d2:	4948      	ldr	r1, [pc, #288]	; (800b9f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b8d4:	6849      	ldr	r1, [r1, #4]
 800b8d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b8da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b8dc:	4945      	ldr	r1, [pc, #276]	; (800b9f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b8de:	6849      	ldr	r1, [r1, #4]
 800b8e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b8e4:	2900      	cmp	r1, #0
 800b8e6:	d024      	beq.n	800b932 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b8e8:	4942      	ldr	r1, [pc, #264]	; (800b9f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b8ea:	6849      	ldr	r1, [r1, #4]
 800b8ec:	0989      	lsrs	r1, r1, #6
 800b8ee:	4608      	mov	r0, r1
 800b8f0:	f04f 0100 	mov.w	r1, #0
 800b8f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b8f8:	f04f 0500 	mov.w	r5, #0
 800b8fc:	ea00 0204 	and.w	r2, r0, r4
 800b900:	ea01 0305 	and.w	r3, r1, r5
 800b904:	493d      	ldr	r1, [pc, #244]	; (800b9fc <HAL_RCC_GetSysClockFreq+0x168>)
 800b906:	fb01 f003 	mul.w	r0, r1, r3
 800b90a:	2100      	movs	r1, #0
 800b90c:	fb01 f102 	mul.w	r1, r1, r2
 800b910:	1844      	adds	r4, r0, r1
 800b912:	493a      	ldr	r1, [pc, #232]	; (800b9fc <HAL_RCC_GetSysClockFreq+0x168>)
 800b914:	fba2 0101 	umull	r0, r1, r2, r1
 800b918:	1863      	adds	r3, r4, r1
 800b91a:	4619      	mov	r1, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	461a      	mov	r2, r3
 800b920:	f04f 0300 	mov.w	r3, #0
 800b924:	f7f4 fccc 	bl	80002c0 <__aeabi_uldivmod>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	4613      	mov	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	e04a      	b.n	800b9c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b932:	4b30      	ldr	r3, [pc, #192]	; (800b9f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	099b      	lsrs	r3, r3, #6
 800b938:	461a      	mov	r2, r3
 800b93a:	f04f 0300 	mov.w	r3, #0
 800b93e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b942:	f04f 0100 	mov.w	r1, #0
 800b946:	ea02 0400 	and.w	r4, r2, r0
 800b94a:	ea03 0501 	and.w	r5, r3, r1
 800b94e:	4620      	mov	r0, r4
 800b950:	4629      	mov	r1, r5
 800b952:	f04f 0200 	mov.w	r2, #0
 800b956:	f04f 0300 	mov.w	r3, #0
 800b95a:	014b      	lsls	r3, r1, #5
 800b95c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b960:	0142      	lsls	r2, r0, #5
 800b962:	4610      	mov	r0, r2
 800b964:	4619      	mov	r1, r3
 800b966:	1b00      	subs	r0, r0, r4
 800b968:	eb61 0105 	sbc.w	r1, r1, r5
 800b96c:	f04f 0200 	mov.w	r2, #0
 800b970:	f04f 0300 	mov.w	r3, #0
 800b974:	018b      	lsls	r3, r1, #6
 800b976:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b97a:	0182      	lsls	r2, r0, #6
 800b97c:	1a12      	subs	r2, r2, r0
 800b97e:	eb63 0301 	sbc.w	r3, r3, r1
 800b982:	f04f 0000 	mov.w	r0, #0
 800b986:	f04f 0100 	mov.w	r1, #0
 800b98a:	00d9      	lsls	r1, r3, #3
 800b98c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b990:	00d0      	lsls	r0, r2, #3
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	1912      	adds	r2, r2, r4
 800b998:	eb45 0303 	adc.w	r3, r5, r3
 800b99c:	f04f 0000 	mov.w	r0, #0
 800b9a0:	f04f 0100 	mov.w	r1, #0
 800b9a4:	0299      	lsls	r1, r3, #10
 800b9a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b9aa:	0290      	lsls	r0, r2, #10
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f04f 0300 	mov.w	r3, #0
 800b9bc:	f7f4 fc80 	bl	80002c0 <__aeabi_uldivmod>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b9c8:	4b0a      	ldr	r3, [pc, #40]	; (800b9f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	0c1b      	lsrs	r3, r3, #16
 800b9ce:	f003 0303 	and.w	r3, r3, #3
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e0:	60bb      	str	r3, [r7, #8]
      break;
 800b9e2:	e002      	b.n	800b9ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b9e4:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <HAL_RCC_GetSysClockFreq+0x164>)
 800b9e6:	60bb      	str	r3, [r7, #8]
      break;
 800b9e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bdb0      	pop	{r4, r5, r7, pc}
 800b9f4:	40023800 	.word	0x40023800
 800b9f8:	00f42400 	.word	0x00f42400
 800b9fc:	016e3600 	.word	0x016e3600

0800ba00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba00:	b480      	push	{r7}
 800ba02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba04:	4b03      	ldr	r3, [pc, #12]	; (800ba14 <HAL_RCC_GetHCLKFreq+0x14>)
 800ba06:	681b      	ldr	r3, [r3, #0]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	20000000 	.word	0x20000000

0800ba18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ba1c:	f7ff fff0 	bl	800ba00 <HAL_RCC_GetHCLKFreq>
 800ba20:	4602      	mov	r2, r0
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	0a9b      	lsrs	r3, r3, #10
 800ba28:	f003 0307 	and.w	r3, r3, #7
 800ba2c:	4903      	ldr	r1, [pc, #12]	; (800ba3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba2e:	5ccb      	ldrb	r3, [r1, r3]
 800ba30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	40023800 	.word	0x40023800
 800ba3c:	080132b0 	.word	0x080132b0

0800ba40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ba44:	f7ff ffdc 	bl	800ba00 <HAL_RCC_GetHCLKFreq>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	0b5b      	lsrs	r3, r3, #13
 800ba50:	f003 0307 	and.w	r3, r3, #7
 800ba54:	4903      	ldr	r1, [pc, #12]	; (800ba64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba56:	5ccb      	ldrb	r3, [r1, r3]
 800ba58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	40023800 	.word	0x40023800
 800ba64:	080132b0 	.word	0x080132b0

0800ba68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e07b      	b.n	800bb72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d108      	bne.n	800ba94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba8a:	d009      	beq.n	800baa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	61da      	str	r2, [r3, #28]
 800ba92:	e005      	b.n	800baa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800baac:	b2db      	uxtb	r3, r3
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7fd f922 	bl	8008d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bad6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bae8:	431a      	orrs	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baf2:	431a      	orrs	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	f003 0302 	and.w	r3, r3, #2
 800bafc:	431a      	orrs	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb10:	431a      	orrs	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a1b      	ldr	r3, [r3, #32]
 800bb20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb24:	ea42 0103 	orr.w	r1, r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	430a      	orrs	r2, r1
 800bb36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	699b      	ldr	r3, [r3, #24]
 800bb3c:	0c1b      	lsrs	r3, r3, #16
 800bb3e:	f003 0104 	and.w	r1, r3, #4
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb46:	f003 0210 	and.w	r2, r3, #16
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	430a      	orrs	r2, r1
 800bb50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	69da      	ldr	r2, [r3, #28]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b088      	sub	sp, #32
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	60f8      	str	r0, [r7, #12]
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	603b      	str	r3, [r7, #0]
 800bb86:	4613      	mov	r3, r2
 800bb88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d101      	bne.n	800bb9c <HAL_SPI_Transmit+0x22>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e126      	b.n	800bdea <HAL_SPI_Transmit+0x270>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bba4:	f7fd fb8a 	bl	80092bc <HAL_GetTick>
 800bba8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bbaa:	88fb      	ldrh	r3, [r7, #6]
 800bbac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d002      	beq.n	800bbc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bbba:	2302      	movs	r3, #2
 800bbbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bbbe:	e10b      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <HAL_SPI_Transmit+0x52>
 800bbc6:	88fb      	ldrh	r3, [r7, #6]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bbd0:	e102      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2203      	movs	r2, #3
 800bbd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	88fa      	ldrh	r2, [r7, #6]
 800bbea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	88fa      	ldrh	r2, [r7, #6]
 800bbf0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc18:	d10f      	bne.n	800bc3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc44:	2b40      	cmp	r3, #64	; 0x40
 800bc46:	d007      	beq.n	800bc58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc60:	d14b      	bne.n	800bcfa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <HAL_SPI_Transmit+0xf6>
 800bc6a:	8afb      	ldrh	r3, [r7, #22]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d13e      	bne.n	800bcee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc74:	881a      	ldrh	r2, [r3, #0]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc80:	1c9a      	adds	r2, r3, #2
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bc94:	e02b      	b.n	800bcee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	f003 0302 	and.w	r3, r3, #2
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d112      	bne.n	800bcca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca8:	881a      	ldrh	r2, [r3, #0]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb4:	1c9a      	adds	r2, r3, #2
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	86da      	strh	r2, [r3, #54]	; 0x36
 800bcc8:	e011      	b.n	800bcee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcca:	f7fd faf7 	bl	80092bc <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d803      	bhi.n	800bce2 <HAL_SPI_Transmit+0x168>
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce0:	d102      	bne.n	800bce8 <HAL_SPI_Transmit+0x16e>
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d102      	bne.n	800bcee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800bce8:	2303      	movs	r3, #3
 800bcea:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bcec:	e074      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1ce      	bne.n	800bc96 <HAL_SPI_Transmit+0x11c>
 800bcf8:	e04c      	b.n	800bd94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <HAL_SPI_Transmit+0x18e>
 800bd02:	8afb      	ldrh	r3, [r7, #22]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d140      	bne.n	800bd8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	330c      	adds	r3, #12
 800bd12:	7812      	ldrb	r2, [r2, #0]
 800bd14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	3b01      	subs	r3, #1
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bd2e:	e02c      	b.n	800bd8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d113      	bne.n	800bd66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	330c      	adds	r3, #12
 800bd48:	7812      	ldrb	r2, [r2, #0]
 800bd4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	86da      	strh	r2, [r3, #54]	; 0x36
 800bd64:	e011      	b.n	800bd8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd66:	f7fd faa9 	bl	80092bc <HAL_GetTick>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d803      	bhi.n	800bd7e <HAL_SPI_Transmit+0x204>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7c:	d102      	bne.n	800bd84 <HAL_SPI_Transmit+0x20a>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bd88:	e026      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1cd      	bne.n	800bd30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd94:	69ba      	ldr	r2, [r7, #24]
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 fbcb 	bl	800c534 <SPI_EndRxTxTransaction>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2220      	movs	r2, #32
 800bda8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10a      	bne.n	800bdc8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	613b      	str	r3, [r7, #16]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	613b      	str	r3, [r7, #16]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	613b      	str	r3, [r7, #16]
 800bdc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	77fb      	strb	r3, [r7, #31]
 800bdd4:	e000      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800bdd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bde8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3720      	adds	r7, #32
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b088      	sub	sp, #32
 800bdf6:	af02      	add	r7, sp, #8
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	603b      	str	r3, [r7, #0]
 800bdfe:	4613      	mov	r3, r2
 800be00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be0e:	d112      	bne.n	800be36 <HAL_SPI_Receive+0x44>
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10e      	bne.n	800be36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2204      	movs	r2, #4
 800be1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800be20:	88fa      	ldrh	r2, [r7, #6]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4613      	mov	r3, r2
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	68b9      	ldr	r1, [r7, #8]
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 f8f1 	bl	800c014 <HAL_SPI_TransmitReceive>
 800be32:	4603      	mov	r3, r0
 800be34:	e0ea      	b.n	800c00c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d101      	bne.n	800be44 <HAL_SPI_Receive+0x52>
 800be40:	2302      	movs	r3, #2
 800be42:	e0e3      	b.n	800c00c <HAL_SPI_Receive+0x21a>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2201      	movs	r2, #1
 800be48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be4c:	f7fd fa36 	bl	80092bc <HAL_GetTick>
 800be50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d002      	beq.n	800be64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800be5e:	2302      	movs	r3, #2
 800be60:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be62:	e0ca      	b.n	800bffa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d002      	beq.n	800be70 <HAL_SPI_Receive+0x7e>
 800be6a:	88fb      	ldrh	r3, [r7, #6]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d102      	bne.n	800be76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800be70:	2301      	movs	r3, #1
 800be72:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be74:	e0c1      	b.n	800bffa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2204      	movs	r2, #4
 800be7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	88fa      	ldrh	r2, [r7, #6]
 800be8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	88fa      	ldrh	r2, [r7, #6]
 800be94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2200      	movs	r2, #0
 800bea6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2200      	movs	r2, #0
 800beac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bebc:	d10f      	bne.n	800bede <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800becc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bedc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee8:	2b40      	cmp	r3, #64	; 0x40
 800beea:	d007      	beq.n	800befc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800befa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d162      	bne.n	800bfca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bf04:	e02e      	b.n	800bf64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	f003 0301 	and.w	r3, r3, #1
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d115      	bne.n	800bf40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f103 020c 	add.w	r2, r3, #12
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf20:	7812      	ldrb	r2, [r2, #0]
 800bf22:	b2d2      	uxtb	r2, r2
 800bf24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	3b01      	subs	r3, #1
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf3e:	e011      	b.n	800bf64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf40:	f7fd f9bc 	bl	80092bc <HAL_GetTick>
 800bf44:	4602      	mov	r2, r0
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d803      	bhi.n	800bf58 <HAL_SPI_Receive+0x166>
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf56:	d102      	bne.n	800bf5e <HAL_SPI_Receive+0x16c>
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d102      	bne.n	800bf64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bf62:	e04a      	b.n	800bffa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1cb      	bne.n	800bf06 <HAL_SPI_Receive+0x114>
 800bf6e:	e031      	b.n	800bfd4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d113      	bne.n	800bfa6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf88:	b292      	uxth	r2, r2
 800bf8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf90:	1c9a      	adds	r2, r3, #2
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfa4:	e011      	b.n	800bfca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfa6:	f7fd f989 	bl	80092bc <HAL_GetTick>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d803      	bhi.n	800bfbe <HAL_SPI_Receive+0x1cc>
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfbc:	d102      	bne.n	800bfc4 <HAL_SPI_Receive+0x1d2>
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d102      	bne.n	800bfca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bfc8:	e017      	b.n	800bffa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1cd      	bne.n	800bf70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 fa45 	bl	800c468 <SPI_EndRxTransaction>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2220      	movs	r2, #32
 800bfe8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	75fb      	strb	r3, [r7, #23]
 800bff6:	e000      	b.n	800bffa <HAL_SPI_Receive+0x208>
  }

error :
 800bff8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2201      	movs	r2, #1
 800bffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b08c      	sub	sp, #48	; 0x30
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c022:	2301      	movs	r3, #1
 800c024:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c032:	2b01      	cmp	r3, #1
 800c034:	d101      	bne.n	800c03a <HAL_SPI_TransmitReceive+0x26>
 800c036:	2302      	movs	r3, #2
 800c038:	e18a      	b.n	800c350 <HAL_SPI_TransmitReceive+0x33c>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c042:	f7fd f93b 	bl	80092bc <HAL_GetTick>
 800c046:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c04e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c058:	887b      	ldrh	r3, [r7, #2]
 800c05a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c05c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c060:	2b01      	cmp	r3, #1
 800c062:	d00f      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x70>
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c06a:	d107      	bne.n	800c07c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d103      	bne.n	800c07c <HAL_SPI_TransmitReceive+0x68>
 800c074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c078:	2b04      	cmp	r3, #4
 800c07a:	d003      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c07c:	2302      	movs	r3, #2
 800c07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c082:	e15b      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d005      	beq.n	800c096 <HAL_SPI_TransmitReceive+0x82>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <HAL_SPI_TransmitReceive+0x82>
 800c090:	887b      	ldrh	r3, [r7, #2]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c09c:	e14e      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b04      	cmp	r3, #4
 800c0a8:	d003      	beq.n	800c0b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2205      	movs	r2, #5
 800c0ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	887a      	ldrh	r2, [r7, #2]
 800c0c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	887a      	ldrh	r2, [r7, #2]
 800c0c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	887a      	ldrh	r2, [r7, #2]
 800c0d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	887a      	ldrh	r2, [r7, #2]
 800c0da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f2:	2b40      	cmp	r3, #64	; 0x40
 800c0f4:	d007      	beq.n	800c106 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c10e:	d178      	bne.n	800c202 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <HAL_SPI_TransmitReceive+0x10a>
 800c118:	8b7b      	ldrh	r3, [r7, #26]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d166      	bne.n	800c1ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c122:	881a      	ldrh	r2, [r3, #0]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c12e:	1c9a      	adds	r2, r3, #2
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c138:	b29b      	uxth	r3, r3
 800c13a:	3b01      	subs	r3, #1
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c142:	e053      	b.n	800c1ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	f003 0302 	and.w	r3, r3, #2
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d11b      	bne.n	800c18a <HAL_SPI_TransmitReceive+0x176>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c156:	b29b      	uxth	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d016      	beq.n	800c18a <HAL_SPI_TransmitReceive+0x176>
 800c15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d113      	bne.n	800c18a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c166:	881a      	ldrh	r2, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c172:	1c9a      	adds	r2, r3, #2
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	3b01      	subs	r3, #1
 800c180:	b29a      	uxth	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c186:	2300      	movs	r3, #0
 800c188:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f003 0301 	and.w	r3, r3, #1
 800c194:	2b01      	cmp	r3, #1
 800c196:	d119      	bne.n	800c1cc <HAL_SPI_TransmitReceive+0x1b8>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d014      	beq.n	800c1cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ac:	b292      	uxth	r2, r2
 800c1ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b4:	1c9a      	adds	r2, r3, #2
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c1cc:	f7fd f876 	bl	80092bc <HAL_GetTick>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d807      	bhi.n	800c1ec <HAL_SPI_TransmitReceive+0x1d8>
 800c1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e2:	d003      	beq.n	800c1ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c1ea:	e0a7      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1a6      	bne.n	800c144 <HAL_SPI_TransmitReceive+0x130>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1a1      	bne.n	800c144 <HAL_SPI_TransmitReceive+0x130>
 800c200:	e07c      	b.n	800c2fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d002      	beq.n	800c210 <HAL_SPI_TransmitReceive+0x1fc>
 800c20a:	8b7b      	ldrh	r3, [r7, #26]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d16b      	bne.n	800c2e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	330c      	adds	r3, #12
 800c21a:	7812      	ldrb	r2, [r2, #0]
 800c21c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	3b01      	subs	r3, #1
 800c230:	b29a      	uxth	r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c236:	e057      	b.n	800c2e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	f003 0302 	and.w	r3, r3, #2
 800c242:	2b02      	cmp	r3, #2
 800c244:	d11c      	bne.n	800c280 <HAL_SPI_TransmitReceive+0x26c>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d017      	beq.n	800c280 <HAL_SPI_TransmitReceive+0x26c>
 800c250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c252:	2b01      	cmp	r3, #1
 800c254:	d114      	bne.n	800c280 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	330c      	adds	r3, #12
 800c260:	7812      	ldrb	r2, [r2, #0]
 800c262:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c272:	b29b      	uxth	r3, r3
 800c274:	3b01      	subs	r3, #1
 800c276:	b29a      	uxth	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c27c:	2300      	movs	r3, #0
 800c27e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d119      	bne.n	800c2c2 <HAL_SPI_TransmitReceive+0x2ae>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c292:	b29b      	uxth	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d014      	beq.n	800c2c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a2:	b2d2      	uxtb	r2, r2
 800c2a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c2c2:	f7fc fffb 	bl	80092bc <HAL_GetTick>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d803      	bhi.n	800c2da <HAL_SPI_TransmitReceive+0x2c6>
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d8:	d102      	bne.n	800c2e0 <HAL_SPI_TransmitReceive+0x2cc>
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d103      	bne.n	800c2e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c2e6:	e029      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1a2      	bne.n	800c238 <HAL_SPI_TransmitReceive+0x224>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d19d      	bne.n	800c238 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 f917 	bl	800c534 <SPI_EndRxTxTransaction>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d006      	beq.n	800c31a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2220      	movs	r2, #32
 800c316:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c318:	e010      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10b      	bne.n	800c33a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c322:	2300      	movs	r3, #0
 800c324:	617b      	str	r3, [r7, #20]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	617b      	str	r3, [r7, #20]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	617b      	str	r3, [r7, #20]
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	e000      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c33a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c34c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c350:	4618      	mov	r0, r3
 800c352:	3730      	adds	r7, #48	; 0x30
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	603b      	str	r3, [r7, #0]
 800c364:	4613      	mov	r3, r2
 800c366:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c368:	f7fc ffa8 	bl	80092bc <HAL_GetTick>
 800c36c:	4602      	mov	r2, r0
 800c36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c370:	1a9b      	subs	r3, r3, r2
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	4413      	add	r3, r2
 800c376:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c378:	f7fc ffa0 	bl	80092bc <HAL_GetTick>
 800c37c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c37e:	4b39      	ldr	r3, [pc, #228]	; (800c464 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	015b      	lsls	r3, r3, #5
 800c384:	0d1b      	lsrs	r3, r3, #20
 800c386:	69fa      	ldr	r2, [r7, #28]
 800c388:	fb02 f303 	mul.w	r3, r2, r3
 800c38c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c38e:	e054      	b.n	800c43a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c396:	d050      	beq.n	800c43a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c398:	f7fc ff90 	bl	80092bc <HAL_GetTick>
 800c39c:	4602      	mov	r2, r0
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	69fa      	ldr	r2, [r7, #28]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d902      	bls.n	800c3ae <SPI_WaitFlagStateUntilTimeout+0x56>
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d13d      	bne.n	800c42a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	685a      	ldr	r2, [r3, #4]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c3bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3c6:	d111      	bne.n	800c3ec <SPI_WaitFlagStateUntilTimeout+0x94>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3d0:	d004      	beq.n	800c3dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3da:	d107      	bne.n	800c3ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3f4:	d10f      	bne.n	800c416 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c414:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	e017      	b.n	800c45a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c430:	2300      	movs	r3, #0
 800c432:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	3b01      	subs	r3, #1
 800c438:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	689a      	ldr	r2, [r3, #8]
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	4013      	ands	r3, r2
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	429a      	cmp	r2, r3
 800c448:	bf0c      	ite	eq
 800c44a:	2301      	moveq	r3, #1
 800c44c:	2300      	movne	r3, #0
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	461a      	mov	r2, r3
 800c452:	79fb      	ldrb	r3, [r7, #7]
 800c454:	429a      	cmp	r2, r3
 800c456:	d19b      	bne.n	800c390 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3720      	adds	r7, #32
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20000000 	.word	0x20000000

0800c468 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b086      	sub	sp, #24
 800c46c:	af02      	add	r7, sp, #8
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c47c:	d111      	bne.n	800c4a2 <SPI_EndRxTransaction+0x3a>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c486:	d004      	beq.n	800c492 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c490:	d107      	bne.n	800c4a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4aa:	d12a      	bne.n	800c502 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4b4:	d012      	beq.n	800c4dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	2180      	movs	r1, #128	; 0x80
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f7ff ff49 	bl	800c358 <SPI_WaitFlagStateUntilTimeout>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d02d      	beq.n	800c528 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4d0:	f043 0220 	orr.w	r2, r3, #32
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e026      	b.n	800c52a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	9300      	str	r3, [sp, #0]
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	2101      	movs	r1, #1
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f7ff ff36 	bl	800c358 <SPI_WaitFlagStateUntilTimeout>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d01a      	beq.n	800c528 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4f6:	f043 0220 	orr.w	r2, r3, #32
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e013      	b.n	800c52a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2200      	movs	r2, #0
 800c50a:	2101      	movs	r1, #1
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f7ff ff23 	bl	800c358 <SPI_WaitFlagStateUntilTimeout>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d007      	beq.n	800c528 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51c:	f043 0220 	orr.w	r2, r3, #32
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e000      	b.n	800c52a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b088      	sub	sp, #32
 800c538:	af02      	add	r7, sp, #8
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c540:	4b1b      	ldr	r3, [pc, #108]	; (800c5b0 <SPI_EndRxTxTransaction+0x7c>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a1b      	ldr	r2, [pc, #108]	; (800c5b4 <SPI_EndRxTxTransaction+0x80>)
 800c546:	fba2 2303 	umull	r2, r3, r2, r3
 800c54a:	0d5b      	lsrs	r3, r3, #21
 800c54c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c550:	fb02 f303 	mul.w	r3, r2, r3
 800c554:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c55e:	d112      	bne.n	800c586 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2200      	movs	r2, #0
 800c568:	2180      	movs	r1, #128	; 0x80
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f7ff fef4 	bl	800c358 <SPI_WaitFlagStateUntilTimeout>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d016      	beq.n	800c5a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c57a:	f043 0220 	orr.w	r2, r3, #32
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c582:	2303      	movs	r3, #3
 800c584:	e00f      	b.n	800c5a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00a      	beq.n	800c5a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	3b01      	subs	r3, #1
 800c590:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c59c:	2b80      	cmp	r3, #128	; 0x80
 800c59e:	d0f2      	beq.n	800c586 <SPI_EndRxTxTransaction+0x52>
 800c5a0:	e000      	b.n	800c5a4 <SPI_EndRxTxTransaction+0x70>
        break;
 800c5a2:	bf00      	nop
  }

  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20000000 	.word	0x20000000
 800c5b4:	165e9f81 	.word	0x165e9f81

0800c5b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d101      	bne.n	800c5ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e03f      	b.n	800c64a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d106      	bne.n	800c5e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7fc fc2e 	bl	8008e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2224      	movs	r2, #36	; 0x24
 800c5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68da      	ldr	r2, [r3, #12]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fd7b 	bl	800d0f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	691a      	ldr	r2, [r3, #16]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	695a      	ldr	r2, [r3, #20]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68da      	ldr	r2, [r3, #12]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2220      	movs	r2, #32
 800c63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2220      	movs	r2, #32
 800c644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b08a      	sub	sp, #40	; 0x28
 800c656:	af02      	add	r7, sp, #8
 800c658:	60f8      	str	r0, [r7, #12]
 800c65a:	60b9      	str	r1, [r7, #8]
 800c65c:	603b      	str	r3, [r7, #0]
 800c65e:	4613      	mov	r3, r2
 800c660:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	2b20      	cmp	r3, #32
 800c670:	d17c      	bne.n	800c76c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d002      	beq.n	800c67e <HAL_UART_Transmit+0x2c>
 800c678:	88fb      	ldrh	r3, [r7, #6]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d101      	bne.n	800c682 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e075      	b.n	800c76e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d101      	bne.n	800c690 <HAL_UART_Transmit+0x3e>
 800c68c:	2302      	movs	r3, #2
 800c68e:	e06e      	b.n	800c76e <HAL_UART_Transmit+0x11c>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2200      	movs	r2, #0
 800c69c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2221      	movs	r2, #33	; 0x21
 800c6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c6a6:	f7fc fe09 	bl	80092bc <HAL_GetTick>
 800c6aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	88fa      	ldrh	r2, [r7, #6]
 800c6b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	88fa      	ldrh	r2, [r7, #6]
 800c6b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6c0:	d108      	bne.n	800c6d4 <HAL_UART_Transmit+0x82>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d104      	bne.n	800c6d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	61bb      	str	r3, [r7, #24]
 800c6d2:	e003      	b.n	800c6dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c6e4:	e02a      	b.n	800c73c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2180      	movs	r1, #128	; 0x80
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 faf9 	bl	800cce8 <UART_WaitOnFlagUntilTimeout>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d001      	beq.n	800c700 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	e036      	b.n	800c76e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10b      	bne.n	800c71e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	461a      	mov	r2, r3
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	3302      	adds	r3, #2
 800c71a:	61bb      	str	r3, [r7, #24]
 800c71c:	e007      	b.n	800c72e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	781a      	ldrb	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	3301      	adds	r3, #1
 800c72c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c732:	b29b      	uxth	r3, r3
 800c734:	3b01      	subs	r3, #1
 800c736:	b29a      	uxth	r2, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c740:	b29b      	uxth	r3, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1cf      	bne.n	800c6e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	2200      	movs	r2, #0
 800c74e:	2140      	movs	r1, #64	; 0x40
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f000 fac9 	bl	800cce8 <UART_WaitOnFlagUntilTimeout>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c75c:	2303      	movs	r3, #3
 800c75e:	e006      	b.n	800c76e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2220      	movs	r2, #32
 800c764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	e000      	b.n	800c76e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c76c:	2302      	movs	r3, #2
  }
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3720      	adds	r7, #32
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
	...

0800c778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b0ba      	sub	sp, #232	; 0xe8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	695b      	ldr	r3, [r3, #20]
 800c79a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7ae:	f003 030f 	and.w	r3, r3, #15
 800c7b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c7b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10f      	bne.n	800c7de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c2:	f003 0320 	and.w	r3, r3, #32
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d009      	beq.n	800c7de <HAL_UART_IRQHandler+0x66>
 800c7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7ce:	f003 0320 	and.w	r3, r3, #32
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d003      	beq.n	800c7de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fbd3 	bl	800cf82 <UART_Receive_IT>
      return;
 800c7dc:	e256      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c7de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 80de 	beq.w	800c9a4 <HAL_UART_IRQHandler+0x22c>
 800c7e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7ec:	f003 0301 	and.w	r3, r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d106      	bne.n	800c802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80d1 	beq.w	800c9a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00b      	beq.n	800c826 <HAL_UART_IRQHandler+0xae>
 800c80e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c816:	2b00      	cmp	r3, #0
 800c818:	d005      	beq.n	800c826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81e:	f043 0201 	orr.w	r2, r3, #1
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c82a:	f003 0304 	and.w	r3, r3, #4
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00b      	beq.n	800c84a <HAL_UART_IRQHandler+0xd2>
 800c832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d005      	beq.n	800c84a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c842:	f043 0202 	orr.w	r2, r3, #2
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c84e:	f003 0302 	and.w	r3, r3, #2
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00b      	beq.n	800c86e <HAL_UART_IRQHandler+0xf6>
 800c856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c85a:	f003 0301 	and.w	r3, r3, #1
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d005      	beq.n	800c86e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c866:	f043 0204 	orr.w	r2, r3, #4
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c872:	f003 0308 	and.w	r3, r3, #8
 800c876:	2b00      	cmp	r3, #0
 800c878:	d011      	beq.n	800c89e <HAL_UART_IRQHandler+0x126>
 800c87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c87e:	f003 0320 	and.w	r3, r3, #32
 800c882:	2b00      	cmp	r3, #0
 800c884:	d105      	bne.n	800c892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c88a:	f003 0301 	and.w	r3, r3, #1
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d005      	beq.n	800c89e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c896:	f043 0208 	orr.w	r2, r3, #8
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 81ed 	beq.w	800cc82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8ac:	f003 0320 	and.w	r3, r3, #32
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d008      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x14e>
 800c8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8b8:	f003 0320 	and.w	r3, r3, #32
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fb5e 	bl	800cf82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	695b      	ldr	r3, [r3, #20]
 800c8cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d0:	2b40      	cmp	r3, #64	; 0x40
 800c8d2:	bf0c      	ite	eq
 800c8d4:	2301      	moveq	r3, #1
 800c8d6:	2300      	movne	r3, #0
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e2:	f003 0308 	and.w	r3, r3, #8
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d103      	bne.n	800c8f2 <HAL_UART_IRQHandler+0x17a>
 800c8ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d04f      	beq.n	800c992 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fa66 	bl	800cdc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c902:	2b40      	cmp	r3, #64	; 0x40
 800c904:	d141      	bne.n	800c98a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3314      	adds	r3, #20
 800c90c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c914:	e853 3f00 	ldrex	r3, [r3]
 800c918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c91c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	3314      	adds	r3, #20
 800c92e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c932:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c93e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c942:	e841 2300 	strex	r3, r2, [r1]
 800c946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c94a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1d9      	bne.n	800c906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c956:	2b00      	cmp	r3, #0
 800c958:	d013      	beq.n	800c982 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95e:	4a7d      	ldr	r2, [pc, #500]	; (800cb54 <HAL_UART_IRQHandler+0x3dc>)
 800c960:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c966:	4618      	mov	r0, r3
 800c968:	f7fd f8cb 	bl	8009b02 <HAL_DMA_Abort_IT>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d016      	beq.n	800c9a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c97c:	4610      	mov	r0, r2
 800c97e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c980:	e00e      	b.n	800c9a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 f99a 	bl	800ccbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c988:	e00a      	b.n	800c9a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f996 	bl	800ccbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c990:	e006      	b.n	800c9a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f992 	bl	800ccbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c99e:	e170      	b.n	800cc82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9a0:	bf00      	nop
    return;
 800c9a2:	e16e      	b.n	800cc82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	f040 814a 	bne.w	800cc42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c9ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9b2:	f003 0310 	and.w	r3, r3, #16
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 8143 	beq.w	800cc42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c9bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9c0:	f003 0310 	and.w	r3, r3, #16
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 813c 	beq.w	800cc42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60bb      	str	r3, [r7, #8]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	60bb      	str	r3, [r7, #8]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	60bb      	str	r3, [r7, #8]
 800c9de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	695b      	ldr	r3, [r3, #20]
 800c9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9ea:	2b40      	cmp	r3, #64	; 0x40
 800c9ec:	f040 80b4 	bne.w	800cb58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c9fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f000 8140 	beq.w	800cc86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ca0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	f080 8139 	bcs.w	800cc86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca26:	f000 8088 	beq.w	800cb3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	330c      	adds	r3, #12
 800ca30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca38:	e853 3f00 	ldrex	r3, [r3]
 800ca3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ca40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	330c      	adds	r3, #12
 800ca52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ca56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ca62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca66:	e841 2300 	strex	r3, r2, [r1]
 800ca6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ca6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1d9      	bne.n	800ca2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	3314      	adds	r3, #20
 800ca7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca80:	e853 3f00 	ldrex	r3, [r3]
 800ca84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ca86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca88:	f023 0301 	bic.w	r3, r3, #1
 800ca8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3314      	adds	r3, #20
 800ca96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ca9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ca9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800caa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800caa6:	e841 2300 	strex	r3, r2, [r1]
 800caaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800caac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e1      	bne.n	800ca76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3314      	adds	r3, #20
 800cab8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cabc:	e853 3f00 	ldrex	r3, [r3]
 800cac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3314      	adds	r3, #20
 800cad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cad6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cad8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cada:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cadc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cade:	e841 2300 	strex	r3, r2, [r1]
 800cae2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1e3      	bne.n	800cab2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2220      	movs	r2, #32
 800caee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	330c      	adds	r3, #12
 800cafe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb02:	e853 3f00 	ldrex	r3, [r3]
 800cb06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cb08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb0a:	f023 0310 	bic.w	r3, r3, #16
 800cb0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	330c      	adds	r3, #12
 800cb18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cb1c:	65ba      	str	r2, [r7, #88]	; 0x58
 800cb1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb24:	e841 2300 	strex	r3, r2, [r1]
 800cb28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cb2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1e3      	bne.n	800caf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fc ff74 	bl	8009a22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f8c0 	bl	800ccd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb50:	e099      	b.n	800cc86 <HAL_UART_IRQHandler+0x50e>
 800cb52:	bf00      	nop
 800cb54:	0800ce8b 	.word	0x0800ce8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 808b 	beq.w	800cc8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800cb74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 8086 	beq.w	800cc8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	330c      	adds	r3, #12
 800cb84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	e853 3f00 	ldrex	r3, [r3]
 800cb8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	330c      	adds	r3, #12
 800cb9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cba2:	647a      	str	r2, [r7, #68]	; 0x44
 800cba4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbaa:	e841 2300 	strex	r3, r2, [r1]
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1e3      	bne.n	800cb7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3314      	adds	r3, #20
 800cbbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	e853 3f00 	ldrex	r3, [r3]
 800cbc4:	623b      	str	r3, [r7, #32]
   return(result);
 800cbc6:	6a3b      	ldr	r3, [r7, #32]
 800cbc8:	f023 0301 	bic.w	r3, r3, #1
 800cbcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3314      	adds	r3, #20
 800cbd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cbda:	633a      	str	r2, [r7, #48]	; 0x30
 800cbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbe2:	e841 2300 	strex	r3, r2, [r1]
 800cbe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1e3      	bne.n	800cbb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2220      	movs	r2, #32
 800cbf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	330c      	adds	r3, #12
 800cc02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f023 0310 	bic.w	r3, r3, #16
 800cc12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	330c      	adds	r3, #12
 800cc1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cc20:	61fa      	str	r2, [r7, #28]
 800cc22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc24:	69b9      	ldr	r1, [r7, #24]
 800cc26:	69fa      	ldr	r2, [r7, #28]
 800cc28:	e841 2300 	strex	r3, r2, [r1]
 800cc2c:	617b      	str	r3, [r7, #20]
   return(result);
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1e3      	bne.n	800cbfc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cc34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cc38:	4619      	mov	r1, r3
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f848 	bl	800ccd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cc40:	e023      	b.n	800cc8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cc42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d009      	beq.n	800cc62 <HAL_UART_IRQHandler+0x4ea>
 800cc4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d003      	beq.n	800cc62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f929 	bl	800ceb2 <UART_Transmit_IT>
    return;
 800cc60:	e014      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00e      	beq.n	800cc8c <HAL_UART_IRQHandler+0x514>
 800cc6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d008      	beq.n	800cc8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f969 	bl	800cf52 <UART_EndTransmit_IT>
    return;
 800cc80:	e004      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
    return;
 800cc82:	bf00      	nop
 800cc84:	e002      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
      return;
 800cc86:	bf00      	nop
 800cc88:	e000      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
      return;
 800cc8a:	bf00      	nop
  }
}
 800cc8c:	37e8      	adds	r7, #232	; 0xe8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop

0800cc94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b090      	sub	sp, #64	; 0x40
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	603b      	str	r3, [r7, #0]
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccf8:	e050      	b.n	800cd9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd00:	d04c      	beq.n	800cd9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d007      	beq.n	800cd18 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd08:	f7fc fad8 	bl	80092bc <HAL_GetTick>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d241      	bcs.n	800cd9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	330c      	adds	r3, #12
 800cd1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	e853 3f00 	ldrex	r3, [r3]
 800cd26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	330c      	adds	r3, #12
 800cd36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd38:	637a      	str	r2, [r7, #52]	; 0x34
 800cd3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd40:	e841 2300 	strex	r3, r2, [r1]
 800cd44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1e5      	bne.n	800cd18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	3314      	adds	r3, #20
 800cd52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	e853 3f00 	ldrex	r3, [r3]
 800cd5a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	f023 0301 	bic.w	r3, r3, #1
 800cd62:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	3314      	adds	r3, #20
 800cd6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd6c:	623a      	str	r2, [r7, #32]
 800cd6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd70:	69f9      	ldr	r1, [r7, #28]
 800cd72:	6a3a      	ldr	r2, [r7, #32]
 800cd74:	e841 2300 	strex	r3, r2, [r1]
 800cd78:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d1e5      	bne.n	800cd4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2220      	movs	r2, #32
 800cd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2220      	movs	r2, #32
 800cd8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cd98:	2303      	movs	r3, #3
 800cd9a:	e00f      	b.n	800cdbc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	4013      	ands	r3, r2
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	bf0c      	ite	eq
 800cdac:	2301      	moveq	r3, #1
 800cdae:	2300      	movne	r3, #0
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d09f      	beq.n	800ccfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3740      	adds	r7, #64	; 0x40
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b095      	sub	sp, #84	; 0x54
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	330c      	adds	r3, #12
 800cdd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd6:	e853 3f00 	ldrex	r3, [r3]
 800cdda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cde2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	330c      	adds	r3, #12
 800cdea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdec:	643a      	str	r2, [r7, #64]	; 0x40
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cdf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdf4:	e841 2300 	strex	r3, r2, [r1]
 800cdf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1e5      	bne.n	800cdcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3314      	adds	r3, #20
 800ce06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	e853 3f00 	ldrex	r3, [r3]
 800ce0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	f023 0301 	bic.w	r3, r3, #1
 800ce16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	3314      	adds	r3, #20
 800ce1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce20:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce28:	e841 2300 	strex	r3, r2, [r1]
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1e5      	bne.n	800ce00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d119      	bne.n	800ce70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	330c      	adds	r3, #12
 800ce42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	e853 3f00 	ldrex	r3, [r3]
 800ce4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f023 0310 	bic.w	r3, r3, #16
 800ce52:	647b      	str	r3, [r7, #68]	; 0x44
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	330c      	adds	r3, #12
 800ce5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce5c:	61ba      	str	r2, [r7, #24]
 800ce5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce60:	6979      	ldr	r1, [r7, #20]
 800ce62:	69ba      	ldr	r2, [r7, #24]
 800ce64:	e841 2300 	strex	r3, r2, [r1]
 800ce68:	613b      	str	r3, [r7, #16]
   return(result);
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1e5      	bne.n	800ce3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2220      	movs	r2, #32
 800ce74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ce7e:	bf00      	nop
 800ce80:	3754      	adds	r7, #84	; 0x54
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr

0800ce8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2200      	movs	r2, #0
 800cea2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7ff ff09 	bl	800ccbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ceaa:	bf00      	nop
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b085      	sub	sp, #20
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b21      	cmp	r3, #33	; 0x21
 800cec4:	d13e      	bne.n	800cf44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cece:	d114      	bne.n	800cefa <UART_Transmit_IT+0x48>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d110      	bne.n	800cefa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6a1b      	ldr	r3, [r3, #32]
 800cedc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	461a      	mov	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ceec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	1c9a      	adds	r2, r3, #2
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	621a      	str	r2, [r3, #32]
 800cef8:	e008      	b.n	800cf0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a1b      	ldr	r3, [r3, #32]
 800cefe:	1c59      	adds	r1, r3, #1
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	6211      	str	r1, [r2, #32]
 800cf04:	781a      	ldrb	r2, [r3, #0]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	3b01      	subs	r3, #1
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10f      	bne.n	800cf40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68da      	ldr	r2, [r3, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68da      	ldr	r2, [r3, #12]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	e000      	b.n	800cf46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cf44:	2302      	movs	r3, #2
  }
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b082      	sub	sp, #8
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68da      	ldr	r2, [r3, #12]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2220      	movs	r2, #32
 800cf6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff fe8e 	bl	800cc94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b08c      	sub	sp, #48	; 0x30
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b22      	cmp	r3, #34	; 0x22
 800cf94:	f040 80ab 	bne.w	800d0ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfa0:	d117      	bne.n	800cfd2 <UART_Receive_IT+0x50>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	691b      	ldr	r3, [r3, #16]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d113      	bne.n	800cfd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfca:	1c9a      	adds	r2, r3, #2
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	629a      	str	r2, [r3, #40]	; 0x28
 800cfd0:	e026      	b.n	800d020 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfe4:	d007      	beq.n	800cff6 <UART_Receive_IT+0x74>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10a      	bne.n	800d004 <UART_Receive_IT+0x82>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d106      	bne.n	800d004 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	701a      	strb	r2, [r3, #0]
 800d002:	e008      	b.n	800d016 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d010:	b2da      	uxtb	r2, r3
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d01a:	1c5a      	adds	r2, r3, #1
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d024:	b29b      	uxth	r3, r3
 800d026:	3b01      	subs	r3, #1
 800d028:	b29b      	uxth	r3, r3
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	4619      	mov	r1, r3
 800d02e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d030:	2b00      	cmp	r3, #0
 800d032:	d15a      	bne.n	800d0ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	68da      	ldr	r2, [r3, #12]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f022 0220 	bic.w	r2, r2, #32
 800d042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68da      	ldr	r2, [r3, #12]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	695a      	ldr	r2, [r3, #20]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f022 0201 	bic.w	r2, r2, #1
 800d062:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2220      	movs	r2, #32
 800d068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d070:	2b01      	cmp	r3, #1
 800d072:	d135      	bne.n	800d0e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	330c      	adds	r3, #12
 800d080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	e853 3f00 	ldrex	r3, [r3]
 800d088:	613b      	str	r3, [r7, #16]
   return(result);
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	f023 0310 	bic.w	r3, r3, #16
 800d090:	627b      	str	r3, [r7, #36]	; 0x24
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	330c      	adds	r3, #12
 800d098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d09a:	623a      	str	r2, [r7, #32]
 800d09c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09e:	69f9      	ldr	r1, [r7, #28]
 800d0a0:	6a3a      	ldr	r2, [r7, #32]
 800d0a2:	e841 2300 	strex	r3, r2, [r1]
 800d0a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1e5      	bne.n	800d07a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f003 0310 	and.w	r3, r3, #16
 800d0b8:	2b10      	cmp	r3, #16
 800d0ba:	d10a      	bne.n	800d0d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d0bc:	2300      	movs	r3, #0
 800d0be:	60fb      	str	r3, [r7, #12]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	60fb      	str	r3, [r7, #12]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	60fb      	str	r3, [r7, #12]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff fdf9 	bl	800ccd0 <HAL_UARTEx_RxEventCallback>
 800d0de:	e002      	b.n	800d0e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff fde1 	bl	800cca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	e002      	b.n	800d0f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e000      	b.n	800d0f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d0ee:	2302      	movs	r3, #2
  }
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3730      	adds	r7, #48	; 0x30
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fc:	b09f      	sub	sp, #124	; 0x7c
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d10e:	68d9      	ldr	r1, [r3, #12]
 800d110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	ea40 0301 	orr.w	r3, r0, r1
 800d118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d11a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d11c:	689a      	ldr	r2, [r3, #8]
 800d11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d120:	691b      	ldr	r3, [r3, #16]
 800d122:	431a      	orrs	r2, r3
 800d124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d126:	695b      	ldr	r3, [r3, #20]
 800d128:	431a      	orrs	r2, r3
 800d12a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	4313      	orrs	r3, r2
 800d130:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d13c:	f021 010c 	bic.w	r1, r1, #12
 800d140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d146:	430b      	orrs	r3, r1
 800d148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d14a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d156:	6999      	ldr	r1, [r3, #24]
 800d158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	ea40 0301 	orr.w	r3, r0, r1
 800d160:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	4bc5      	ldr	r3, [pc, #788]	; (800d47c <UART_SetConfig+0x384>)
 800d168:	429a      	cmp	r2, r3
 800d16a:	d004      	beq.n	800d176 <UART_SetConfig+0x7e>
 800d16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	4bc3      	ldr	r3, [pc, #780]	; (800d480 <UART_SetConfig+0x388>)
 800d172:	429a      	cmp	r2, r3
 800d174:	d103      	bne.n	800d17e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d176:	f7fe fc63 	bl	800ba40 <HAL_RCC_GetPCLK2Freq>
 800d17a:	6778      	str	r0, [r7, #116]	; 0x74
 800d17c:	e002      	b.n	800d184 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d17e:	f7fe fc4b 	bl	800ba18 <HAL_RCC_GetPCLK1Freq>
 800d182:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d186:	69db      	ldr	r3, [r3, #28]
 800d188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d18c:	f040 80b6 	bne.w	800d2fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d192:	461c      	mov	r4, r3
 800d194:	f04f 0500 	mov.w	r5, #0
 800d198:	4622      	mov	r2, r4
 800d19a:	462b      	mov	r3, r5
 800d19c:	1891      	adds	r1, r2, r2
 800d19e:	6439      	str	r1, [r7, #64]	; 0x40
 800d1a0:	415b      	adcs	r3, r3
 800d1a2:	647b      	str	r3, [r7, #68]	; 0x44
 800d1a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d1a8:	1912      	adds	r2, r2, r4
 800d1aa:	eb45 0303 	adc.w	r3, r5, r3
 800d1ae:	f04f 0000 	mov.w	r0, #0
 800d1b2:	f04f 0100 	mov.w	r1, #0
 800d1b6:	00d9      	lsls	r1, r3, #3
 800d1b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d1bc:	00d0      	lsls	r0, r2, #3
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	1911      	adds	r1, r2, r4
 800d1c4:	6639      	str	r1, [r7, #96]	; 0x60
 800d1c6:	416b      	adcs	r3, r5
 800d1c8:	667b      	str	r3, [r7, #100]	; 0x64
 800d1ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f04f 0300 	mov.w	r3, #0
 800d1d4:	1891      	adds	r1, r2, r2
 800d1d6:	63b9      	str	r1, [r7, #56]	; 0x38
 800d1d8:	415b      	adcs	r3, r3
 800d1da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d1e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d1e4:	f7f3 f86c 	bl	80002c0 <__aeabi_uldivmod>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	4ba5      	ldr	r3, [pc, #660]	; (800d484 <UART_SetConfig+0x38c>)
 800d1ee:	fba3 2302 	umull	r2, r3, r3, r2
 800d1f2:	095b      	lsrs	r3, r3, #5
 800d1f4:	011e      	lsls	r6, r3, #4
 800d1f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1f8:	461c      	mov	r4, r3
 800d1fa:	f04f 0500 	mov.w	r5, #0
 800d1fe:	4622      	mov	r2, r4
 800d200:	462b      	mov	r3, r5
 800d202:	1891      	adds	r1, r2, r2
 800d204:	6339      	str	r1, [r7, #48]	; 0x30
 800d206:	415b      	adcs	r3, r3
 800d208:	637b      	str	r3, [r7, #52]	; 0x34
 800d20a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d20e:	1912      	adds	r2, r2, r4
 800d210:	eb45 0303 	adc.w	r3, r5, r3
 800d214:	f04f 0000 	mov.w	r0, #0
 800d218:	f04f 0100 	mov.w	r1, #0
 800d21c:	00d9      	lsls	r1, r3, #3
 800d21e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d222:	00d0      	lsls	r0, r2, #3
 800d224:	4602      	mov	r2, r0
 800d226:	460b      	mov	r3, r1
 800d228:	1911      	adds	r1, r2, r4
 800d22a:	65b9      	str	r1, [r7, #88]	; 0x58
 800d22c:	416b      	adcs	r3, r5
 800d22e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	461a      	mov	r2, r3
 800d236:	f04f 0300 	mov.w	r3, #0
 800d23a:	1891      	adds	r1, r2, r2
 800d23c:	62b9      	str	r1, [r7, #40]	; 0x28
 800d23e:	415b      	adcs	r3, r3
 800d240:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d246:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d24a:	f7f3 f839 	bl	80002c0 <__aeabi_uldivmod>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	4b8c      	ldr	r3, [pc, #560]	; (800d484 <UART_SetConfig+0x38c>)
 800d254:	fba3 1302 	umull	r1, r3, r3, r2
 800d258:	095b      	lsrs	r3, r3, #5
 800d25a:	2164      	movs	r1, #100	; 0x64
 800d25c:	fb01 f303 	mul.w	r3, r1, r3
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	3332      	adds	r3, #50	; 0x32
 800d266:	4a87      	ldr	r2, [pc, #540]	; (800d484 <UART_SetConfig+0x38c>)
 800d268:	fba2 2303 	umull	r2, r3, r2, r3
 800d26c:	095b      	lsrs	r3, r3, #5
 800d26e:	005b      	lsls	r3, r3, #1
 800d270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d274:	441e      	add	r6, r3
 800d276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d278:	4618      	mov	r0, r3
 800d27a:	f04f 0100 	mov.w	r1, #0
 800d27e:	4602      	mov	r2, r0
 800d280:	460b      	mov	r3, r1
 800d282:	1894      	adds	r4, r2, r2
 800d284:	623c      	str	r4, [r7, #32]
 800d286:	415b      	adcs	r3, r3
 800d288:	627b      	str	r3, [r7, #36]	; 0x24
 800d28a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d28e:	1812      	adds	r2, r2, r0
 800d290:	eb41 0303 	adc.w	r3, r1, r3
 800d294:	f04f 0400 	mov.w	r4, #0
 800d298:	f04f 0500 	mov.w	r5, #0
 800d29c:	00dd      	lsls	r5, r3, #3
 800d29e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d2a2:	00d4      	lsls	r4, r2, #3
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	462b      	mov	r3, r5
 800d2a8:	1814      	adds	r4, r2, r0
 800d2aa:	653c      	str	r4, [r7, #80]	; 0x50
 800d2ac:	414b      	adcs	r3, r1
 800d2ae:	657b      	str	r3, [r7, #84]	; 0x54
 800d2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	f04f 0300 	mov.w	r3, #0
 800d2ba:	1891      	adds	r1, r2, r2
 800d2bc:	61b9      	str	r1, [r7, #24]
 800d2be:	415b      	adcs	r3, r3
 800d2c0:	61fb      	str	r3, [r7, #28]
 800d2c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d2c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d2ca:	f7f2 fff9 	bl	80002c0 <__aeabi_uldivmod>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4b6c      	ldr	r3, [pc, #432]	; (800d484 <UART_SetConfig+0x38c>)
 800d2d4:	fba3 1302 	umull	r1, r3, r3, r2
 800d2d8:	095b      	lsrs	r3, r3, #5
 800d2da:	2164      	movs	r1, #100	; 0x64
 800d2dc:	fb01 f303 	mul.w	r3, r1, r3
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	00db      	lsls	r3, r3, #3
 800d2e4:	3332      	adds	r3, #50	; 0x32
 800d2e6:	4a67      	ldr	r2, [pc, #412]	; (800d484 <UART_SetConfig+0x38c>)
 800d2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ec:	095b      	lsrs	r3, r3, #5
 800d2ee:	f003 0207 	and.w	r2, r3, #7
 800d2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4432      	add	r2, r6
 800d2f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d2fa:	e0b9      	b.n	800d470 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d2fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2fe:	461c      	mov	r4, r3
 800d300:	f04f 0500 	mov.w	r5, #0
 800d304:	4622      	mov	r2, r4
 800d306:	462b      	mov	r3, r5
 800d308:	1891      	adds	r1, r2, r2
 800d30a:	6139      	str	r1, [r7, #16]
 800d30c:	415b      	adcs	r3, r3
 800d30e:	617b      	str	r3, [r7, #20]
 800d310:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d314:	1912      	adds	r2, r2, r4
 800d316:	eb45 0303 	adc.w	r3, r5, r3
 800d31a:	f04f 0000 	mov.w	r0, #0
 800d31e:	f04f 0100 	mov.w	r1, #0
 800d322:	00d9      	lsls	r1, r3, #3
 800d324:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d328:	00d0      	lsls	r0, r2, #3
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	eb12 0804 	adds.w	r8, r2, r4
 800d332:	eb43 0905 	adc.w	r9, r3, r5
 800d336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f04f 0100 	mov.w	r1, #0
 800d340:	f04f 0200 	mov.w	r2, #0
 800d344:	f04f 0300 	mov.w	r3, #0
 800d348:	008b      	lsls	r3, r1, #2
 800d34a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d34e:	0082      	lsls	r2, r0, #2
 800d350:	4640      	mov	r0, r8
 800d352:	4649      	mov	r1, r9
 800d354:	f7f2 ffb4 	bl	80002c0 <__aeabi_uldivmod>
 800d358:	4602      	mov	r2, r0
 800d35a:	460b      	mov	r3, r1
 800d35c:	4b49      	ldr	r3, [pc, #292]	; (800d484 <UART_SetConfig+0x38c>)
 800d35e:	fba3 2302 	umull	r2, r3, r3, r2
 800d362:	095b      	lsrs	r3, r3, #5
 800d364:	011e      	lsls	r6, r3, #4
 800d366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d368:	4618      	mov	r0, r3
 800d36a:	f04f 0100 	mov.w	r1, #0
 800d36e:	4602      	mov	r2, r0
 800d370:	460b      	mov	r3, r1
 800d372:	1894      	adds	r4, r2, r2
 800d374:	60bc      	str	r4, [r7, #8]
 800d376:	415b      	adcs	r3, r3
 800d378:	60fb      	str	r3, [r7, #12]
 800d37a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d37e:	1812      	adds	r2, r2, r0
 800d380:	eb41 0303 	adc.w	r3, r1, r3
 800d384:	f04f 0400 	mov.w	r4, #0
 800d388:	f04f 0500 	mov.w	r5, #0
 800d38c:	00dd      	lsls	r5, r3, #3
 800d38e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d392:	00d4      	lsls	r4, r2, #3
 800d394:	4622      	mov	r2, r4
 800d396:	462b      	mov	r3, r5
 800d398:	1814      	adds	r4, r2, r0
 800d39a:	64bc      	str	r4, [r7, #72]	; 0x48
 800d39c:	414b      	adcs	r3, r1
 800d39e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f04f 0100 	mov.w	r1, #0
 800d3aa:	f04f 0200 	mov.w	r2, #0
 800d3ae:	f04f 0300 	mov.w	r3, #0
 800d3b2:	008b      	lsls	r3, r1, #2
 800d3b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d3b8:	0082      	lsls	r2, r0, #2
 800d3ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d3be:	f7f2 ff7f 	bl	80002c0 <__aeabi_uldivmod>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4b2f      	ldr	r3, [pc, #188]	; (800d484 <UART_SetConfig+0x38c>)
 800d3c8:	fba3 1302 	umull	r1, r3, r3, r2
 800d3cc:	095b      	lsrs	r3, r3, #5
 800d3ce:	2164      	movs	r1, #100	; 0x64
 800d3d0:	fb01 f303 	mul.w	r3, r1, r3
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	3332      	adds	r3, #50	; 0x32
 800d3da:	4a2a      	ldr	r2, [pc, #168]	; (800d484 <UART_SetConfig+0x38c>)
 800d3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e0:	095b      	lsrs	r3, r3, #5
 800d3e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3e6:	441e      	add	r6, r3
 800d3e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f04f 0100 	mov.w	r1, #0
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	1894      	adds	r4, r2, r2
 800d3f6:	603c      	str	r4, [r7, #0]
 800d3f8:	415b      	adcs	r3, r3
 800d3fa:	607b      	str	r3, [r7, #4]
 800d3fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d400:	1812      	adds	r2, r2, r0
 800d402:	eb41 0303 	adc.w	r3, r1, r3
 800d406:	f04f 0400 	mov.w	r4, #0
 800d40a:	f04f 0500 	mov.w	r5, #0
 800d40e:	00dd      	lsls	r5, r3, #3
 800d410:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d414:	00d4      	lsls	r4, r2, #3
 800d416:	4622      	mov	r2, r4
 800d418:	462b      	mov	r3, r5
 800d41a:	eb12 0a00 	adds.w	sl, r2, r0
 800d41e:	eb43 0b01 	adc.w	fp, r3, r1
 800d422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	4618      	mov	r0, r3
 800d428:	f04f 0100 	mov.w	r1, #0
 800d42c:	f04f 0200 	mov.w	r2, #0
 800d430:	f04f 0300 	mov.w	r3, #0
 800d434:	008b      	lsls	r3, r1, #2
 800d436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d43a:	0082      	lsls	r2, r0, #2
 800d43c:	4650      	mov	r0, sl
 800d43e:	4659      	mov	r1, fp
 800d440:	f7f2 ff3e 	bl	80002c0 <__aeabi_uldivmod>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	4b0e      	ldr	r3, [pc, #56]	; (800d484 <UART_SetConfig+0x38c>)
 800d44a:	fba3 1302 	umull	r1, r3, r3, r2
 800d44e:	095b      	lsrs	r3, r3, #5
 800d450:	2164      	movs	r1, #100	; 0x64
 800d452:	fb01 f303 	mul.w	r3, r1, r3
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	011b      	lsls	r3, r3, #4
 800d45a:	3332      	adds	r3, #50	; 0x32
 800d45c:	4a09      	ldr	r2, [pc, #36]	; (800d484 <UART_SetConfig+0x38c>)
 800d45e:	fba2 2303 	umull	r2, r3, r2, r3
 800d462:	095b      	lsrs	r3, r3, #5
 800d464:	f003 020f 	and.w	r2, r3, #15
 800d468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4432      	add	r2, r6
 800d46e:	609a      	str	r2, [r3, #8]
}
 800d470:	bf00      	nop
 800d472:	377c      	adds	r7, #124	; 0x7c
 800d474:	46bd      	mov	sp, r7
 800d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47a:	bf00      	nop
 800d47c:	40011000 	.word	0x40011000
 800d480:	40011400 	.word	0x40011400
 800d484:	51eb851f 	.word	0x51eb851f

0800d488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d488:	b084      	sub	sp, #16
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b084      	sub	sp, #16
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
 800d492:	f107 001c 	add.w	r0, r7, #28
 800d496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d122      	bne.n	800d4e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d105      	bne.n	800d4da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f001 fb1c 	bl	800eb18 <USB_CoreReset>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	73fb      	strb	r3, [r7, #15]
 800d4e4:	e01a      	b.n	800d51c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f001 fb10 	bl	800eb18 <USB_CoreReset>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d106      	bne.n	800d510 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	639a      	str	r2, [r3, #56]	; 0x38
 800d50e:	e005      	b.n	800d51c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d10b      	bne.n	800d53a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	f043 0206 	orr.w	r2, r3, #6
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	f043 0220 	orr.w	r2, r3, #32
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d546:	b004      	add	sp, #16
 800d548:	4770      	bx	lr
	...

0800d54c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b087      	sub	sp, #28
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	4613      	mov	r3, r2
 800d558:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d55a:	79fb      	ldrb	r3, [r7, #7]
 800d55c:	2b02      	cmp	r3, #2
 800d55e:	d165      	bne.n	800d62c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	4a41      	ldr	r2, [pc, #260]	; (800d668 <USB_SetTurnaroundTime+0x11c>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d906      	bls.n	800d576 <USB_SetTurnaroundTime+0x2a>
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	4a40      	ldr	r2, [pc, #256]	; (800d66c <USB_SetTurnaroundTime+0x120>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d202      	bcs.n	800d576 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d570:	230f      	movs	r3, #15
 800d572:	617b      	str	r3, [r7, #20]
 800d574:	e062      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	4a3c      	ldr	r2, [pc, #240]	; (800d66c <USB_SetTurnaroundTime+0x120>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d306      	bcc.n	800d58c <USB_SetTurnaroundTime+0x40>
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	4a3b      	ldr	r2, [pc, #236]	; (800d670 <USB_SetTurnaroundTime+0x124>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d202      	bcs.n	800d58c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d586:	230e      	movs	r3, #14
 800d588:	617b      	str	r3, [r7, #20]
 800d58a:	e057      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	4a38      	ldr	r2, [pc, #224]	; (800d670 <USB_SetTurnaroundTime+0x124>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d306      	bcc.n	800d5a2 <USB_SetTurnaroundTime+0x56>
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	4a37      	ldr	r2, [pc, #220]	; (800d674 <USB_SetTurnaroundTime+0x128>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d202      	bcs.n	800d5a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d59c:	230d      	movs	r3, #13
 800d59e:	617b      	str	r3, [r7, #20]
 800d5a0:	e04c      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	4a33      	ldr	r2, [pc, #204]	; (800d674 <USB_SetTurnaroundTime+0x128>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d306      	bcc.n	800d5b8 <USB_SetTurnaroundTime+0x6c>
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	4a32      	ldr	r2, [pc, #200]	; (800d678 <USB_SetTurnaroundTime+0x12c>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d802      	bhi.n	800d5b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d5b2:	230c      	movs	r3, #12
 800d5b4:	617b      	str	r3, [r7, #20]
 800d5b6:	e041      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	4a2f      	ldr	r2, [pc, #188]	; (800d678 <USB_SetTurnaroundTime+0x12c>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d906      	bls.n	800d5ce <USB_SetTurnaroundTime+0x82>
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	4a2e      	ldr	r2, [pc, #184]	; (800d67c <USB_SetTurnaroundTime+0x130>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d802      	bhi.n	800d5ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d5c8:	230b      	movs	r3, #11
 800d5ca:	617b      	str	r3, [r7, #20]
 800d5cc:	e036      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	4a2a      	ldr	r2, [pc, #168]	; (800d67c <USB_SetTurnaroundTime+0x130>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d906      	bls.n	800d5e4 <USB_SetTurnaroundTime+0x98>
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	4a29      	ldr	r2, [pc, #164]	; (800d680 <USB_SetTurnaroundTime+0x134>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d802      	bhi.n	800d5e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d5de:	230a      	movs	r3, #10
 800d5e0:	617b      	str	r3, [r7, #20]
 800d5e2:	e02b      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	4a26      	ldr	r2, [pc, #152]	; (800d680 <USB_SetTurnaroundTime+0x134>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d906      	bls.n	800d5fa <USB_SetTurnaroundTime+0xae>
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	4a25      	ldr	r2, [pc, #148]	; (800d684 <USB_SetTurnaroundTime+0x138>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d202      	bcs.n	800d5fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d5f4:	2309      	movs	r3, #9
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	e020      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	4a21      	ldr	r2, [pc, #132]	; (800d684 <USB_SetTurnaroundTime+0x138>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d306      	bcc.n	800d610 <USB_SetTurnaroundTime+0xc4>
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	4a20      	ldr	r2, [pc, #128]	; (800d688 <USB_SetTurnaroundTime+0x13c>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d802      	bhi.n	800d610 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d60a:	2308      	movs	r3, #8
 800d60c:	617b      	str	r3, [r7, #20]
 800d60e:	e015      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	4a1d      	ldr	r2, [pc, #116]	; (800d688 <USB_SetTurnaroundTime+0x13c>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d906      	bls.n	800d626 <USB_SetTurnaroundTime+0xda>
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	4a1c      	ldr	r2, [pc, #112]	; (800d68c <USB_SetTurnaroundTime+0x140>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d202      	bcs.n	800d626 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d620:	2307      	movs	r3, #7
 800d622:	617b      	str	r3, [r7, #20]
 800d624:	e00a      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d626:	2306      	movs	r3, #6
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	e007      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d62c:	79fb      	ldrb	r3, [r7, #7]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d102      	bne.n	800d638 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d632:	2309      	movs	r3, #9
 800d634:	617b      	str	r3, [r7, #20]
 800d636:	e001      	b.n	800d63c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d638:	2309      	movs	r3, #9
 800d63a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	68da      	ldr	r2, [r3, #12]
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	029b      	lsls	r3, r3, #10
 800d650:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d654:	431a      	orrs	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	371c      	adds	r7, #28
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr
 800d668:	00d8acbf 	.word	0x00d8acbf
 800d66c:	00e4e1c0 	.word	0x00e4e1c0
 800d670:	00f42400 	.word	0x00f42400
 800d674:	01067380 	.word	0x01067380
 800d678:	011a499f 	.word	0x011a499f
 800d67c:	01312cff 	.word	0x01312cff
 800d680:	014ca43f 	.word	0x014ca43f
 800d684:	016e3600 	.word	0x016e3600
 800d688:	01a6ab1f 	.word	0x01a6ab1f
 800d68c:	01e84800 	.word	0x01e84800

0800d690 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	689b      	ldr	r3, [r3, #8]
 800d69c:	f043 0201 	orr.w	r2, r3, #1
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	370c      	adds	r7, #12
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d6b2:	b480      	push	{r7}
 800d6b4:	b083      	sub	sp, #12
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	f023 0201 	bic.w	r2, r3, #1
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	460b      	mov	r3, r1
 800d6de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d6f0:	78fb      	ldrb	r3, [r7, #3]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d115      	bne.n	800d722 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d702:	2001      	movs	r0, #1
 800d704:	f7fb fde6 	bl	80092d4 <HAL_Delay>
      ms++;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	3301      	adds	r3, #1
 800d70c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f001 f972 	bl	800e9f8 <USB_GetMode>
 800d714:	4603      	mov	r3, r0
 800d716:	2b01      	cmp	r3, #1
 800d718:	d01e      	beq.n	800d758 <USB_SetCurrentMode+0x84>
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2b31      	cmp	r3, #49	; 0x31
 800d71e:	d9f0      	bls.n	800d702 <USB_SetCurrentMode+0x2e>
 800d720:	e01a      	b.n	800d758 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d722:	78fb      	ldrb	r3, [r7, #3]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d115      	bne.n	800d754 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d734:	2001      	movs	r0, #1
 800d736:	f7fb fdcd 	bl	80092d4 <HAL_Delay>
      ms++;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	3301      	adds	r3, #1
 800d73e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f001 f959 	bl	800e9f8 <USB_GetMode>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d005      	beq.n	800d758 <USB_SetCurrentMode+0x84>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b31      	cmp	r3, #49	; 0x31
 800d750:	d9f0      	bls.n	800d734 <USB_SetCurrentMode+0x60>
 800d752:	e001      	b.n	800d758 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d754:	2301      	movs	r3, #1
 800d756:	e005      	b.n	800d764 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2b32      	cmp	r3, #50	; 0x32
 800d75c:	d101      	bne.n	800d762 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e000      	b.n	800d764 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d76c:	b084      	sub	sp, #16
 800d76e:	b580      	push	{r7, lr}
 800d770:	b086      	sub	sp, #24
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d77a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d786:	2300      	movs	r3, #0
 800d788:	613b      	str	r3, [r7, #16]
 800d78a:	e009      	b.n	800d7a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	3340      	adds	r3, #64	; 0x40
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	4413      	add	r3, r2
 800d796:	2200      	movs	r2, #0
 800d798:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	3301      	adds	r3, #1
 800d79e:	613b      	str	r3, [r7, #16]
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	2b0e      	cmp	r3, #14
 800d7a4:	d9f2      	bls.n	800d78c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d11c      	bne.n	800d7e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7ba:	f043 0302 	orr.w	r3, r3, #2
 800d7be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	639a      	str	r2, [r3, #56]	; 0x38
 800d7e4:	e00b      	b.n	800d7fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d804:	461a      	mov	r2, r3
 800d806:	2300      	movs	r3, #0
 800d808:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d810:	4619      	mov	r1, r3
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d818:	461a      	mov	r2, r3
 800d81a:	680b      	ldr	r3, [r1, #0]
 800d81c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d820:	2b01      	cmp	r3, #1
 800d822:	d10c      	bne.n	800d83e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d104      	bne.n	800d834 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d82a:	2100      	movs	r1, #0
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 f945 	bl	800dabc <USB_SetDevSpeed>
 800d832:	e008      	b.n	800d846 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d834:	2101      	movs	r1, #1
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f940 	bl	800dabc <USB_SetDevSpeed>
 800d83c:	e003      	b.n	800d846 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d83e:	2103      	movs	r1, #3
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 f93b 	bl	800dabc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d846:	2110      	movs	r1, #16
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f8f3 	bl	800da34 <USB_FlushTxFifo>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d001      	beq.n	800d858 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 f90f 	bl	800da7c <USB_FlushRxFifo>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d86e:	461a      	mov	r2, r3
 800d870:	2300      	movs	r3, #0
 800d872:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d87a:	461a      	mov	r2, r3
 800d87c:	2300      	movs	r3, #0
 800d87e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d886:	461a      	mov	r2, r3
 800d888:	2300      	movs	r3, #0
 800d88a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d88c:	2300      	movs	r3, #0
 800d88e:	613b      	str	r3, [r7, #16]
 800d890:	e043      	b.n	800d91a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	015a      	lsls	r2, r3, #5
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	4413      	add	r3, r2
 800d89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8a8:	d118      	bne.n	800d8dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10a      	bne.n	800d8c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	015a      	lsls	r2, r3, #5
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8bc:	461a      	mov	r2, r3
 800d8be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d8c2:	6013      	str	r3, [r2, #0]
 800d8c4:	e013      	b.n	800d8ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	015a      	lsls	r2, r3, #5
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d8d8:	6013      	str	r3, [r2, #0]
 800d8da:	e008      	b.n	800d8ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	015a      	lsls	r2, r3, #5
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	015a      	lsls	r2, r3, #5
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	015a      	lsls	r2, r3, #5
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	4413      	add	r3, r2
 800d908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d90c:	461a      	mov	r2, r3
 800d90e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d912:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	3301      	adds	r3, #1
 800d918:	613b      	str	r3, [r7, #16]
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	693a      	ldr	r2, [r7, #16]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d3b7      	bcc.n	800d892 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d922:	2300      	movs	r3, #0
 800d924:	613b      	str	r3, [r7, #16]
 800d926:	e043      	b.n	800d9b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	015a      	lsls	r2, r3, #5
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	4413      	add	r3, r2
 800d930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d93a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d93e:	d118      	bne.n	800d972 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10a      	bne.n	800d95c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	015a      	lsls	r2, r3, #5
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	4413      	add	r3, r2
 800d94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d952:	461a      	mov	r2, r3
 800d954:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d958:	6013      	str	r3, [r2, #0]
 800d95a:	e013      	b.n	800d984 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	015a      	lsls	r2, r3, #5
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	4413      	add	r3, r2
 800d964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d968:	461a      	mov	r2, r3
 800d96a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	e008      	b.n	800d984 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	015a      	lsls	r2, r3, #5
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	4413      	add	r3, r2
 800d97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d97e:	461a      	mov	r2, r3
 800d980:	2300      	movs	r3, #0
 800d982:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	015a      	lsls	r2, r3, #5
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	4413      	add	r3, r2
 800d98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d990:	461a      	mov	r2, r3
 800d992:	2300      	movs	r3, #0
 800d994:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	015a      	lsls	r2, r3, #5
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	4413      	add	r3, r2
 800d99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d9a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	613b      	str	r3, [r7, #16]
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	693a      	ldr	r2, [r7, #16]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d3b7      	bcc.n	800d928 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d9d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d105      	bne.n	800d9ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	699b      	ldr	r3, [r3, #24]
 800d9e4:	f043 0210 	orr.w	r2, r3, #16
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	699a      	ldr	r2, [r3, #24]
 800d9f0:	4b0f      	ldr	r3, [pc, #60]	; (800da30 <USB_DevInit+0x2c4>)
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d005      	beq.n	800da0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	699b      	ldr	r3, [r3, #24]
 800da02:	f043 0208 	orr.w	r2, r3, #8
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800da0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d107      	bne.n	800da20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da18:	f043 0304 	orr.w	r3, r3, #4
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800da20:	7dfb      	ldrb	r3, [r7, #23]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3718      	adds	r7, #24
 800da26:	46bd      	mov	sp, r7
 800da28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da2c:	b004      	add	sp, #16
 800da2e:	4770      	bx	lr
 800da30:	803c3800 	.word	0x803c3800

0800da34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800da34:	b480      	push	{r7}
 800da36:	b085      	sub	sp, #20
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800da3e:	2300      	movs	r3, #0
 800da40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	019b      	lsls	r3, r3, #6
 800da46:	f043 0220 	orr.w	r2, r3, #32
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3301      	adds	r3, #1
 800da52:	60fb      	str	r3, [r7, #12]
 800da54:	4a08      	ldr	r2, [pc, #32]	; (800da78 <USB_FlushTxFifo+0x44>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d901      	bls.n	800da5e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800da5a:	2303      	movs	r3, #3
 800da5c:	e006      	b.n	800da6c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	691b      	ldr	r3, [r3, #16]
 800da62:	f003 0320 	and.w	r3, r3, #32
 800da66:	2b20      	cmp	r3, #32
 800da68:	d0f1      	beq.n	800da4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3714      	adds	r7, #20
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr
 800da78:	00030d40 	.word	0x00030d40

0800da7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da84:	2300      	movs	r3, #0
 800da86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2210      	movs	r2, #16
 800da8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	3301      	adds	r3, #1
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	4a08      	ldr	r2, [pc, #32]	; (800dab8 <USB_FlushRxFifo+0x3c>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d901      	bls.n	800da9e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800da9a:	2303      	movs	r3, #3
 800da9c:	e006      	b.n	800daac <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	691b      	ldr	r3, [r3, #16]
 800daa2:	f003 0310 	and.w	r3, r3, #16
 800daa6:	2b10      	cmp	r3, #16
 800daa8:	d0f1      	beq.n	800da8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3714      	adds	r7, #20
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr
 800dab8:	00030d40 	.word	0x00030d40

0800dabc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	78fb      	ldrb	r3, [r7, #3]
 800dad6:	68f9      	ldr	r1, [r7, #12]
 800dad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dadc:	4313      	orrs	r3, r2
 800dade:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3714      	adds	r7, #20
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800daee:	b480      	push	{r7}
 800daf0:	b087      	sub	sp, #28
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	f003 0306 	and.w	r3, r3, #6
 800db06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d102      	bne.n	800db14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800db0e:	2300      	movs	r3, #0
 800db10:	75fb      	strb	r3, [r7, #23]
 800db12:	e00a      	b.n	800db2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2b02      	cmp	r3, #2
 800db18:	d002      	beq.n	800db20 <USB_GetDevSpeed+0x32>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2b06      	cmp	r3, #6
 800db1e:	d102      	bne.n	800db26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800db20:	2302      	movs	r3, #2
 800db22:	75fb      	strb	r3, [r7, #23]
 800db24:	e001      	b.n	800db2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800db26:	230f      	movs	r3, #15
 800db28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	371c      	adds	r7, #28
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	785b      	ldrb	r3, [r3, #1]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d13a      	bne.n	800dbca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db5a:	69da      	ldr	r2, [r3, #28]
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	f003 030f 	and.w	r3, r3, #15
 800db64:	2101      	movs	r1, #1
 800db66:	fa01 f303 	lsl.w	r3, r1, r3
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	68f9      	ldr	r1, [r7, #12]
 800db6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db72:	4313      	orrs	r3, r2
 800db74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	015a      	lsls	r2, r3, #5
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	4413      	add	r3, r2
 800db7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d155      	bne.n	800dc38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	015a      	lsls	r2, r3, #5
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	4413      	add	r3, r2
 800db94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	689b      	ldr	r3, [r3, #8]
 800db9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	78db      	ldrb	r3, [r3, #3]
 800dba6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dba8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	059b      	lsls	r3, r3, #22
 800dbae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	0151      	lsls	r1, r2, #5
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	440a      	add	r2, r1
 800dbba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	e036      	b.n	800dc38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbd0:	69da      	ldr	r2, [r3, #28]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	f003 030f 	and.w	r3, r3, #15
 800dbda:	2101      	movs	r1, #1
 800dbdc:	fa01 f303 	lsl.w	r3, r1, r3
 800dbe0:	041b      	lsls	r3, r3, #16
 800dbe2:	68f9      	ldr	r1, [r7, #12]
 800dbe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d11a      	bne.n	800dc38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	015a      	lsls	r2, r3, #5
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	4413      	add	r3, r2
 800dc0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	78db      	ldrb	r3, [r3, #3]
 800dc1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dc1e:	430b      	orrs	r3, r1
 800dc20:	4313      	orrs	r3, r2
 800dc22:	68ba      	ldr	r2, [r7, #8]
 800dc24:	0151      	lsls	r1, r2, #5
 800dc26:	68fa      	ldr	r2, [r7, #12]
 800dc28:	440a      	add	r2, r1
 800dc2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3714      	adds	r7, #20
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
	...

0800dc48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	785b      	ldrb	r3, [r3, #1]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d161      	bne.n	800dd28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	015a      	lsls	r2, r3, #5
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc7a:	d11f      	bne.n	800dcbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	015a      	lsls	r2, r3, #5
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	4413      	add	r3, r2
 800dc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	0151      	lsls	r1, r2, #5
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	440a      	add	r2, r1
 800dc92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dc9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	015a      	lsls	r2, r3, #5
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	4413      	add	r3, r2
 800dca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	0151      	lsls	r1, r2, #5
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	440a      	add	r2, r1
 800dcb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	f003 030f 	and.w	r3, r3, #15
 800dccc:	2101      	movs	r1, #1
 800dcce:	fa01 f303 	lsl.w	r3, r1, r3
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	43db      	mvns	r3, r3
 800dcd6:	68f9      	ldr	r1, [r7, #12]
 800dcd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcdc:	4013      	ands	r3, r2
 800dcde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dce6:	69da      	ldr	r2, [r3, #28]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	f003 030f 	and.w	r3, r3, #15
 800dcf0:	2101      	movs	r1, #1
 800dcf2:	fa01 f303 	lsl.w	r3, r1, r3
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	43db      	mvns	r3, r3
 800dcfa:	68f9      	ldr	r1, [r7, #12]
 800dcfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd00:	4013      	ands	r3, r2
 800dd02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	015a      	lsls	r2, r3, #5
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	0159      	lsls	r1, r3, #5
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	440b      	add	r3, r1
 800dd1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd1e:	4619      	mov	r1, r3
 800dd20:	4b35      	ldr	r3, [pc, #212]	; (800ddf8 <USB_DeactivateEndpoint+0x1b0>)
 800dd22:	4013      	ands	r3, r2
 800dd24:	600b      	str	r3, [r1, #0]
 800dd26:	e060      	b.n	800ddea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	015a      	lsls	r2, r3, #5
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd3e:	d11f      	bne.n	800dd80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	015a      	lsls	r2, r3, #5
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	4413      	add	r3, r2
 800dd48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68ba      	ldr	r2, [r7, #8]
 800dd50:	0151      	lsls	r1, r2, #5
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	440a      	add	r2, r1
 800dd56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	015a      	lsls	r2, r3, #5
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	4413      	add	r3, r2
 800dd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	0151      	lsls	r1, r2, #5
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	440a      	add	r2, r1
 800dd76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f003 030f 	and.w	r3, r3, #15
 800dd90:	2101      	movs	r1, #1
 800dd92:	fa01 f303 	lsl.w	r3, r1, r3
 800dd96:	041b      	lsls	r3, r3, #16
 800dd98:	43db      	mvns	r3, r3
 800dd9a:	68f9      	ldr	r1, [r7, #12]
 800dd9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dda0:	4013      	ands	r3, r2
 800dda2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddaa:	69da      	ldr	r2, [r3, #28]
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	f003 030f 	and.w	r3, r3, #15
 800ddb4:	2101      	movs	r1, #1
 800ddb6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddba:	041b      	lsls	r3, r3, #16
 800ddbc:	43db      	mvns	r3, r3
 800ddbe:	68f9      	ldr	r1, [r7, #12]
 800ddc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	015a      	lsls	r2, r3, #5
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	4413      	add	r3, r2
 800ddd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	0159      	lsls	r1, r3, #5
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	440b      	add	r3, r1
 800ddde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde2:	4619      	mov	r1, r3
 800dde4:	4b05      	ldr	r3, [pc, #20]	; (800ddfc <USB_DeactivateEndpoint+0x1b4>)
 800dde6:	4013      	ands	r3, r2
 800dde8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3714      	adds	r7, #20
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	ec337800 	.word	0xec337800
 800ddfc:	eff37800 	.word	0xeff37800

0800de00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b08a      	sub	sp, #40	; 0x28
 800de04:	af02      	add	r7, sp, #8
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	4613      	mov	r3, r2
 800de0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	785b      	ldrb	r3, [r3, #1]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	f040 815c 	bne.w	800e0da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	695b      	ldr	r3, [r3, #20]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d132      	bne.n	800de90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	015a      	lsls	r2, r3, #5
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	4413      	add	r3, r2
 800de32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	69ba      	ldr	r2, [r7, #24]
 800de3a:	0151      	lsls	r1, r2, #5
 800de3c:	69fa      	ldr	r2, [r7, #28]
 800de3e:	440a      	add	r2, r1
 800de40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800de48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800de4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	015a      	lsls	r2, r3, #5
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	4413      	add	r3, r2
 800de56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de5a:	691b      	ldr	r3, [r3, #16]
 800de5c:	69ba      	ldr	r2, [r7, #24]
 800de5e:	0151      	lsls	r1, r2, #5
 800de60:	69fa      	ldr	r2, [r7, #28]
 800de62:	440a      	add	r2, r1
 800de64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	015a      	lsls	r2, r3, #5
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	4413      	add	r3, r2
 800de76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	69ba      	ldr	r2, [r7, #24]
 800de7e:	0151      	lsls	r1, r2, #5
 800de80:	69fa      	ldr	r2, [r7, #28]
 800de82:	440a      	add	r2, r1
 800de84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de88:	0cdb      	lsrs	r3, r3, #19
 800de8a:	04db      	lsls	r3, r3, #19
 800de8c:	6113      	str	r3, [r2, #16]
 800de8e:	e074      	b.n	800df7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	015a      	lsls	r2, r3, #5
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	4413      	add	r3, r2
 800de98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	69ba      	ldr	r2, [r7, #24]
 800dea0:	0151      	lsls	r1, r2, #5
 800dea2:	69fa      	ldr	r2, [r7, #28]
 800dea4:	440a      	add	r2, r1
 800dea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800deaa:	0cdb      	lsrs	r3, r3, #19
 800deac:	04db      	lsls	r3, r3, #19
 800deae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	015a      	lsls	r2, r3, #5
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	4413      	add	r3, r2
 800deb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	69ba      	ldr	r2, [r7, #24]
 800dec0:	0151      	lsls	r1, r2, #5
 800dec2:	69fa      	ldr	r2, [r7, #28]
 800dec4:	440a      	add	r2, r1
 800dec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800deca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dece:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ded2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	015a      	lsls	r2, r3, #5
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	4413      	add	r3, r2
 800dedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dee0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	6959      	ldr	r1, [r3, #20]
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	440b      	add	r3, r1
 800deec:	1e59      	subs	r1, r3, #1
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	fbb1 f3f3 	udiv	r3, r1, r3
 800def6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800def8:	4b9d      	ldr	r3, [pc, #628]	; (800e170 <USB_EPStartXfer+0x370>)
 800defa:	400b      	ands	r3, r1
 800defc:	69b9      	ldr	r1, [r7, #24]
 800defe:	0148      	lsls	r0, r1, #5
 800df00:	69f9      	ldr	r1, [r7, #28]
 800df02:	4401      	add	r1, r0
 800df04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800df08:	4313      	orrs	r3, r2
 800df0a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	015a      	lsls	r2, r3, #5
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	4413      	add	r3, r2
 800df14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df18:	691a      	ldr	r2, [r3, #16]
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	695b      	ldr	r3, [r3, #20]
 800df1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df22:	69b9      	ldr	r1, [r7, #24]
 800df24:	0148      	lsls	r0, r1, #5
 800df26:	69f9      	ldr	r1, [r7, #28]
 800df28:	4401      	add	r1, r0
 800df2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800df2e:	4313      	orrs	r3, r2
 800df30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	78db      	ldrb	r3, [r3, #3]
 800df36:	2b01      	cmp	r3, #1
 800df38:	d11f      	bne.n	800df7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	015a      	lsls	r2, r3, #5
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	4413      	add	r3, r2
 800df42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	69ba      	ldr	r2, [r7, #24]
 800df4a:	0151      	lsls	r1, r2, #5
 800df4c:	69fa      	ldr	r2, [r7, #28]
 800df4e:	440a      	add	r2, r1
 800df50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800df58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	015a      	lsls	r2, r3, #5
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	4413      	add	r3, r2
 800df62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	69ba      	ldr	r2, [r7, #24]
 800df6a:	0151      	lsls	r1, r2, #5
 800df6c:	69fa      	ldr	r2, [r7, #28]
 800df6e:	440a      	add	r2, r1
 800df70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800df7a:	79fb      	ldrb	r3, [r7, #7]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d14b      	bne.n	800e018 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	691b      	ldr	r3, [r3, #16]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d009      	beq.n	800df9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	015a      	lsls	r2, r3, #5
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	4413      	add	r3, r2
 800df90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df94:	461a      	mov	r2, r3
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	78db      	ldrb	r3, [r3, #3]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d128      	bne.n	800dff6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d110      	bne.n	800dfd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dfb4:	69bb      	ldr	r3, [r7, #24]
 800dfb6:	015a      	lsls	r2, r3, #5
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	4413      	add	r3, r2
 800dfbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	69ba      	ldr	r2, [r7, #24]
 800dfc4:	0151      	lsls	r1, r2, #5
 800dfc6:	69fa      	ldr	r2, [r7, #28]
 800dfc8:	440a      	add	r2, r1
 800dfca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dfd2:	6013      	str	r3, [r2, #0]
 800dfd4:	e00f      	b.n	800dff6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	015a      	lsls	r2, r3, #5
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	4413      	add	r3, r2
 800dfde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	69ba      	ldr	r2, [r7, #24]
 800dfe6:	0151      	lsls	r1, r2, #5
 800dfe8:	69fa      	ldr	r2, [r7, #28]
 800dfea:	440a      	add	r2, r1
 800dfec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dff4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	015a      	lsls	r2, r3, #5
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	4413      	add	r3, r2
 800dffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	69ba      	ldr	r2, [r7, #24]
 800e006:	0151      	lsls	r1, r2, #5
 800e008:	69fa      	ldr	r2, [r7, #28]
 800e00a:	440a      	add	r2, r1
 800e00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e010:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e014:	6013      	str	r3, [r2, #0]
 800e016:	e12f      	b.n	800e278 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	015a      	lsls	r2, r3, #5
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	4413      	add	r3, r2
 800e020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	69ba      	ldr	r2, [r7, #24]
 800e028:	0151      	lsls	r1, r2, #5
 800e02a:	69fa      	ldr	r2, [r7, #28]
 800e02c:	440a      	add	r2, r1
 800e02e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e032:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e036:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	78db      	ldrb	r3, [r3, #3]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d015      	beq.n	800e06c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	695b      	ldr	r3, [r3, #20]
 800e044:	2b00      	cmp	r3, #0
 800e046:	f000 8117 	beq.w	800e278 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	f003 030f 	and.w	r3, r3, #15
 800e05a:	2101      	movs	r1, #1
 800e05c:	fa01 f303 	lsl.w	r3, r1, r3
 800e060:	69f9      	ldr	r1, [r7, #28]
 800e062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e066:	4313      	orrs	r3, r2
 800e068:	634b      	str	r3, [r1, #52]	; 0x34
 800e06a:	e105      	b.n	800e278 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d110      	bne.n	800e09e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	015a      	lsls	r2, r3, #5
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	4413      	add	r3, r2
 800e084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	69ba      	ldr	r2, [r7, #24]
 800e08c:	0151      	lsls	r1, r2, #5
 800e08e:	69fa      	ldr	r2, [r7, #28]
 800e090:	440a      	add	r2, r1
 800e092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e09a:	6013      	str	r3, [r2, #0]
 800e09c:	e00f      	b.n	800e0be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	015a      	lsls	r2, r3, #5
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	69ba      	ldr	r2, [r7, #24]
 800e0ae:	0151      	lsls	r1, r2, #5
 800e0b0:	69fa      	ldr	r2, [r7, #28]
 800e0b2:	440a      	add	r2, r1
 800e0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	68d9      	ldr	r1, [r3, #12]
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	781a      	ldrb	r2, [r3, #0]
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	b298      	uxth	r0, r3
 800e0cc:	79fb      	ldrb	r3, [r7, #7]
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f000 fa2b 	bl	800e52e <USB_WritePacket>
 800e0d8:	e0ce      	b.n	800e278 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	015a      	lsls	r2, r3, #5
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	69ba      	ldr	r2, [r7, #24]
 800e0ea:	0151      	lsls	r1, r2, #5
 800e0ec:	69fa      	ldr	r2, [r7, #28]
 800e0ee:	440a      	add	r2, r1
 800e0f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0f4:	0cdb      	lsrs	r3, r3, #19
 800e0f6:	04db      	lsls	r3, r3, #19
 800e0f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	015a      	lsls	r2, r3, #5
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	4413      	add	r3, r2
 800e102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	69ba      	ldr	r2, [r7, #24]
 800e10a:	0151      	lsls	r1, r2, #5
 800e10c:	69fa      	ldr	r2, [r7, #28]
 800e10e:	440a      	add	r2, r1
 800e110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e114:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e118:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e11c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d126      	bne.n	800e174 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	015a      	lsls	r2, r3, #5
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	4413      	add	r3, r2
 800e12e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e132:	691a      	ldr	r2, [r3, #16]
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e13c:	69b9      	ldr	r1, [r7, #24]
 800e13e:	0148      	lsls	r0, r1, #5
 800e140:	69f9      	ldr	r1, [r7, #28]
 800e142:	4401      	add	r1, r0
 800e144:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e148:	4313      	orrs	r3, r2
 800e14a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	015a      	lsls	r2, r3, #5
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	4413      	add	r3, r2
 800e154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e158:	691b      	ldr	r3, [r3, #16]
 800e15a:	69ba      	ldr	r2, [r7, #24]
 800e15c:	0151      	lsls	r1, r2, #5
 800e15e:	69fa      	ldr	r2, [r7, #28]
 800e160:	440a      	add	r2, r1
 800e162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e16a:	6113      	str	r3, [r2, #16]
 800e16c:	e036      	b.n	800e1dc <USB_EPStartXfer+0x3dc>
 800e16e:	bf00      	nop
 800e170:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	695a      	ldr	r2, [r3, #20]
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	4413      	add	r3, r2
 800e17e:	1e5a      	subs	r2, r3, #1
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	fbb2 f3f3 	udiv	r3, r2, r3
 800e188:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e18a:	69bb      	ldr	r3, [r7, #24]
 800e18c:	015a      	lsls	r2, r3, #5
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	4413      	add	r3, r2
 800e192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e196:	691a      	ldr	r2, [r3, #16]
 800e198:	8afb      	ldrh	r3, [r7, #22]
 800e19a:	04d9      	lsls	r1, r3, #19
 800e19c:	4b39      	ldr	r3, [pc, #228]	; (800e284 <USB_EPStartXfer+0x484>)
 800e19e:	400b      	ands	r3, r1
 800e1a0:	69b9      	ldr	r1, [r7, #24]
 800e1a2:	0148      	lsls	r0, r1, #5
 800e1a4:	69f9      	ldr	r1, [r7, #28]
 800e1a6:	4401      	add	r1, r0
 800e1a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	015a      	lsls	r2, r3, #5
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1bc:	691a      	ldr	r2, [r3, #16]
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	8af9      	ldrh	r1, [r7, #22]
 800e1c4:	fb01 f303 	mul.w	r3, r1, r3
 800e1c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1cc:	69b9      	ldr	r1, [r7, #24]
 800e1ce:	0148      	lsls	r0, r1, #5
 800e1d0:	69f9      	ldr	r1, [r7, #28]
 800e1d2:	4401      	add	r1, r0
 800e1d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e1dc:	79fb      	ldrb	r3, [r7, #7]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d10d      	bne.n	800e1fe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d009      	beq.n	800e1fe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	68d9      	ldr	r1, [r3, #12]
 800e1ee:	69bb      	ldr	r3, [r7, #24]
 800e1f0:	015a      	lsls	r2, r3, #5
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1fa:	460a      	mov	r2, r1
 800e1fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	78db      	ldrb	r3, [r3, #3]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d128      	bne.n	800e258 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e212:	2b00      	cmp	r3, #0
 800e214:	d110      	bne.n	800e238 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	015a      	lsls	r2, r3, #5
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	4413      	add	r3, r2
 800e21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	69ba      	ldr	r2, [r7, #24]
 800e226:	0151      	lsls	r1, r2, #5
 800e228:	69fa      	ldr	r2, [r7, #28]
 800e22a:	440a      	add	r2, r1
 800e22c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e234:	6013      	str	r3, [r2, #0]
 800e236:	e00f      	b.n	800e258 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	015a      	lsls	r2, r3, #5
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	4413      	add	r3, r2
 800e240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	69ba      	ldr	r2, [r7, #24]
 800e248:	0151      	lsls	r1, r2, #5
 800e24a:	69fa      	ldr	r2, [r7, #28]
 800e24c:	440a      	add	r2, r1
 800e24e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e256:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e258:	69bb      	ldr	r3, [r7, #24]
 800e25a:	015a      	lsls	r2, r3, #5
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	4413      	add	r3, r2
 800e260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	69ba      	ldr	r2, [r7, #24]
 800e268:	0151      	lsls	r1, r2, #5
 800e26a:	69fa      	ldr	r2, [r7, #28]
 800e26c:	440a      	add	r2, r1
 800e26e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e272:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e276:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3720      	adds	r7, #32
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	1ff80000 	.word	0x1ff80000

0800e288 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e288:	b480      	push	{r7}
 800e28a:	b087      	sub	sp, #28
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	4613      	mov	r3, r2
 800e294:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	785b      	ldrb	r3, [r3, #1]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	f040 80cd 	bne.w	800e444 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	695b      	ldr	r3, [r3, #20]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d132      	bne.n	800e318 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	015a      	lsls	r2, r3, #5
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2be:	691b      	ldr	r3, [r3, #16]
 800e2c0:	693a      	ldr	r2, [r7, #16]
 800e2c2:	0151      	lsls	r1, r2, #5
 800e2c4:	697a      	ldr	r2, [r7, #20]
 800e2c6:	440a      	add	r2, r1
 800e2c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e2d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e2d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	015a      	lsls	r2, r3, #5
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	4413      	add	r3, r2
 800e2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2e2:	691b      	ldr	r3, [r3, #16]
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	0151      	lsls	r1, r2, #5
 800e2e8:	697a      	ldr	r2, [r7, #20]
 800e2ea:	440a      	add	r2, r1
 800e2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e2f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	015a      	lsls	r2, r3, #5
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e302:	691b      	ldr	r3, [r3, #16]
 800e304:	693a      	ldr	r2, [r7, #16]
 800e306:	0151      	lsls	r1, r2, #5
 800e308:	697a      	ldr	r2, [r7, #20]
 800e30a:	440a      	add	r2, r1
 800e30c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e310:	0cdb      	lsrs	r3, r3, #19
 800e312:	04db      	lsls	r3, r3, #19
 800e314:	6113      	str	r3, [r2, #16]
 800e316:	e04e      	b.n	800e3b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	015a      	lsls	r2, r3, #5
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	4413      	add	r3, r2
 800e320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	693a      	ldr	r2, [r7, #16]
 800e328:	0151      	lsls	r1, r2, #5
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	440a      	add	r2, r1
 800e32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e332:	0cdb      	lsrs	r3, r3, #19
 800e334:	04db      	lsls	r3, r3, #19
 800e336:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	015a      	lsls	r2, r3, #5
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	4413      	add	r3, r2
 800e340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	0151      	lsls	r1, r2, #5
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	440a      	add	r2, r1
 800e34e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e352:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e356:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e35a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	695a      	ldr	r2, [r3, #20]
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	429a      	cmp	r2, r3
 800e366:	d903      	bls.n	800e370 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	689a      	ldr	r2, [r3, #8]
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	015a      	lsls	r2, r3, #5
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	4413      	add	r3, r2
 800e378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	693a      	ldr	r2, [r7, #16]
 800e380:	0151      	lsls	r1, r2, #5
 800e382:	697a      	ldr	r2, [r7, #20]
 800e384:	440a      	add	r2, r1
 800e386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e38a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e38e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	015a      	lsls	r2, r3, #5
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	4413      	add	r3, r2
 800e398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e39c:	691a      	ldr	r2, [r3, #16]
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	695b      	ldr	r3, [r3, #20]
 800e3a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3a6:	6939      	ldr	r1, [r7, #16]
 800e3a8:	0148      	lsls	r0, r1, #5
 800e3aa:	6979      	ldr	r1, [r7, #20]
 800e3ac:	4401      	add	r1, r0
 800e3ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e3b6:	79fb      	ldrb	r3, [r7, #7]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d11e      	bne.n	800e3fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	691b      	ldr	r3, [r3, #16]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d009      	beq.n	800e3d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	015a      	lsls	r2, r3, #5
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	015a      	lsls	r2, r3, #5
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	4413      	add	r3, r2
 800e3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	693a      	ldr	r2, [r7, #16]
 800e3e8:	0151      	lsls	r1, r2, #5
 800e3ea:	697a      	ldr	r2, [r7, #20]
 800e3ec:	440a      	add	r2, r1
 800e3ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3f6:	6013      	str	r3, [r2, #0]
 800e3f8:	e092      	b.n	800e520 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	015a      	lsls	r2, r3, #5
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	4413      	add	r3, r2
 800e402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	0151      	lsls	r1, r2, #5
 800e40c:	697a      	ldr	r2, [r7, #20]
 800e40e:	440a      	add	r2, r1
 800e410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e414:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e418:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	695b      	ldr	r3, [r3, #20]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d07e      	beq.n	800e520 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	f003 030f 	and.w	r3, r3, #15
 800e432:	2101      	movs	r1, #1
 800e434:	fa01 f303 	lsl.w	r3, r1, r3
 800e438:	6979      	ldr	r1, [r7, #20]
 800e43a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e43e:	4313      	orrs	r3, r2
 800e440:	634b      	str	r3, [r1, #52]	; 0x34
 800e442:	e06d      	b.n	800e520 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	015a      	lsls	r2, r3, #5
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	4413      	add	r3, r2
 800e44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e450:	691b      	ldr	r3, [r3, #16]
 800e452:	693a      	ldr	r2, [r7, #16]
 800e454:	0151      	lsls	r1, r2, #5
 800e456:	697a      	ldr	r2, [r7, #20]
 800e458:	440a      	add	r2, r1
 800e45a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e45e:	0cdb      	lsrs	r3, r3, #19
 800e460:	04db      	lsls	r3, r3, #19
 800e462:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	015a      	lsls	r2, r3, #5
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	4413      	add	r3, r2
 800e46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	693a      	ldr	r2, [r7, #16]
 800e474:	0151      	lsls	r1, r2, #5
 800e476:	697a      	ldr	r2, [r7, #20]
 800e478:	440a      	add	r2, r1
 800e47a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e47e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e482:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e486:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	695b      	ldr	r3, [r3, #20]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d003      	beq.n	800e498 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	689a      	ldr	r2, [r3, #8]
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	015a      	lsls	r2, r3, #5
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	4413      	add	r3, r2
 800e4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4a4:	691b      	ldr	r3, [r3, #16]
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	0151      	lsls	r1, r2, #5
 800e4aa:	697a      	ldr	r2, [r7, #20]
 800e4ac:	440a      	add	r2, r1
 800e4ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	015a      	lsls	r2, r3, #5
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4c4:	691a      	ldr	r2, [r3, #16]
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4ce:	6939      	ldr	r1, [r7, #16]
 800e4d0:	0148      	lsls	r0, r1, #5
 800e4d2:	6979      	ldr	r1, [r7, #20]
 800e4d4:	4401      	add	r1, r0
 800e4d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e4de:	79fb      	ldrb	r3, [r7, #7]
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d10d      	bne.n	800e500 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d009      	beq.n	800e500 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	68d9      	ldr	r1, [r3, #12]
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	015a      	lsls	r2, r3, #5
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4fc:	460a      	mov	r2, r1
 800e4fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	015a      	lsls	r2, r3, #5
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	4413      	add	r3, r2
 800e508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	0151      	lsls	r1, r2, #5
 800e512:	697a      	ldr	r2, [r7, #20]
 800e514:	440a      	add	r2, r1
 800e516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e51a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e51e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e520:	2300      	movs	r3, #0
}
 800e522:	4618      	mov	r0, r3
 800e524:	371c      	adds	r7, #28
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e52e:	b480      	push	{r7}
 800e530:	b089      	sub	sp, #36	; 0x24
 800e532:	af00      	add	r7, sp, #0
 800e534:	60f8      	str	r0, [r7, #12]
 800e536:	60b9      	str	r1, [r7, #8]
 800e538:	4611      	mov	r1, r2
 800e53a:	461a      	mov	r2, r3
 800e53c:	460b      	mov	r3, r1
 800e53e:	71fb      	strb	r3, [r7, #7]
 800e540:	4613      	mov	r3, r2
 800e542:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e54c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e550:	2b00      	cmp	r3, #0
 800e552:	d123      	bne.n	800e59c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e554:	88bb      	ldrh	r3, [r7, #4]
 800e556:	3303      	adds	r3, #3
 800e558:	089b      	lsrs	r3, r3, #2
 800e55a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e55c:	2300      	movs	r3, #0
 800e55e:	61bb      	str	r3, [r7, #24]
 800e560:	e018      	b.n	800e594 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e562:	79fb      	ldrb	r3, [r7, #7]
 800e564:	031a      	lsls	r2, r3, #12
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	4413      	add	r3, r2
 800e56a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e56e:	461a      	mov	r2, r3
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	3301      	adds	r3, #1
 800e57a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	3301      	adds	r3, #1
 800e580:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	3301      	adds	r3, #1
 800e586:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	3301      	adds	r3, #1
 800e58c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	3301      	adds	r3, #1
 800e592:	61bb      	str	r3, [r7, #24]
 800e594:	69ba      	ldr	r2, [r7, #24]
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d3e2      	bcc.n	800e562 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e59c:	2300      	movs	r3, #0
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3724      	adds	r7, #36	; 0x24
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr

0800e5aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e5aa:	b480      	push	{r7}
 800e5ac:	b08b      	sub	sp, #44	; 0x2c
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	60f8      	str	r0, [r7, #12]
 800e5b2:	60b9      	str	r1, [r7, #8]
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e5c0:	88fb      	ldrh	r3, [r7, #6]
 800e5c2:	089b      	lsrs	r3, r3, #2
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e5c8:	88fb      	ldrh	r3, [r7, #6]
 800e5ca:	f003 0303 	and.w	r3, r3, #3
 800e5ce:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	623b      	str	r3, [r7, #32]
 800e5d4:	e014      	b.n	800e600 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e0:	601a      	str	r2, [r3, #0]
    pDest++;
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e5fa:	6a3b      	ldr	r3, [r7, #32]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	623b      	str	r3, [r7, #32]
 800e600:	6a3a      	ldr	r2, [r7, #32]
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	429a      	cmp	r2, r3
 800e606:	d3e6      	bcc.n	800e5d6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e608:	8bfb      	ldrh	r3, [r7, #30]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d01e      	beq.n	800e64c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e60e:	2300      	movs	r3, #0
 800e610:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e618:	461a      	mov	r2, r3
 800e61a:	f107 0310 	add.w	r3, r7, #16
 800e61e:	6812      	ldr	r2, [r2, #0]
 800e620:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e622:	693a      	ldr	r2, [r7, #16]
 800e624:	6a3b      	ldr	r3, [r7, #32]
 800e626:	b2db      	uxtb	r3, r3
 800e628:	00db      	lsls	r3, r3, #3
 800e62a:	fa22 f303 	lsr.w	r3, r2, r3
 800e62e:	b2da      	uxtb	r2, r3
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	701a      	strb	r2, [r3, #0]
      i++;
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	3301      	adds	r3, #1
 800e638:	623b      	str	r3, [r7, #32]
      pDest++;
 800e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63c:	3301      	adds	r3, #1
 800e63e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e640:	8bfb      	ldrh	r3, [r7, #30]
 800e642:	3b01      	subs	r3, #1
 800e644:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e646:	8bfb      	ldrh	r3, [r7, #30]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1ea      	bne.n	800e622 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e64e:	4618      	mov	r0, r3
 800e650:	372c      	adds	r7, #44	; 0x2c
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr

0800e65a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e65a:	b480      	push	{r7}
 800e65c:	b085      	sub	sp, #20
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	785b      	ldrb	r3, [r3, #1]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d12c      	bne.n	800e6d0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	015a      	lsls	r2, r3, #5
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	4413      	add	r3, r2
 800e67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	db12      	blt.n	800e6ae <USB_EPSetStall+0x54>
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00f      	beq.n	800e6ae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	015a      	lsls	r2, r3, #5
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	4413      	add	r3, r2
 800e696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	68ba      	ldr	r2, [r7, #8]
 800e69e:	0151      	lsls	r1, r2, #5
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	440a      	add	r2, r1
 800e6a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e6ac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	015a      	lsls	r2, r3, #5
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	0151      	lsls	r1, r2, #5
 800e6c0:	68fa      	ldr	r2, [r7, #12]
 800e6c2:	440a      	add	r2, r1
 800e6c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	e02b      	b.n	800e728 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	015a      	lsls	r2, r3, #5
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	db12      	blt.n	800e708 <USB_EPSetStall+0xae>
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00f      	beq.n	800e708 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	015a      	lsls	r2, r3, #5
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	0151      	lsls	r1, r2, #5
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	440a      	add	r2, r1
 800e6fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e702:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e706:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	015a      	lsls	r2, r3, #5
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	4413      	add	r3, r2
 800e710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	0151      	lsls	r1, r2, #5
 800e71a:	68fa      	ldr	r2, [r7, #12]
 800e71c:	440a      	add	r2, r1
 800e71e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e722:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e726:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e728:	2300      	movs	r3, #0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3714      	adds	r7, #20
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr

0800e736 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e736:	b480      	push	{r7}
 800e738:	b085      	sub	sp, #20
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	785b      	ldrb	r3, [r3, #1]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d128      	bne.n	800e7a4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	0151      	lsls	r1, r2, #5
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	440a      	add	r2, r1
 800e768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e76c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e770:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	78db      	ldrb	r3, [r3, #3]
 800e776:	2b03      	cmp	r3, #3
 800e778:	d003      	beq.n	800e782 <USB_EPClearStall+0x4c>
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	78db      	ldrb	r3, [r3, #3]
 800e77e:	2b02      	cmp	r3, #2
 800e780:	d138      	bne.n	800e7f4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	015a      	lsls	r2, r3, #5
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	4413      	add	r3, r2
 800e78a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	0151      	lsls	r1, r2, #5
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	440a      	add	r2, r1
 800e798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e79c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7a0:	6013      	str	r3, [r2, #0]
 800e7a2:	e027      	b.n	800e7f4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	015a      	lsls	r2, r3, #5
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	0151      	lsls	r1, r2, #5
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	440a      	add	r2, r1
 800e7ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e7c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	78db      	ldrb	r3, [r3, #3]
 800e7c8:	2b03      	cmp	r3, #3
 800e7ca:	d003      	beq.n	800e7d4 <USB_EPClearStall+0x9e>
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	78db      	ldrb	r3, [r3, #3]
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	d10f      	bne.n	800e7f4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	015a      	lsls	r2, r3, #5
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	4413      	add	r3, r2
 800e7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	68ba      	ldr	r2, [r7, #8]
 800e7e4:	0151      	lsls	r1, r2, #5
 800e7e6:	68fa      	ldr	r2, [r7, #12]
 800e7e8:	440a      	add	r2, r1
 800e7ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7f2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3714      	adds	r7, #20
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e802:	b480      	push	{r7}
 800e804:	b085      	sub	sp, #20
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
 800e80a:	460b      	mov	r3, r1
 800e80c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e820:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e824:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	78fb      	ldrb	r3, [r7, #3]
 800e830:	011b      	lsls	r3, r3, #4
 800e832:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e836:	68f9      	ldr	r1, [r7, #12]
 800e838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e83c:	4313      	orrs	r3, r2
 800e83e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3714      	adds	r7, #20
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr

0800e84e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e84e:	b480      	push	{r7}
 800e850:	b085      	sub	sp, #20
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e868:	f023 0303 	bic.w	r3, r3, #3
 800e86c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e87c:	f023 0302 	bic.w	r3, r3, #2
 800e880:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e890:	b480      	push	{r7}
 800e892:	b085      	sub	sp, #20
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e8aa:	f023 0303 	bic.w	r3, r3, #3
 800e8ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	68fa      	ldr	r2, [r7, #12]
 800e8ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8be:	f043 0302 	orr.w	r3, r3, #2
 800e8c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3714      	adds	r7, #20
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr

0800e8d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e8d2:	b480      	push	{r7}
 800e8d4:	b085      	sub	sp, #20
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	695b      	ldr	r3, [r3, #20]
 800e8de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	699b      	ldr	r3, [r3, #24]
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	4013      	ands	r3, r2
 800e8e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3714      	adds	r7, #20
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e90a:	699b      	ldr	r3, [r3, #24]
 800e90c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e914:	69db      	ldr	r3, [r3, #28]
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	4013      	ands	r3, r2
 800e91a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	0c1b      	lsrs	r3, r3, #16
}
 800e920:	4618      	mov	r0, r3
 800e922:	3714      	adds	r7, #20
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e948:	69db      	ldr	r3, [r3, #28]
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	4013      	ands	r3, r2
 800e94e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	b29b      	uxth	r3, r3
}
 800e954:	4618      	mov	r0, r3
 800e956:	3714      	adds	r7, #20
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e960:	b480      	push	{r7}
 800e962:	b085      	sub	sp, #20
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e970:	78fb      	ldrb	r3, [r7, #3]
 800e972:	015a      	lsls	r2, r3, #5
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	4413      	add	r3, r2
 800e978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e986:	695b      	ldr	r3, [r3, #20]
 800e988:	68ba      	ldr	r2, [r7, #8]
 800e98a:	4013      	ands	r3, r2
 800e98c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e98e:	68bb      	ldr	r3, [r7, #8]
}
 800e990:	4618      	mov	r0, r3
 800e992:	3714      	adds	r7, #20
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b087      	sub	sp, #28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b2:	691b      	ldr	r3, [r3, #16]
 800e9b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e9c0:	78fb      	ldrb	r3, [r7, #3]
 800e9c2:	f003 030f 	and.w	r3, r3, #15
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800e9cc:	01db      	lsls	r3, r3, #7
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	693a      	ldr	r2, [r7, #16]
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e9d6:	78fb      	ldrb	r3, [r7, #3]
 800e9d8:	015a      	lsls	r2, r3, #5
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	4413      	add	r3, r2
 800e9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9e2:	689b      	ldr	r3, [r3, #8]
 800e9e4:	693a      	ldr	r2, [r7, #16]
 800e9e6:	4013      	ands	r3, r2
 800e9e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e9ea:	68bb      	ldr	r3, [r7, #8]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	371c      	adds	r7, #28
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	695b      	ldr	r3, [r3, #20]
 800ea04:	f003 0301 	and.w	r3, r3, #1
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea2e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ea32:	f023 0307 	bic.w	r3, r3, #7
 800ea36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea4c:	2300      	movs	r3, #0
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3714      	adds	r7, #20
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr
	...

0800ea5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b087      	sub	sp, #28
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	460b      	mov	r3, r1
 800ea66:	607a      	str	r2, [r7, #4]
 800ea68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	333c      	adds	r3, #60	; 0x3c
 800ea72:	3304      	adds	r3, #4
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	4a26      	ldr	r2, [pc, #152]	; (800eb14 <USB_EP0_OutStart+0xb8>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d90a      	bls.n	800ea96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea90:	d101      	bne.n	800ea96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	e037      	b.n	800eb06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	697a      	ldr	r2, [r7, #20]
 800eaac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eabc:	691b      	ldr	r3, [r3, #16]
 800eabe:	697a      	ldr	r2, [r7, #20]
 800eac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eac4:	f043 0318 	orr.w	r3, r3, #24
 800eac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	697a      	ldr	r2, [r7, #20]
 800ead4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ead8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800eadc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800eade:	7afb      	ldrb	r3, [r7, #11]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d10f      	bne.n	800eb04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaea:	461a      	mov	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	697a      	ldr	r2, [r7, #20]
 800eafa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eafe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800eb02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	371c      	adds	r7, #28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	4f54300a 	.word	0x4f54300a

0800eb18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eb20:	2300      	movs	r3, #0
 800eb22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	3301      	adds	r3, #1
 800eb28:	60fb      	str	r3, [r7, #12]
 800eb2a:	4a13      	ldr	r2, [pc, #76]	; (800eb78 <USB_CoreReset+0x60>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d901      	bls.n	800eb34 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800eb30:	2303      	movs	r3, #3
 800eb32:	e01a      	b.n	800eb6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	691b      	ldr	r3, [r3, #16]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	daf3      	bge.n	800eb24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	f043 0201 	orr.w	r2, r3, #1
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	3301      	adds	r3, #1
 800eb50:	60fb      	str	r3, [r7, #12]
 800eb52:	4a09      	ldr	r2, [pc, #36]	; (800eb78 <USB_CoreReset+0x60>)
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d901      	bls.n	800eb5c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	e006      	b.n	800eb6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	f003 0301 	and.w	r3, r3, #1
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d0f1      	beq.n	800eb4c <USB_CoreReset+0x34>

  return HAL_OK;
 800eb68:	2300      	movs	r3, #0
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3714      	adds	r7, #20
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	00030d40 	.word	0x00030d40

0800eb7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	460b      	mov	r3, r1
 800eb86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800eb88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800eb8c:	f002 f906 	bl	8010d9c <USBD_static_malloc>
 800eb90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d105      	bne.n	800eba4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800eba0:	2302      	movs	r3, #2
 800eba2:	e066      	b.n	800ec72 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	68fa      	ldr	r2, [r7, #12]
 800eba8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	7c1b      	ldrb	r3, [r3, #16]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d119      	bne.n	800ebe8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ebb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebb8:	2202      	movs	r2, #2
 800ebba:	2181      	movs	r1, #129	; 0x81
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f001 ffca 	bl	8010b56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ebc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebcc:	2202      	movs	r2, #2
 800ebce:	2101      	movs	r1, #1
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f001 ffc0 	bl	8010b56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2201      	movs	r2, #1
 800ebda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2210      	movs	r2, #16
 800ebe2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ebe6:	e016      	b.n	800ec16 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ebe8:	2340      	movs	r3, #64	; 0x40
 800ebea:	2202      	movs	r2, #2
 800ebec:	2181      	movs	r1, #129	; 0x81
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f001 ffb1 	bl	8010b56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ebfa:	2340      	movs	r3, #64	; 0x40
 800ebfc:	2202      	movs	r2, #2
 800ebfe:	2101      	movs	r1, #1
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f001 ffa8 	bl	8010b56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2201      	movs	r2, #1
 800ec0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2210      	movs	r2, #16
 800ec12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ec16:	2308      	movs	r3, #8
 800ec18:	2203      	movs	r2, #3
 800ec1a:	2182      	movs	r1, #130	; 0x82
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f001 ff9a 	bl	8010b56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2201      	movs	r2, #1
 800ec26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	7c1b      	ldrb	r3, [r3, #16]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d109      	bne.n	800ec60 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ec52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec56:	2101      	movs	r1, #1
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f002 f86b 	bl	8010d34 <USBD_LL_PrepareReceive>
 800ec5e:	e007      	b.n	800ec70 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ec66:	2340      	movs	r3, #64	; 0x40
 800ec68:	2101      	movs	r1, #1
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f002 f862 	bl	8010d34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ec70:	2300      	movs	r3, #0
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}

0800ec7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec7a:	b580      	push	{r7, lr}
 800ec7c:	b082      	sub	sp, #8
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
 800ec82:	460b      	mov	r3, r1
 800ec84:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ec86:	2181      	movs	r1, #129	; 0x81
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f001 ff8a 	bl	8010ba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ec94:	2101      	movs	r1, #1
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f001 ff83 	bl	8010ba2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eca4:	2182      	movs	r1, #130	; 0x82
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f001 ff7b 	bl	8010ba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d00e      	beq.n	800ece4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f002 f86e 	bl	8010db8 <USBD_static_free>
    pdev->pClassData = NULL;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3708      	adds	r7, #8
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
	...

0800ecf0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ed02:	2300      	movs	r3, #0
 800ed04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ed06:	2300      	movs	r3, #0
 800ed08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d101      	bne.n	800ed18 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ed14:	2303      	movs	r3, #3
 800ed16:	e0af      	b.n	800ee78 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d03f      	beq.n	800eda4 <USBD_CDC_Setup+0xb4>
 800ed24:	2b20      	cmp	r3, #32
 800ed26:	f040 809f 	bne.w	800ee68 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	88db      	ldrh	r3, [r3, #6]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d02e      	beq.n	800ed90 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	b25b      	sxtb	r3, r3
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	da16      	bge.n	800ed6a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ed48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed4a:	683a      	ldr	r2, [r7, #0]
 800ed4c:	88d2      	ldrh	r2, [r2, #6]
 800ed4e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	88db      	ldrh	r3, [r3, #6]
 800ed54:	2b07      	cmp	r3, #7
 800ed56:	bf28      	it	cs
 800ed58:	2307      	movcs	r3, #7
 800ed5a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	89fa      	ldrh	r2, [r7, #14]
 800ed60:	4619      	mov	r1, r3
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f001 fae9 	bl	801033a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ed68:	e085      	b.n	800ee76 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	785a      	ldrb	r2, [r3, #1]
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	88db      	ldrh	r3, [r3, #6]
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ed80:	6939      	ldr	r1, [r7, #16]
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	88db      	ldrh	r3, [r3, #6]
 800ed86:	461a      	mov	r2, r3
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f001 fb02 	bl	8010392 <USBD_CtlPrepareRx>
      break;
 800ed8e:	e072      	b.n	800ee76 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	7850      	ldrb	r0, [r2, #1]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	6839      	ldr	r1, [r7, #0]
 800eda0:	4798      	blx	r3
      break;
 800eda2:	e068      	b.n	800ee76 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	785b      	ldrb	r3, [r3, #1]
 800eda8:	2b0b      	cmp	r3, #11
 800edaa:	d852      	bhi.n	800ee52 <USBD_CDC_Setup+0x162>
 800edac:	a201      	add	r2, pc, #4	; (adr r2, 800edb4 <USBD_CDC_Setup+0xc4>)
 800edae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb2:	bf00      	nop
 800edb4:	0800ede5 	.word	0x0800ede5
 800edb8:	0800ee61 	.word	0x0800ee61
 800edbc:	0800ee53 	.word	0x0800ee53
 800edc0:	0800ee53 	.word	0x0800ee53
 800edc4:	0800ee53 	.word	0x0800ee53
 800edc8:	0800ee53 	.word	0x0800ee53
 800edcc:	0800ee53 	.word	0x0800ee53
 800edd0:	0800ee53 	.word	0x0800ee53
 800edd4:	0800ee53 	.word	0x0800ee53
 800edd8:	0800ee53 	.word	0x0800ee53
 800eddc:	0800ee0f 	.word	0x0800ee0f
 800ede0:	0800ee39 	.word	0x0800ee39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edea:	b2db      	uxtb	r3, r3
 800edec:	2b03      	cmp	r3, #3
 800edee:	d107      	bne.n	800ee00 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800edf0:	f107 030a 	add.w	r3, r7, #10
 800edf4:	2202      	movs	r2, #2
 800edf6:	4619      	mov	r1, r3
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f001 fa9e 	bl	801033a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800edfe:	e032      	b.n	800ee66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f001 fa28 	bl	8010258 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee08:	2303      	movs	r3, #3
 800ee0a:	75fb      	strb	r3, [r7, #23]
          break;
 800ee0c:	e02b      	b.n	800ee66 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	2b03      	cmp	r3, #3
 800ee18:	d107      	bne.n	800ee2a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ee1a:	f107 030d 	add.w	r3, r7, #13
 800ee1e:	2201      	movs	r2, #1
 800ee20:	4619      	mov	r1, r3
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f001 fa89 	bl	801033a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ee28:	e01d      	b.n	800ee66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ee2a:	6839      	ldr	r1, [r7, #0]
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f001 fa13 	bl	8010258 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee32:	2303      	movs	r3, #3
 800ee34:	75fb      	strb	r3, [r7, #23]
          break;
 800ee36:	e016      	b.n	800ee66 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b03      	cmp	r3, #3
 800ee42:	d00f      	beq.n	800ee64 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ee44:	6839      	ldr	r1, [r7, #0]
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f001 fa06 	bl	8010258 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee4c:	2303      	movs	r3, #3
 800ee4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ee50:	e008      	b.n	800ee64 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ee52:	6839      	ldr	r1, [r7, #0]
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f001 f9ff 	bl	8010258 <USBD_CtlError>
          ret = USBD_FAIL;
 800ee5a:	2303      	movs	r3, #3
 800ee5c:	75fb      	strb	r3, [r7, #23]
          break;
 800ee5e:	e002      	b.n	800ee66 <USBD_CDC_Setup+0x176>
          break;
 800ee60:	bf00      	nop
 800ee62:	e008      	b.n	800ee76 <USBD_CDC_Setup+0x186>
          break;
 800ee64:	bf00      	nop
      }
      break;
 800ee66:	e006      	b.n	800ee76 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ee68:	6839      	ldr	r1, [r7, #0]
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f001 f9f4 	bl	8010258 <USBD_CtlError>
      ret = USBD_FAIL;
 800ee70:	2303      	movs	r3, #3
 800ee72:	75fb      	strb	r3, [r7, #23]
      break;
 800ee74:	bf00      	nop
  }

  return (uint8_t)ret;
 800ee76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3718      	adds	r7, #24
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	460b      	mov	r3, r1
 800ee8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d101      	bne.n	800eea2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	e04f      	b.n	800ef42 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eea8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eeaa:	78fa      	ldrb	r2, [r7, #3]
 800eeac:	6879      	ldr	r1, [r7, #4]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4413      	add	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	440b      	add	r3, r1
 800eeb8:	3318      	adds	r3, #24
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d029      	beq.n	800ef14 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800eec0:	78fa      	ldrb	r2, [r7, #3]
 800eec2:	6879      	ldr	r1, [r7, #4]
 800eec4:	4613      	mov	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4413      	add	r3, r2
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	440b      	add	r3, r1
 800eece:	3318      	adds	r3, #24
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	78f9      	ldrb	r1, [r7, #3]
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	460b      	mov	r3, r1
 800eed8:	00db      	lsls	r3, r3, #3
 800eeda:	1a5b      	subs	r3, r3, r1
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	4403      	add	r3, r0
 800eee0:	3344      	adds	r3, #68	; 0x44
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	fbb2 f1f3 	udiv	r1, r2, r3
 800eee8:	fb03 f301 	mul.w	r3, r3, r1
 800eeec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d110      	bne.n	800ef14 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800eef2:	78fa      	ldrb	r2, [r7, #3]
 800eef4:	6879      	ldr	r1, [r7, #4]
 800eef6:	4613      	mov	r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4413      	add	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	440b      	add	r3, r1
 800ef00:	3318      	adds	r3, #24
 800ef02:	2200      	movs	r2, #0
 800ef04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ef06:	78f9      	ldrb	r1, [r7, #3]
 800ef08:	2300      	movs	r3, #0
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f001 fef0 	bl	8010cf2 <USBD_LL_Transmit>
 800ef12:	e015      	b.n	800ef40 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	2200      	movs	r2, #0
 800ef18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef22:	691b      	ldr	r3, [r3, #16]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00b      	beq.n	800ef40 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef2e:	691b      	ldr	r3, [r3, #16]
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ef3c:	78fa      	ldrb	r2, [r7, #3]
 800ef3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ef40:	2300      	movs	r3, #0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b084      	sub	sp, #16
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	6078      	str	r0, [r7, #4]
 800ef52:	460b      	mov	r3, r1
 800ef54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d101      	bne.n	800ef6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef68:	2303      	movs	r3, #3
 800ef6a:	e015      	b.n	800ef98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ef6c:	78fb      	ldrb	r3, [r7, #3]
 800ef6e:	4619      	mov	r1, r3
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f001 ff00 	bl	8010d76 <USBD_LL_GetRxDataSize>
 800ef76:	4602      	mov	r2, r0
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ef92:	4611      	mov	r1, r2
 800ef94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3710      	adds	r7, #16
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d101      	bne.n	800efba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800efb6:	2303      	movs	r3, #3
 800efb8:	e01b      	b.n	800eff2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d015      	beq.n	800eff0 <USBD_CDC_EP0_RxReady+0x50>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800efca:	2bff      	cmp	r3, #255	; 0xff
 800efcc:	d010      	beq.n	800eff0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800efdc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800efde:	68fa      	ldr	r2, [r7, #12]
 800efe0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800efe4:	b292      	uxth	r2, r2
 800efe6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	22ff      	movs	r2, #255	; 0xff
 800efec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800eff0:	2300      	movs	r3, #0
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
	...

0800effc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2243      	movs	r2, #67	; 0x43
 800f008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f00a:	4b03      	ldr	r3, [pc, #12]	; (800f018 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr
 800f018:	20000094 	.word	0x20000094

0800f01c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2243      	movs	r2, #67	; 0x43
 800f028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f02a:	4b03      	ldr	r3, [pc, #12]	; (800f038 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr
 800f038:	20000050 	.word	0x20000050

0800f03c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2243      	movs	r2, #67	; 0x43
 800f048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f04a:	4b03      	ldr	r3, [pc, #12]	; (800f058 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	200000d8 	.word	0x200000d8

0800f05c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	220a      	movs	r2, #10
 800f068:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f06a:	4b03      	ldr	r3, [pc, #12]	; (800f078 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	370c      	adds	r7, #12
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr
 800f078:	2000000c 	.word	0x2000000c

0800f07c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d101      	bne.n	800f090 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f08c:	2303      	movs	r3, #3
 800f08e:	e004      	b.n	800f09a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	370c      	adds	r7, #12
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr

0800f0a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f0a6:	b480      	push	{r7}
 800f0a8:	b087      	sub	sp, #28
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	60f8      	str	r0, [r7, #12]
 800f0ae:	60b9      	str	r1, [r7, #8]
 800f0b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d101      	bne.n	800f0c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	e008      	b.n	800f0d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	68ba      	ldr	r2, [r7, #8]
 800f0c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	371c      	adds	r7, #28
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f0e2:	b480      	push	{r7}
 800f0e4:	b085      	sub	sp, #20
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d101      	bne.n	800f0fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f0fa:	2303      	movs	r3, #3
 800f0fc:	e004      	b.n	800f108 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	683a      	ldr	r2, [r7, #0]
 800f102:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3714      	adds	r7, #20
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d101      	bne.n	800f132 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f12e:	2303      	movs	r3, #3
 800f130:	e016      	b.n	800f160 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	7c1b      	ldrb	r3, [r3, #16]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d109      	bne.n	800f14e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f140:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f144:	2101      	movs	r1, #1
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f001 fdf4 	bl	8010d34 <USBD_LL_PrepareReceive>
 800f14c:	e007      	b.n	800f15e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f154:	2340      	movs	r3, #64	; 0x40
 800f156:	2101      	movs	r1, #1
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f001 fdeb 	bl	8010d34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f15e:	2300      	movs	r3, #0
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	4613      	mov	r3, r2
 800f174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d101      	bne.n	800f180 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f17c:	2303      	movs	r3, #3
 800f17e:	e01f      	b.n	800f1c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2200      	movs	r2, #0
 800f184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2200      	movs	r2, #0
 800f18c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2200      	movs	r2, #0
 800f194:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d003      	beq.n	800f1a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	68ba      	ldr	r2, [r7, #8]
 800f1a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	79fa      	ldrb	r2, [r7, #7]
 800f1b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f001 fc67 	bl	8010a88 <USBD_LL_Init>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3718      	adds	r7, #24
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f1dc:	2303      	movs	r3, #3
 800f1de:	e016      	b.n	800f20e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	683a      	ldr	r2, [r7, #0]
 800f1e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00b      	beq.n	800f20c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fc:	f107 020e 	add.w	r2, r7, #14
 800f200:	4610      	mov	r0, r2
 800f202:	4798      	blx	r3
 800f204:	4602      	mov	r2, r0
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b082      	sub	sp, #8
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f001 fc7e 	bl	8010b20 <USBD_LL_Start>
 800f224:	4603      	mov	r3, r0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f22e:	b480      	push	{r7}
 800f230:	b083      	sub	sp, #12
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f236:	2300      	movs	r3, #0
}
 800f238:	4618      	mov	r0, r3
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	460b      	mov	r3, r1
 800f24e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f250:	2303      	movs	r3, #3
 800f252:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d009      	beq.n	800f272 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	78fa      	ldrb	r2, [r7, #3]
 800f268:	4611      	mov	r1, r2
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	4798      	blx	r3
 800f26e:	4603      	mov	r3, r0
 800f270:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f272:	7bfb      	ldrb	r3, [r7, #15]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3710      	adds	r7, #16
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d007      	beq.n	800f2a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	78fa      	ldrb	r2, [r7, #3]
 800f29c:	4611      	mov	r1, r2
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	4798      	blx	r3
  }

  return USBD_OK;
 800f2a2:	2300      	movs	r3, #0
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f000 ff90 	bl	80101e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f2e0:	f003 031f 	and.w	r3, r3, #31
 800f2e4:	2b02      	cmp	r3, #2
 800f2e6:	d01a      	beq.n	800f31e <USBD_LL_SetupStage+0x72>
 800f2e8:	2b02      	cmp	r3, #2
 800f2ea:	d822      	bhi.n	800f332 <USBD_LL_SetupStage+0x86>
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d002      	beq.n	800f2f6 <USBD_LL_SetupStage+0x4a>
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d00a      	beq.n	800f30a <USBD_LL_SetupStage+0x5e>
 800f2f4:	e01d      	b.n	800f332 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 fa62 	bl	800f7c8 <USBD_StdDevReq>
 800f304:	4603      	mov	r3, r0
 800f306:	73fb      	strb	r3, [r7, #15]
      break;
 800f308:	e020      	b.n	800f34c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fac6 	bl	800f8a4 <USBD_StdItfReq>
 800f318:	4603      	mov	r3, r0
 800f31a:	73fb      	strb	r3, [r7, #15]
      break;
 800f31c:	e016      	b.n	800f34c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f324:	4619      	mov	r1, r3
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 fb05 	bl	800f936 <USBD_StdEPReq>
 800f32c:	4603      	mov	r3, r0
 800f32e:	73fb      	strb	r3, [r7, #15]
      break;
 800f330:	e00c      	b.n	800f34c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f338:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	4619      	mov	r1, r3
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f001 fc4d 	bl	8010be0 <USBD_LL_StallEP>
 800f346:	4603      	mov	r3, r0
 800f348:	73fb      	strb	r3, [r7, #15]
      break;
 800f34a:	bf00      	nop
  }

  return ret;
 800f34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b086      	sub	sp, #24
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	60f8      	str	r0, [r7, #12]
 800f35e:	460b      	mov	r3, r1
 800f360:	607a      	str	r2, [r7, #4]
 800f362:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f364:	7afb      	ldrb	r3, [r7, #11]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d138      	bne.n	800f3dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f370:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f378:	2b03      	cmp	r3, #3
 800f37a:	d14a      	bne.n	800f412 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	689a      	ldr	r2, [r3, #8]
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	429a      	cmp	r2, r3
 800f386:	d913      	bls.n	800f3b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	689a      	ldr	r2, [r3, #8]
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	1ad2      	subs	r2, r2, r3
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	68da      	ldr	r2, [r3, #12]
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	689b      	ldr	r3, [r3, #8]
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	bf28      	it	cs
 800f3a2:	4613      	movcs	r3, r2
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	6879      	ldr	r1, [r7, #4]
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	f001 f80f 	bl	80103cc <USBD_CtlContinueRx>
 800f3ae:	e030      	b.n	800f412 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	2b03      	cmp	r3, #3
 800f3ba:	d10b      	bne.n	800f3d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d005      	beq.n	800f3d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ce:	691b      	ldr	r3, [r3, #16]
 800f3d0:	68f8      	ldr	r0, [r7, #12]
 800f3d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f001 f80a 	bl	80103ee <USBD_CtlSendStatus>
 800f3da:	e01a      	b.n	800f412 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d114      	bne.n	800f412 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ee:	699b      	ldr	r3, [r3, #24]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00e      	beq.n	800f412 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3fa:	699b      	ldr	r3, [r3, #24]
 800f3fc:	7afa      	ldrb	r2, [r7, #11]
 800f3fe:	4611      	mov	r1, r2
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	4798      	blx	r3
 800f404:	4603      	mov	r3, r0
 800f406:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f408:	7dfb      	ldrb	r3, [r7, #23]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d001      	beq.n	800f412 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f40e:	7dfb      	ldrb	r3, [r7, #23]
 800f410:	e000      	b.n	800f414 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f412:	2300      	movs	r3, #0
}
 800f414:	4618      	mov	r0, r3
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b086      	sub	sp, #24
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	460b      	mov	r3, r1
 800f426:	607a      	str	r2, [r7, #4]
 800f428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f42a:	7afb      	ldrb	r3, [r7, #11]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d16b      	bne.n	800f508 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	3314      	adds	r3, #20
 800f434:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f43c:	2b02      	cmp	r3, #2
 800f43e:	d156      	bne.n	800f4ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	689a      	ldr	r2, [r3, #8]
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d914      	bls.n	800f476 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	689a      	ldr	r2, [r3, #8]
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	1ad2      	subs	r2, r2, r3
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	461a      	mov	r2, r3
 800f460:	6879      	ldr	r1, [r7, #4]
 800f462:	68f8      	ldr	r0, [r7, #12]
 800f464:	f000 ff84 	bl	8010370 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f468:	2300      	movs	r3, #0
 800f46a:	2200      	movs	r2, #0
 800f46c:	2100      	movs	r1, #0
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f001 fc60 	bl	8010d34 <USBD_LL_PrepareReceive>
 800f474:	e03b      	b.n	800f4ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	68da      	ldr	r2, [r3, #12]
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d11c      	bne.n	800f4bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	685a      	ldr	r2, [r3, #4]
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d316      	bcc.n	800f4bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	685a      	ldr	r2, [r3, #4]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f498:	429a      	cmp	r2, r3
 800f49a:	d20f      	bcs.n	800f4bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f49c:	2200      	movs	r2, #0
 800f49e:	2100      	movs	r1, #0
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f000 ff65 	bl	8010370 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	68f8      	ldr	r0, [r7, #12]
 800f4b6:	f001 fc3d 	bl	8010d34 <USBD_LL_PrepareReceive>
 800f4ba:	e018      	b.n	800f4ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	2b03      	cmp	r3, #3
 800f4c6:	d10b      	bne.n	800f4e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d005      	beq.n	800f4e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	68f8      	ldr	r0, [r7, #12]
 800f4de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4e0:	2180      	movs	r1, #128	; 0x80
 800f4e2:	68f8      	ldr	r0, [r7, #12]
 800f4e4:	f001 fb7c 	bl	8010be0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f000 ff93 	bl	8010414 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d122      	bne.n	800f53e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f7ff fe98 	bl	800f22e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2200      	movs	r2, #0
 800f502:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f506:	e01a      	b.n	800f53e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	2b03      	cmp	r3, #3
 800f512:	d114      	bne.n	800f53e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f51a:	695b      	ldr	r3, [r3, #20]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00e      	beq.n	800f53e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f526:	695b      	ldr	r3, [r3, #20]
 800f528:	7afa      	ldrb	r2, [r7, #11]
 800f52a:	4611      	mov	r1, r2
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	4798      	blx	r3
 800f530:	4603      	mov	r3, r0
 800f532:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f534:	7dfb      	ldrb	r3, [r7, #23]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f53a:	7dfb      	ldrb	r3, [r7, #23]
 800f53c:	e000      	b.n	800f540 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f53e:	2300      	movs	r3, #0
}
 800f540:	4618      	mov	r0, r3
 800f542:	3718      	adds	r7, #24
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2201      	movs	r2, #1
 800f554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f574:	2b00      	cmp	r3, #0
 800f576:	d101      	bne.n	800f57c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f578:	2303      	movs	r3, #3
 800f57a:	e02f      	b.n	800f5dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00f      	beq.n	800f5a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d009      	beq.n	800f5a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	6852      	ldr	r2, [r2, #4]
 800f59e:	b2d2      	uxtb	r2, r2
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f5a6:	2340      	movs	r3, #64	; 0x40
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f001 fad2 	bl	8010b56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2240      	movs	r2, #64	; 0x40
 800f5be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f5c2:	2340      	movs	r3, #64	; 0x40
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	2180      	movs	r1, #128	; 0x80
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f001 fac4 	bl	8010b56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2240      	movs	r2, #64	; 0x40
 800f5d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	78fa      	ldrb	r2, [r7, #3]
 800f5f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr

0800f604 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f612:	b2da      	uxtb	r2, r3
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2204      	movs	r2, #4
 800f61e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	2b04      	cmp	r3, #4
 800f642:	d106      	bne.n	800f652 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f64a:	b2da      	uxtb	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f652:	2300      	movs	r3, #0
}
 800f654:	4618      	mov	r0, r3
 800f656:	370c      	adds	r7, #12
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d101      	bne.n	800f676 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f672:	2303      	movs	r3, #3
 800f674:	e012      	b.n	800f69c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	2b03      	cmp	r3, #3
 800f680:	d10b      	bne.n	800f69a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f688:	69db      	ldr	r3, [r3, #28]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d005      	beq.n	800f69a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f694:	69db      	ldr	r3, [r3, #28]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d101      	bne.n	800f6be <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f6ba:	2303      	movs	r3, #3
 800f6bc:	e014      	b.n	800f6e8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b03      	cmp	r3, #3
 800f6c8:	d10d      	bne.n	800f6e6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d007      	beq.n	800f6e6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6dc:	6a1b      	ldr	r3, [r3, #32]
 800f6de:	78fa      	ldrb	r2, [r7, #3]
 800f6e0:	4611      	mov	r1, r2
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f6e6:	2300      	movs	r3, #0
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f706:	2303      	movs	r3, #3
 800f708:	e014      	b.n	800f734 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f710:	b2db      	uxtb	r3, r3
 800f712:	2b03      	cmp	r3, #3
 800f714:	d10d      	bne.n	800f732 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d007      	beq.n	800f732 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f72a:	78fa      	ldrb	r2, [r7, #3]
 800f72c:	4611      	mov	r1, r2
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f732:	2300      	movs	r3, #0
}
 800f734:	4618      	mov	r0, r3
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b083      	sub	sp, #12
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f744:	2300      	movs	r3, #0
}
 800f746:	4618      	mov	r0, r3
 800f748:	370c      	adds	r7, #12
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr

0800f752 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b082      	sub	sp, #8
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2201      	movs	r2, #1
 800f75e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d009      	beq.n	800f780 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	6852      	ldr	r2, [r2, #4]
 800f778:	b2d2      	uxtb	r2, r2
 800f77a:	4611      	mov	r1, r2
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	4798      	blx	r3
  }

  return USBD_OK;
 800f780:	2300      	movs	r3, #0
}
 800f782:	4618      	mov	r0, r3
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f78a:	b480      	push	{r7}
 800f78c:	b087      	sub	sp, #28
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	3301      	adds	r3, #1
 800f7a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f7a8:	8a3b      	ldrh	r3, [r7, #16]
 800f7aa:	021b      	lsls	r3, r3, #8
 800f7ac:	b21a      	sxth	r2, r3
 800f7ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	b21b      	sxth	r3, r3
 800f7b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f7b8:	89fb      	ldrh	r3, [r7, #14]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	371c      	adds	r7, #28
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr
	...

0800f7c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7de:	2b40      	cmp	r3, #64	; 0x40
 800f7e0:	d005      	beq.n	800f7ee <USBD_StdDevReq+0x26>
 800f7e2:	2b40      	cmp	r3, #64	; 0x40
 800f7e4:	d853      	bhi.n	800f88e <USBD_StdDevReq+0xc6>
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00b      	beq.n	800f802 <USBD_StdDevReq+0x3a>
 800f7ea:	2b20      	cmp	r3, #32
 800f7ec:	d14f      	bne.n	800f88e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	6839      	ldr	r1, [r7, #0]
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	4798      	blx	r3
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f800:	e04a      	b.n	800f898 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	785b      	ldrb	r3, [r3, #1]
 800f806:	2b09      	cmp	r3, #9
 800f808:	d83b      	bhi.n	800f882 <USBD_StdDevReq+0xba>
 800f80a:	a201      	add	r2, pc, #4	; (adr r2, 800f810 <USBD_StdDevReq+0x48>)
 800f80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f810:	0800f865 	.word	0x0800f865
 800f814:	0800f879 	.word	0x0800f879
 800f818:	0800f883 	.word	0x0800f883
 800f81c:	0800f86f 	.word	0x0800f86f
 800f820:	0800f883 	.word	0x0800f883
 800f824:	0800f843 	.word	0x0800f843
 800f828:	0800f839 	.word	0x0800f839
 800f82c:	0800f883 	.word	0x0800f883
 800f830:	0800f85b 	.word	0x0800f85b
 800f834:	0800f84d 	.word	0x0800f84d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f838:	6839      	ldr	r1, [r7, #0]
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f9de 	bl	800fbfc <USBD_GetDescriptor>
          break;
 800f840:	e024      	b.n	800f88c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f842:	6839      	ldr	r1, [r7, #0]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 fb43 	bl	800fed0 <USBD_SetAddress>
          break;
 800f84a:	e01f      	b.n	800f88c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 fb82 	bl	800ff58 <USBD_SetConfig>
 800f854:	4603      	mov	r3, r0
 800f856:	73fb      	strb	r3, [r7, #15]
          break;
 800f858:	e018      	b.n	800f88c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f85a:	6839      	ldr	r1, [r7, #0]
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f000 fc21 	bl	80100a4 <USBD_GetConfig>
          break;
 800f862:	e013      	b.n	800f88c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f864:	6839      	ldr	r1, [r7, #0]
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 fc52 	bl	8010110 <USBD_GetStatus>
          break;
 800f86c:	e00e      	b.n	800f88c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f86e:	6839      	ldr	r1, [r7, #0]
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fc81 	bl	8010178 <USBD_SetFeature>
          break;
 800f876:	e009      	b.n	800f88c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f878:	6839      	ldr	r1, [r7, #0]
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 fc90 	bl	80101a0 <USBD_ClrFeature>
          break;
 800f880:	e004      	b.n	800f88c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f882:	6839      	ldr	r1, [r7, #0]
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 fce7 	bl	8010258 <USBD_CtlError>
          break;
 800f88a:	bf00      	nop
      }
      break;
 800f88c:	e004      	b.n	800f898 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 fce1 	bl	8010258 <USBD_CtlError>
      break;
 800f896:	bf00      	nop
  }

  return ret;
 800f898:	7bfb      	ldrb	r3, [r7, #15]
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3710      	adds	r7, #16
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop

0800f8a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f8ba:	2b40      	cmp	r3, #64	; 0x40
 800f8bc:	d005      	beq.n	800f8ca <USBD_StdItfReq+0x26>
 800f8be:	2b40      	cmp	r3, #64	; 0x40
 800f8c0:	d82f      	bhi.n	800f922 <USBD_StdItfReq+0x7e>
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <USBD_StdItfReq+0x26>
 800f8c6:	2b20      	cmp	r3, #32
 800f8c8:	d12b      	bne.n	800f922 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d81d      	bhi.n	800f914 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	889b      	ldrh	r3, [r3, #4]
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d813      	bhi.n	800f90a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	6839      	ldr	r1, [r7, #0]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	4798      	blx	r3
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	88db      	ldrh	r3, [r3, #6]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d110      	bne.n	800f91e <USBD_StdItfReq+0x7a>
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d10d      	bne.n	800f91e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 fd73 	bl	80103ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f908:	e009      	b.n	800f91e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f90a:	6839      	ldr	r1, [r7, #0]
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 fca3 	bl	8010258 <USBD_CtlError>
          break;
 800f912:	e004      	b.n	800f91e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f914:	6839      	ldr	r1, [r7, #0]
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 fc9e 	bl	8010258 <USBD_CtlError>
          break;
 800f91c:	e000      	b.n	800f920 <USBD_StdItfReq+0x7c>
          break;
 800f91e:	bf00      	nop
      }
      break;
 800f920:	e004      	b.n	800f92c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f922:	6839      	ldr	r1, [r7, #0]
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fc97 	bl	8010258 <USBD_CtlError>
      break;
 800f92a:	bf00      	nop
  }

  return ret;
 800f92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f936:	b580      	push	{r7, lr}
 800f938:	b084      	sub	sp, #16
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
 800f93e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f940:	2300      	movs	r3, #0
 800f942:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	889b      	ldrh	r3, [r3, #4]
 800f948:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f952:	2b40      	cmp	r3, #64	; 0x40
 800f954:	d007      	beq.n	800f966 <USBD_StdEPReq+0x30>
 800f956:	2b40      	cmp	r3, #64	; 0x40
 800f958:	f200 8145 	bhi.w	800fbe6 <USBD_StdEPReq+0x2b0>
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d00c      	beq.n	800f97a <USBD_StdEPReq+0x44>
 800f960:	2b20      	cmp	r3, #32
 800f962:	f040 8140 	bne.w	800fbe6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	6839      	ldr	r1, [r7, #0]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	4798      	blx	r3
 800f974:	4603      	mov	r3, r0
 800f976:	73fb      	strb	r3, [r7, #15]
      break;
 800f978:	e13a      	b.n	800fbf0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	785b      	ldrb	r3, [r3, #1]
 800f97e:	2b03      	cmp	r3, #3
 800f980:	d007      	beq.n	800f992 <USBD_StdEPReq+0x5c>
 800f982:	2b03      	cmp	r3, #3
 800f984:	f300 8129 	bgt.w	800fbda <USBD_StdEPReq+0x2a4>
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d07f      	beq.n	800fa8c <USBD_StdEPReq+0x156>
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d03c      	beq.n	800fa0a <USBD_StdEPReq+0xd4>
 800f990:	e123      	b.n	800fbda <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	2b02      	cmp	r3, #2
 800f99c:	d002      	beq.n	800f9a4 <USBD_StdEPReq+0x6e>
 800f99e:	2b03      	cmp	r3, #3
 800f9a0:	d016      	beq.n	800f9d0 <USBD_StdEPReq+0x9a>
 800f9a2:	e02c      	b.n	800f9fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f9a4:	7bbb      	ldrb	r3, [r7, #14]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00d      	beq.n	800f9c6 <USBD_StdEPReq+0x90>
 800f9aa:	7bbb      	ldrb	r3, [r7, #14]
 800f9ac:	2b80      	cmp	r3, #128	; 0x80
 800f9ae:	d00a      	beq.n	800f9c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f9b0:	7bbb      	ldrb	r3, [r7, #14]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f001 f913 	bl	8010be0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9ba:	2180      	movs	r1, #128	; 0x80
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f001 f90f 	bl	8010be0 <USBD_LL_StallEP>
 800f9c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f9c4:	e020      	b.n	800fa08 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f9c6:	6839      	ldr	r1, [r7, #0]
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f000 fc45 	bl	8010258 <USBD_CtlError>
              break;
 800f9ce:	e01b      	b.n	800fa08 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	885b      	ldrh	r3, [r3, #2]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d10e      	bne.n	800f9f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f9d8:	7bbb      	ldrb	r3, [r7, #14]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00b      	beq.n	800f9f6 <USBD_StdEPReq+0xc0>
 800f9de:	7bbb      	ldrb	r3, [r7, #14]
 800f9e0:	2b80      	cmp	r3, #128	; 0x80
 800f9e2:	d008      	beq.n	800f9f6 <USBD_StdEPReq+0xc0>
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	88db      	ldrh	r3, [r3, #6]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d104      	bne.n	800f9f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f9ec:	7bbb      	ldrb	r3, [r7, #14]
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f001 f8f5 	bl	8010be0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 fcf9 	bl	80103ee <USBD_CtlSendStatus>

              break;
 800f9fc:	e004      	b.n	800fa08 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f9fe:	6839      	ldr	r1, [r7, #0]
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 fc29 	bl	8010258 <USBD_CtlError>
              break;
 800fa06:	bf00      	nop
          }
          break;
 800fa08:	e0ec      	b.n	800fbe4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa10:	b2db      	uxtb	r3, r3
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	d002      	beq.n	800fa1c <USBD_StdEPReq+0xe6>
 800fa16:	2b03      	cmp	r3, #3
 800fa18:	d016      	beq.n	800fa48 <USBD_StdEPReq+0x112>
 800fa1a:	e030      	b.n	800fa7e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa1c:	7bbb      	ldrb	r3, [r7, #14]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00d      	beq.n	800fa3e <USBD_StdEPReq+0x108>
 800fa22:	7bbb      	ldrb	r3, [r7, #14]
 800fa24:	2b80      	cmp	r3, #128	; 0x80
 800fa26:	d00a      	beq.n	800fa3e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa28:	7bbb      	ldrb	r3, [r7, #14]
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f001 f8d7 	bl	8010be0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa32:	2180      	movs	r1, #128	; 0x80
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f001 f8d3 	bl	8010be0 <USBD_LL_StallEP>
 800fa3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fa3c:	e025      	b.n	800fa8a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fa3e:	6839      	ldr	r1, [r7, #0]
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 fc09 	bl	8010258 <USBD_CtlError>
              break;
 800fa46:	e020      	b.n	800fa8a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	885b      	ldrh	r3, [r3, #2]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d11b      	bne.n	800fa88 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fa50:	7bbb      	ldrb	r3, [r7, #14]
 800fa52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d004      	beq.n	800fa64 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fa5a:	7bbb      	ldrb	r3, [r7, #14]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f001 f8dd 	bl	8010c1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 fcc2 	bl	80103ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa70:	689b      	ldr	r3, [r3, #8]
 800fa72:	6839      	ldr	r1, [r7, #0]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	4798      	blx	r3
 800fa78:	4603      	mov	r3, r0
 800fa7a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fa7c:	e004      	b.n	800fa88 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fa7e:	6839      	ldr	r1, [r7, #0]
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f000 fbe9 	bl	8010258 <USBD_CtlError>
              break;
 800fa86:	e000      	b.n	800fa8a <USBD_StdEPReq+0x154>
              break;
 800fa88:	bf00      	nop
          }
          break;
 800fa8a:	e0ab      	b.n	800fbe4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d002      	beq.n	800fa9e <USBD_StdEPReq+0x168>
 800fa98:	2b03      	cmp	r3, #3
 800fa9a:	d032      	beq.n	800fb02 <USBD_StdEPReq+0x1cc>
 800fa9c:	e097      	b.n	800fbce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa9e:	7bbb      	ldrb	r3, [r7, #14]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d007      	beq.n	800fab4 <USBD_StdEPReq+0x17e>
 800faa4:	7bbb      	ldrb	r3, [r7, #14]
 800faa6:	2b80      	cmp	r3, #128	; 0x80
 800faa8:	d004      	beq.n	800fab4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 fbd3 	bl	8010258 <USBD_CtlError>
                break;
 800fab2:	e091      	b.n	800fbd8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	da0b      	bge.n	800fad4 <USBD_StdEPReq+0x19e>
 800fabc:	7bbb      	ldrb	r3, [r7, #14]
 800fabe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fac2:	4613      	mov	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4413      	add	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	3310      	adds	r3, #16
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	4413      	add	r3, r2
 800fad0:	3304      	adds	r3, #4
 800fad2:	e00b      	b.n	800faec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fad4:	7bbb      	ldrb	r3, [r7, #14]
 800fad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fada:	4613      	mov	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	4413      	add	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	4413      	add	r3, r2
 800faea:	3304      	adds	r3, #4
 800faec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	2200      	movs	r2, #0
 800faf2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	2202      	movs	r2, #2
 800faf8:	4619      	mov	r1, r3
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f000 fc1d 	bl	801033a <USBD_CtlSendData>
              break;
 800fb00:	e06a      	b.n	800fbd8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fb02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	da11      	bge.n	800fb2e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fb0a:	7bbb      	ldrb	r3, [r7, #14]
 800fb0c:	f003 020f 	and.w	r2, r3, #15
 800fb10:	6879      	ldr	r1, [r7, #4]
 800fb12:	4613      	mov	r3, r2
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	4413      	add	r3, r2
 800fb18:	009b      	lsls	r3, r3, #2
 800fb1a:	440b      	add	r3, r1
 800fb1c:	3324      	adds	r3, #36	; 0x24
 800fb1e:	881b      	ldrh	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d117      	bne.n	800fb54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fb24:	6839      	ldr	r1, [r7, #0]
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fb96 	bl	8010258 <USBD_CtlError>
                  break;
 800fb2c:	e054      	b.n	800fbd8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fb2e:	7bbb      	ldrb	r3, [r7, #14]
 800fb30:	f003 020f 	and.w	r2, r3, #15
 800fb34:	6879      	ldr	r1, [r7, #4]
 800fb36:	4613      	mov	r3, r2
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	4413      	add	r3, r2
 800fb3c:	009b      	lsls	r3, r3, #2
 800fb3e:	440b      	add	r3, r1
 800fb40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d104      	bne.n	800fb54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fb4a:	6839      	ldr	r1, [r7, #0]
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f000 fb83 	bl	8010258 <USBD_CtlError>
                  break;
 800fb52:	e041      	b.n	800fbd8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	da0b      	bge.n	800fb74 <USBD_StdEPReq+0x23e>
 800fb5c:	7bbb      	ldrb	r3, [r7, #14]
 800fb5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb62:	4613      	mov	r3, r2
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	4413      	add	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	3310      	adds	r3, #16
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	4413      	add	r3, r2
 800fb70:	3304      	adds	r3, #4
 800fb72:	e00b      	b.n	800fb8c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fb74:	7bbb      	ldrb	r3, [r7, #14]
 800fb76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	4413      	add	r3, r2
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	4413      	add	r3, r2
 800fb8a:	3304      	adds	r3, #4
 800fb8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fb8e:	7bbb      	ldrb	r3, [r7, #14]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d002      	beq.n	800fb9a <USBD_StdEPReq+0x264>
 800fb94:	7bbb      	ldrb	r3, [r7, #14]
 800fb96:	2b80      	cmp	r3, #128	; 0x80
 800fb98:	d103      	bne.n	800fba2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	601a      	str	r2, [r3, #0]
 800fba0:	e00e      	b.n	800fbc0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fba2:	7bbb      	ldrb	r3, [r7, #14]
 800fba4:	4619      	mov	r1, r3
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f001 f858 	bl	8010c5c <USBD_LL_IsStallEP>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d003      	beq.n	800fbba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	601a      	str	r2, [r3, #0]
 800fbb8:	e002      	b.n	800fbc0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	2202      	movs	r2, #2
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 fbb7 	bl	801033a <USBD_CtlSendData>
              break;
 800fbcc:	e004      	b.n	800fbd8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fbce:	6839      	ldr	r1, [r7, #0]
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 fb41 	bl	8010258 <USBD_CtlError>
              break;
 800fbd6:	bf00      	nop
          }
          break;
 800fbd8:	e004      	b.n	800fbe4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fbda:	6839      	ldr	r1, [r7, #0]
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 fb3b 	bl	8010258 <USBD_CtlError>
          break;
 800fbe2:	bf00      	nop
      }
      break;
 800fbe4:	e004      	b.n	800fbf0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fbe6:	6839      	ldr	r1, [r7, #0]
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 fb35 	bl	8010258 <USBD_CtlError>
      break;
 800fbee:	bf00      	nop
  }

  return ret;
 800fbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3710      	adds	r7, #16
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
	...

0800fbfc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fc06:	2300      	movs	r3, #0
 800fc08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	885b      	ldrh	r3, [r3, #2]
 800fc16:	0a1b      	lsrs	r3, r3, #8
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	2b06      	cmp	r3, #6
 800fc1e:	f200 8128 	bhi.w	800fe72 <USBD_GetDescriptor+0x276>
 800fc22:	a201      	add	r2, pc, #4	; (adr r2, 800fc28 <USBD_GetDescriptor+0x2c>)
 800fc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc28:	0800fc45 	.word	0x0800fc45
 800fc2c:	0800fc5d 	.word	0x0800fc5d
 800fc30:	0800fc9d 	.word	0x0800fc9d
 800fc34:	0800fe73 	.word	0x0800fe73
 800fc38:	0800fe73 	.word	0x0800fe73
 800fc3c:	0800fe13 	.word	0x0800fe13
 800fc40:	0800fe3f 	.word	0x0800fe3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	7c12      	ldrb	r2, [r2, #16]
 800fc50:	f107 0108 	add.w	r1, r7, #8
 800fc54:	4610      	mov	r0, r2
 800fc56:	4798      	blx	r3
 800fc58:	60f8      	str	r0, [r7, #12]
      break;
 800fc5a:	e112      	b.n	800fe82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	7c1b      	ldrb	r3, [r3, #16]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d10d      	bne.n	800fc80 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc6c:	f107 0208 	add.w	r2, r7, #8
 800fc70:	4610      	mov	r0, r2
 800fc72:	4798      	blx	r3
 800fc74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	2202      	movs	r2, #2
 800fc7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fc7e:	e100      	b.n	800fe82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc88:	f107 0208 	add.w	r2, r7, #8
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	4798      	blx	r3
 800fc90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	3301      	adds	r3, #1
 800fc96:	2202      	movs	r2, #2
 800fc98:	701a      	strb	r2, [r3, #0]
      break;
 800fc9a:	e0f2      	b.n	800fe82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	885b      	ldrh	r3, [r3, #2]
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	2b05      	cmp	r3, #5
 800fca4:	f200 80ac 	bhi.w	800fe00 <USBD_GetDescriptor+0x204>
 800fca8:	a201      	add	r2, pc, #4	; (adr r2, 800fcb0 <USBD_GetDescriptor+0xb4>)
 800fcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcae:	bf00      	nop
 800fcb0:	0800fcc9 	.word	0x0800fcc9
 800fcb4:	0800fcfd 	.word	0x0800fcfd
 800fcb8:	0800fd31 	.word	0x0800fd31
 800fcbc:	0800fd65 	.word	0x0800fd65
 800fcc0:	0800fd99 	.word	0x0800fd99
 800fcc4:	0800fdcd 	.word	0x0800fdcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d00b      	beq.n	800fcec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	7c12      	ldrb	r2, [r2, #16]
 800fce0:	f107 0108 	add.w	r1, r7, #8
 800fce4:	4610      	mov	r0, r2
 800fce6:	4798      	blx	r3
 800fce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcea:	e091      	b.n	800fe10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fcec:	6839      	ldr	r1, [r7, #0]
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fab2 	bl	8010258 <USBD_CtlError>
            err++;
 800fcf4:	7afb      	ldrb	r3, [r7, #11]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	72fb      	strb	r3, [r7, #11]
          break;
 800fcfa:	e089      	b.n	800fe10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d00b      	beq.n	800fd20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	7c12      	ldrb	r2, [r2, #16]
 800fd14:	f107 0108 	add.w	r1, r7, #8
 800fd18:	4610      	mov	r0, r2
 800fd1a:	4798      	blx	r3
 800fd1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd1e:	e077      	b.n	800fe10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 fa98 	bl	8010258 <USBD_CtlError>
            err++;
 800fd28:	7afb      	ldrb	r3, [r7, #11]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	72fb      	strb	r3, [r7, #11]
          break;
 800fd2e:	e06f      	b.n	800fe10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00b      	beq.n	800fd54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	7c12      	ldrb	r2, [r2, #16]
 800fd48:	f107 0108 	add.w	r1, r7, #8
 800fd4c:	4610      	mov	r0, r2
 800fd4e:	4798      	blx	r3
 800fd50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd52:	e05d      	b.n	800fe10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd54:	6839      	ldr	r1, [r7, #0]
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 fa7e 	bl	8010258 <USBD_CtlError>
            err++;
 800fd5c:	7afb      	ldrb	r3, [r7, #11]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	72fb      	strb	r3, [r7, #11]
          break;
 800fd62:	e055      	b.n	800fe10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd6a:	691b      	ldr	r3, [r3, #16]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d00b      	beq.n	800fd88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd76:	691b      	ldr	r3, [r3, #16]
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	7c12      	ldrb	r2, [r2, #16]
 800fd7c:	f107 0108 	add.w	r1, r7, #8
 800fd80:	4610      	mov	r0, r2
 800fd82:	4798      	blx	r3
 800fd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd86:	e043      	b.n	800fe10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd88:	6839      	ldr	r1, [r7, #0]
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 fa64 	bl	8010258 <USBD_CtlError>
            err++;
 800fd90:	7afb      	ldrb	r3, [r7, #11]
 800fd92:	3301      	adds	r3, #1
 800fd94:	72fb      	strb	r3, [r7, #11]
          break;
 800fd96:	e03b      	b.n	800fe10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd9e:	695b      	ldr	r3, [r3, #20]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d00b      	beq.n	800fdbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdaa:	695b      	ldr	r3, [r3, #20]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	7c12      	ldrb	r2, [r2, #16]
 800fdb0:	f107 0108 	add.w	r1, r7, #8
 800fdb4:	4610      	mov	r0, r2
 800fdb6:	4798      	blx	r3
 800fdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fdba:	e029      	b.n	800fe10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fdbc:	6839      	ldr	r1, [r7, #0]
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 fa4a 	bl	8010258 <USBD_CtlError>
            err++;
 800fdc4:	7afb      	ldrb	r3, [r7, #11]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800fdca:	e021      	b.n	800fe10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdd2:	699b      	ldr	r3, [r3, #24]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d00b      	beq.n	800fdf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdde:	699b      	ldr	r3, [r3, #24]
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	7c12      	ldrb	r2, [r2, #16]
 800fde4:	f107 0108 	add.w	r1, r7, #8
 800fde8:	4610      	mov	r0, r2
 800fdea:	4798      	blx	r3
 800fdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fdee:	e00f      	b.n	800fe10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fdf0:	6839      	ldr	r1, [r7, #0]
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 fa30 	bl	8010258 <USBD_CtlError>
            err++;
 800fdf8:	7afb      	ldrb	r3, [r7, #11]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800fdfe:	e007      	b.n	800fe10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fe00:	6839      	ldr	r1, [r7, #0]
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 fa28 	bl	8010258 <USBD_CtlError>
          err++;
 800fe08:	7afb      	ldrb	r3, [r7, #11]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fe0e:	bf00      	nop
      }
      break;
 800fe10:	e037      	b.n	800fe82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	7c1b      	ldrb	r3, [r3, #16]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d109      	bne.n	800fe2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe22:	f107 0208 	add.w	r2, r7, #8
 800fe26:	4610      	mov	r0, r2
 800fe28:	4798      	blx	r3
 800fe2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe2c:	e029      	b.n	800fe82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fe2e:	6839      	ldr	r1, [r7, #0]
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 fa11 	bl	8010258 <USBD_CtlError>
        err++;
 800fe36:	7afb      	ldrb	r3, [r7, #11]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	72fb      	strb	r3, [r7, #11]
      break;
 800fe3c:	e021      	b.n	800fe82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	7c1b      	ldrb	r3, [r3, #16]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d10d      	bne.n	800fe62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe4e:	f107 0208 	add.w	r2, r7, #8
 800fe52:	4610      	mov	r0, r2
 800fe54:	4798      	blx	r3
 800fe56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	2207      	movs	r2, #7
 800fe5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe60:	e00f      	b.n	800fe82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fe62:	6839      	ldr	r1, [r7, #0]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 f9f7 	bl	8010258 <USBD_CtlError>
        err++;
 800fe6a:	7afb      	ldrb	r3, [r7, #11]
 800fe6c:	3301      	adds	r3, #1
 800fe6e:	72fb      	strb	r3, [r7, #11]
      break;
 800fe70:	e007      	b.n	800fe82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 f9ef 	bl	8010258 <USBD_CtlError>
      err++;
 800fe7a:	7afb      	ldrb	r3, [r7, #11]
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	72fb      	strb	r3, [r7, #11]
      break;
 800fe80:	bf00      	nop
  }

  if (err != 0U)
 800fe82:	7afb      	ldrb	r3, [r7, #11]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d11e      	bne.n	800fec6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	88db      	ldrh	r3, [r3, #6]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d016      	beq.n	800febe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fe90:	893b      	ldrh	r3, [r7, #8]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00e      	beq.n	800feb4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	88da      	ldrh	r2, [r3, #6]
 800fe9a:	893b      	ldrh	r3, [r7, #8]
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	bf28      	it	cs
 800fea0:	4613      	movcs	r3, r2
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fea6:	893b      	ldrh	r3, [r7, #8]
 800fea8:	461a      	mov	r2, r3
 800feaa:	68f9      	ldr	r1, [r7, #12]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 fa44 	bl	801033a <USBD_CtlSendData>
 800feb2:	e009      	b.n	800fec8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 f9ce 	bl	8010258 <USBD_CtlError>
 800febc:	e004      	b.n	800fec8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f000 fa95 	bl	80103ee <USBD_CtlSendStatus>
 800fec4:	e000      	b.n	800fec8 <USBD_GetDescriptor+0x2cc>
    return;
 800fec6:	bf00      	nop
  }
}
 800fec8:	3710      	adds	r7, #16
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop

0800fed0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	889b      	ldrh	r3, [r3, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d131      	bne.n	800ff46 <USBD_SetAddress+0x76>
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	88db      	ldrh	r3, [r3, #6]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d12d      	bne.n	800ff46 <USBD_SetAddress+0x76>
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	885b      	ldrh	r3, [r3, #2]
 800feee:	2b7f      	cmp	r3, #127	; 0x7f
 800fef0:	d829      	bhi.n	800ff46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	885b      	ldrh	r3, [r3, #2]
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fefc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	2b03      	cmp	r3, #3
 800ff08:	d104      	bne.n	800ff14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ff0a:	6839      	ldr	r1, [r7, #0]
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 f9a3 	bl	8010258 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff12:	e01d      	b.n	800ff50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	7bfa      	ldrb	r2, [r7, #15]
 800ff18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ff1c:	7bfb      	ldrb	r3, [r7, #15]
 800ff1e:	4619      	mov	r1, r3
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 fec7 	bl	8010cb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 fa61 	bl	80103ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d004      	beq.n	800ff3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2202      	movs	r2, #2
 800ff36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff3a:	e009      	b.n	800ff50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2201      	movs	r2, #1
 800ff40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff44:	e004      	b.n	800ff50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ff46:	6839      	ldr	r1, [r7, #0]
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f985 	bl	8010258 <USBD_CtlError>
  }
}
 800ff4e:	bf00      	nop
 800ff50:	bf00      	nop
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff62:	2300      	movs	r3, #0
 800ff64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	885b      	ldrh	r3, [r3, #2]
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	4b4c      	ldr	r3, [pc, #304]	; (80100a0 <USBD_SetConfig+0x148>)
 800ff6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ff70:	4b4b      	ldr	r3, [pc, #300]	; (80100a0 <USBD_SetConfig+0x148>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d905      	bls.n	800ff84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ff78:	6839      	ldr	r1, [r7, #0]
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f96c 	bl	8010258 <USBD_CtlError>
    return USBD_FAIL;
 800ff80:	2303      	movs	r3, #3
 800ff82:	e088      	b.n	8010096 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d002      	beq.n	800ff96 <USBD_SetConfig+0x3e>
 800ff90:	2b03      	cmp	r3, #3
 800ff92:	d025      	beq.n	800ffe0 <USBD_SetConfig+0x88>
 800ff94:	e071      	b.n	801007a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ff96:	4b42      	ldr	r3, [pc, #264]	; (80100a0 <USBD_SetConfig+0x148>)
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d01c      	beq.n	800ffd8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ff9e:	4b40      	ldr	r3, [pc, #256]	; (80100a0 <USBD_SetConfig+0x148>)
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ffa8:	4b3d      	ldr	r3, [pc, #244]	; (80100a0 <USBD_SetConfig+0x148>)
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	4619      	mov	r1, r3
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f7ff f948 	bl	800f244 <USBD_SetClassConfig>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ffb8:	7bfb      	ldrb	r3, [r7, #15]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d004      	beq.n	800ffc8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ffbe:	6839      	ldr	r1, [r7, #0]
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f000 f949 	bl	8010258 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ffc6:	e065      	b.n	8010094 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 fa10 	bl	80103ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2203      	movs	r2, #3
 800ffd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ffd6:	e05d      	b.n	8010094 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fa08 	bl	80103ee <USBD_CtlSendStatus>
      break;
 800ffde:	e059      	b.n	8010094 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ffe0:	4b2f      	ldr	r3, [pc, #188]	; (80100a0 <USBD_SetConfig+0x148>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d112      	bne.n	801000e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2202      	movs	r2, #2
 800ffec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fff0:	4b2b      	ldr	r3, [pc, #172]	; (80100a0 <USBD_SetConfig+0x148>)
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	461a      	mov	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fffa:	4b29      	ldr	r3, [pc, #164]	; (80100a0 <USBD_SetConfig+0x148>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	4619      	mov	r1, r3
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff f93b 	bl	800f27c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 f9f1 	bl	80103ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801000c:	e042      	b.n	8010094 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801000e:	4b24      	ldr	r3, [pc, #144]	; (80100a0 <USBD_SetConfig+0x148>)
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	461a      	mov	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	429a      	cmp	r2, r3
 801001a:	d02a      	beq.n	8010072 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	b2db      	uxtb	r3, r3
 8010022:	4619      	mov	r1, r3
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7ff f929 	bl	800f27c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801002a:	4b1d      	ldr	r3, [pc, #116]	; (80100a0 <USBD_SetConfig+0x148>)
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	461a      	mov	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010034:	4b1a      	ldr	r3, [pc, #104]	; (80100a0 <USBD_SetConfig+0x148>)
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	4619      	mov	r1, r3
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f7ff f902 	bl	800f244 <USBD_SetClassConfig>
 8010040:	4603      	mov	r3, r0
 8010042:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010044:	7bfb      	ldrb	r3, [r7, #15]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00f      	beq.n	801006a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801004a:	6839      	ldr	r1, [r7, #0]
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f000 f903 	bl	8010258 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	b2db      	uxtb	r3, r3
 8010058:	4619      	mov	r1, r3
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7ff f90e 	bl	800f27c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2202      	movs	r2, #2
 8010064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010068:	e014      	b.n	8010094 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 f9bf 	bl	80103ee <USBD_CtlSendStatus>
      break;
 8010070:	e010      	b.n	8010094 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f9bb 	bl	80103ee <USBD_CtlSendStatus>
      break;
 8010078:	e00c      	b.n	8010094 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 f8eb 	bl	8010258 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010082:	4b07      	ldr	r3, [pc, #28]	; (80100a0 <USBD_SetConfig+0x148>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	4619      	mov	r1, r3
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7ff f8f7 	bl	800f27c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801008e:	2303      	movs	r3, #3
 8010090:	73fb      	strb	r3, [r7, #15]
      break;
 8010092:	bf00      	nop
  }

  return ret;
 8010094:	7bfb      	ldrb	r3, [r7, #15]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	20000260 	.word	0x20000260

080100a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	88db      	ldrh	r3, [r3, #6]
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d004      	beq.n	80100c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 f8cd 	bl	8010258 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80100be:	e023      	b.n	8010108 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	2b02      	cmp	r3, #2
 80100ca:	dc02      	bgt.n	80100d2 <USBD_GetConfig+0x2e>
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	dc03      	bgt.n	80100d8 <USBD_GetConfig+0x34>
 80100d0:	e015      	b.n	80100fe <USBD_GetConfig+0x5a>
 80100d2:	2b03      	cmp	r3, #3
 80100d4:	d00b      	beq.n	80100ee <USBD_GetConfig+0x4a>
 80100d6:	e012      	b.n	80100fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	3308      	adds	r3, #8
 80100e2:	2201      	movs	r2, #1
 80100e4:	4619      	mov	r1, r3
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f927 	bl	801033a <USBD_CtlSendData>
        break;
 80100ec:	e00c      	b.n	8010108 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	3304      	adds	r3, #4
 80100f2:	2201      	movs	r2, #1
 80100f4:	4619      	mov	r1, r3
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f91f 	bl	801033a <USBD_CtlSendData>
        break;
 80100fc:	e004      	b.n	8010108 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80100fe:	6839      	ldr	r1, [r7, #0]
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 f8a9 	bl	8010258 <USBD_CtlError>
        break;
 8010106:	bf00      	nop
}
 8010108:	bf00      	nop
 801010a:	3708      	adds	r7, #8
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b082      	sub	sp, #8
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010120:	b2db      	uxtb	r3, r3
 8010122:	3b01      	subs	r3, #1
 8010124:	2b02      	cmp	r3, #2
 8010126:	d81e      	bhi.n	8010166 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	88db      	ldrh	r3, [r3, #6]
 801012c:	2b02      	cmp	r3, #2
 801012e:	d004      	beq.n	801013a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010130:	6839      	ldr	r1, [r7, #0]
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f000 f890 	bl	8010258 <USBD_CtlError>
        break;
 8010138:	e01a      	b.n	8010170 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2201      	movs	r2, #1
 801013e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010146:	2b00      	cmp	r3, #0
 8010148:	d005      	beq.n	8010156 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	68db      	ldr	r3, [r3, #12]
 801014e:	f043 0202 	orr.w	r2, r3, #2
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	330c      	adds	r3, #12
 801015a:	2202      	movs	r2, #2
 801015c:	4619      	mov	r1, r3
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 f8eb 	bl	801033a <USBD_CtlSendData>
      break;
 8010164:	e004      	b.n	8010170 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010166:	6839      	ldr	r1, [r7, #0]
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f000 f875 	bl	8010258 <USBD_CtlError>
      break;
 801016e:	bf00      	nop
  }
}
 8010170:	bf00      	nop
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	885b      	ldrh	r3, [r3, #2]
 8010186:	2b01      	cmp	r3, #1
 8010188:	d106      	bne.n	8010198 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2201      	movs	r2, #1
 801018e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 f92b 	bl	80103ee <USBD_CtlSendStatus>
  }
}
 8010198:	bf00      	nop
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	3b01      	subs	r3, #1
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d80b      	bhi.n	80101d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	885b      	ldrh	r3, [r3, #2]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d10c      	bne.n	80101da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 f910 	bl	80103ee <USBD_CtlSendStatus>
      }
      break;
 80101ce:	e004      	b.n	80101da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80101d0:	6839      	ldr	r1, [r7, #0]
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 f840 	bl	8010258 <USBD_CtlError>
      break;
 80101d8:	e000      	b.n	80101dc <USBD_ClrFeature+0x3c>
      break;
 80101da:	bf00      	nop
  }
}
 80101dc:	bf00      	nop
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	781a      	ldrb	r2, [r3, #0]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	3301      	adds	r3, #1
 80101fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	781a      	ldrb	r2, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	3301      	adds	r3, #1
 801020c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f7ff fabb 	bl	800f78a <SWAPBYTE>
 8010214:	4603      	mov	r3, r0
 8010216:	461a      	mov	r2, r3
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	3301      	adds	r3, #1
 8010220:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	3301      	adds	r3, #1
 8010226:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f7ff faae 	bl	800f78a <SWAPBYTE>
 801022e:	4603      	mov	r3, r0
 8010230:	461a      	mov	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	3301      	adds	r3, #1
 801023a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	3301      	adds	r3, #1
 8010240:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f7ff faa1 	bl	800f78a <SWAPBYTE>
 8010248:	4603      	mov	r3, r0
 801024a:	461a      	mov	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	80da      	strh	r2, [r3, #6]
}
 8010250:	bf00      	nop
 8010252:	3710      	adds	r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010262:	2180      	movs	r1, #128	; 0x80
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 fcbb 	bl	8010be0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801026a:	2100      	movs	r1, #0
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 fcb7 	bl	8010be0 <USBD_LL_StallEP>
}
 8010272:	bf00      	nop
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b086      	sub	sp, #24
 801027e:	af00      	add	r7, sp, #0
 8010280:	60f8      	str	r0, [r7, #12]
 8010282:	60b9      	str	r1, [r7, #8]
 8010284:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010286:	2300      	movs	r3, #0
 8010288:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d036      	beq.n	80102fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010294:	6938      	ldr	r0, [r7, #16]
 8010296:	f000 f836 	bl	8010306 <USBD_GetLen>
 801029a:	4603      	mov	r3, r0
 801029c:	3301      	adds	r3, #1
 801029e:	b29b      	uxth	r3, r3
 80102a0:	005b      	lsls	r3, r3, #1
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80102a8:	7dfb      	ldrb	r3, [r7, #23]
 80102aa:	68ba      	ldr	r2, [r7, #8]
 80102ac:	4413      	add	r3, r2
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	7812      	ldrb	r2, [r2, #0]
 80102b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80102b4:	7dfb      	ldrb	r3, [r7, #23]
 80102b6:	3301      	adds	r3, #1
 80102b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80102ba:	7dfb      	ldrb	r3, [r7, #23]
 80102bc:	68ba      	ldr	r2, [r7, #8]
 80102be:	4413      	add	r3, r2
 80102c0:	2203      	movs	r2, #3
 80102c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80102c4:	7dfb      	ldrb	r3, [r7, #23]
 80102c6:	3301      	adds	r3, #1
 80102c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80102ca:	e013      	b.n	80102f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80102cc:	7dfb      	ldrb	r3, [r7, #23]
 80102ce:	68ba      	ldr	r2, [r7, #8]
 80102d0:	4413      	add	r3, r2
 80102d2:	693a      	ldr	r2, [r7, #16]
 80102d4:	7812      	ldrb	r2, [r2, #0]
 80102d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	3301      	adds	r3, #1
 80102dc:	613b      	str	r3, [r7, #16]
    idx++;
 80102de:	7dfb      	ldrb	r3, [r7, #23]
 80102e0:	3301      	adds	r3, #1
 80102e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80102e4:	7dfb      	ldrb	r3, [r7, #23]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	4413      	add	r3, r2
 80102ea:	2200      	movs	r2, #0
 80102ec:	701a      	strb	r2, [r3, #0]
    idx++;
 80102ee:	7dfb      	ldrb	r3, [r7, #23]
 80102f0:	3301      	adds	r3, #1
 80102f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1e7      	bne.n	80102cc <USBD_GetString+0x52>
 80102fc:	e000      	b.n	8010300 <USBD_GetString+0x86>
    return;
 80102fe:	bf00      	nop
  }
}
 8010300:	3718      	adds	r7, #24
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}

08010306 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010306:	b480      	push	{r7}
 8010308:	b085      	sub	sp, #20
 801030a:	af00      	add	r7, sp, #0
 801030c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801030e:	2300      	movs	r3, #0
 8010310:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010316:	e005      	b.n	8010324 <USBD_GetLen+0x1e>
  {
    len++;
 8010318:	7bfb      	ldrb	r3, [r7, #15]
 801031a:	3301      	adds	r3, #1
 801031c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	3301      	adds	r3, #1
 8010322:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d1f5      	bne.n	8010318 <USBD_GetLen+0x12>
  }

  return len;
 801032c:	7bfb      	ldrb	r3, [r7, #15]
}
 801032e:	4618      	mov	r0, r3
 8010330:	3714      	adds	r7, #20
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr

0801033a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b084      	sub	sp, #16
 801033e:	af00      	add	r7, sp, #0
 8010340:	60f8      	str	r0, [r7, #12]
 8010342:	60b9      	str	r1, [r7, #8]
 8010344:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2202      	movs	r2, #2
 801034a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	687a      	ldr	r2, [r7, #4]
 8010358:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	68ba      	ldr	r2, [r7, #8]
 801035e:	2100      	movs	r1, #0
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f000 fcc6 	bl	8010cf2 <USBD_LL_Transmit>

  return USBD_OK;
 8010366:	2300      	movs	r3, #0
}
 8010368:	4618      	mov	r0, r3
 801036a:	3710      	adds	r7, #16
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	2100      	movs	r1, #0
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f000 fcb5 	bl	8010cf2 <USBD_LL_Transmit>

  return USBD_OK;
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3710      	adds	r7, #16
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}

08010392 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010392:	b580      	push	{r7, lr}
 8010394:	b084      	sub	sp, #16
 8010396:	af00      	add	r7, sp, #0
 8010398:	60f8      	str	r0, [r7, #12]
 801039a:	60b9      	str	r1, [r7, #8]
 801039c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2203      	movs	r2, #3
 80103a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	68ba      	ldr	r2, [r7, #8]
 80103ba:	2100      	movs	r1, #0
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f000 fcb9 	bl	8010d34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103c2:	2300      	movs	r3, #0
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3710      	adds	r7, #16
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	68ba      	ldr	r2, [r7, #8]
 80103dc:	2100      	movs	r1, #0
 80103de:	68f8      	ldr	r0, [r7, #12]
 80103e0:	f000 fca8 	bl	8010d34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103e4:	2300      	movs	r3, #0
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}

080103ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80103ee:	b580      	push	{r7, lr}
 80103f0:	b082      	sub	sp, #8
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2204      	movs	r2, #4
 80103fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80103fe:	2300      	movs	r3, #0
 8010400:	2200      	movs	r2, #0
 8010402:	2100      	movs	r1, #0
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f000 fc74 	bl	8010cf2 <USBD_LL_Transmit>

  return USBD_OK;
 801040a:	2300      	movs	r3, #0
}
 801040c:	4618      	mov	r0, r3
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2205      	movs	r2, #5
 8010420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010424:	2300      	movs	r3, #0
 8010426:	2200      	movs	r2, #0
 8010428:	2100      	movs	r1, #0
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 fc82 	bl	8010d34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010430:	2300      	movs	r3, #0
}
 8010432:	4618      	mov	r0, r3
 8010434:	3708      	adds	r7, #8
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
	...

0801043c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010440:	2200      	movs	r2, #0
 8010442:	4912      	ldr	r1, [pc, #72]	; (801048c <MX_USB_DEVICE_Init+0x50>)
 8010444:	4812      	ldr	r0, [pc, #72]	; (8010490 <MX_USB_DEVICE_Init+0x54>)
 8010446:	f7fe fe8f 	bl	800f168 <USBD_Init>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d001      	beq.n	8010454 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010450:	f7f7 ff48 	bl	80082e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010454:	490f      	ldr	r1, [pc, #60]	; (8010494 <MX_USB_DEVICE_Init+0x58>)
 8010456:	480e      	ldr	r0, [pc, #56]	; (8010490 <MX_USB_DEVICE_Init+0x54>)
 8010458:	f7fe feb6 	bl	800f1c8 <USBD_RegisterClass>
 801045c:	4603      	mov	r3, r0
 801045e:	2b00      	cmp	r3, #0
 8010460:	d001      	beq.n	8010466 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010462:	f7f7 ff3f 	bl	80082e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010466:	490c      	ldr	r1, [pc, #48]	; (8010498 <MX_USB_DEVICE_Init+0x5c>)
 8010468:	4809      	ldr	r0, [pc, #36]	; (8010490 <MX_USB_DEVICE_Init+0x54>)
 801046a:	f7fe fe07 	bl	800f07c <USBD_CDC_RegisterInterface>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d001      	beq.n	8010478 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010474:	f7f7 ff36 	bl	80082e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010478:	4805      	ldr	r0, [pc, #20]	; (8010490 <MX_USB_DEVICE_Init+0x54>)
 801047a:	f7fe fecc 	bl	800f216 <USBD_Start>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d001      	beq.n	8010488 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010484:	f7f7 ff2e 	bl	80082e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010488:	bf00      	nop
 801048a:	bd80      	pop	{r7, pc}
 801048c:	20000130 	.word	0x20000130
 8010490:	200008ac 	.word	0x200008ac
 8010494:	20000018 	.word	0x20000018
 8010498:	2000011c 	.word	0x2000011c

0801049c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80104a0:	2200      	movs	r2, #0
 80104a2:	4905      	ldr	r1, [pc, #20]	; (80104b8 <CDC_Init_FS+0x1c>)
 80104a4:	4805      	ldr	r0, [pc, #20]	; (80104bc <CDC_Init_FS+0x20>)
 80104a6:	f7fe fdfe 	bl	800f0a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80104aa:	4905      	ldr	r1, [pc, #20]	; (80104c0 <CDC_Init_FS+0x24>)
 80104ac:	4803      	ldr	r0, [pc, #12]	; (80104bc <CDC_Init_FS+0x20>)
 80104ae:	f7fe fe18 	bl	800f0e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80104b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	2000137c 	.word	0x2000137c
 80104bc:	200008ac 	.word	0x200008ac
 80104c0:	20000b7c 	.word	0x20000b7c

080104c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80104c4:	b480      	push	{r7}
 80104c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80104c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	4603      	mov	r3, r0
 80104dc:	6039      	str	r1, [r7, #0]
 80104de:	71fb      	strb	r3, [r7, #7]
 80104e0:	4613      	mov	r3, r2
 80104e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80104e4:	79fb      	ldrb	r3, [r7, #7]
 80104e6:	2b23      	cmp	r3, #35	; 0x23
 80104e8:	d84a      	bhi.n	8010580 <CDC_Control_FS+0xac>
 80104ea:	a201      	add	r2, pc, #4	; (adr r2, 80104f0 <CDC_Control_FS+0x1c>)
 80104ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f0:	08010581 	.word	0x08010581
 80104f4:	08010581 	.word	0x08010581
 80104f8:	08010581 	.word	0x08010581
 80104fc:	08010581 	.word	0x08010581
 8010500:	08010581 	.word	0x08010581
 8010504:	08010581 	.word	0x08010581
 8010508:	08010581 	.word	0x08010581
 801050c:	08010581 	.word	0x08010581
 8010510:	08010581 	.word	0x08010581
 8010514:	08010581 	.word	0x08010581
 8010518:	08010581 	.word	0x08010581
 801051c:	08010581 	.word	0x08010581
 8010520:	08010581 	.word	0x08010581
 8010524:	08010581 	.word	0x08010581
 8010528:	08010581 	.word	0x08010581
 801052c:	08010581 	.word	0x08010581
 8010530:	08010581 	.word	0x08010581
 8010534:	08010581 	.word	0x08010581
 8010538:	08010581 	.word	0x08010581
 801053c:	08010581 	.word	0x08010581
 8010540:	08010581 	.word	0x08010581
 8010544:	08010581 	.word	0x08010581
 8010548:	08010581 	.word	0x08010581
 801054c:	08010581 	.word	0x08010581
 8010550:	08010581 	.word	0x08010581
 8010554:	08010581 	.word	0x08010581
 8010558:	08010581 	.word	0x08010581
 801055c:	08010581 	.word	0x08010581
 8010560:	08010581 	.word	0x08010581
 8010564:	08010581 	.word	0x08010581
 8010568:	08010581 	.word	0x08010581
 801056c:	08010581 	.word	0x08010581
 8010570:	08010581 	.word	0x08010581
 8010574:	08010581 	.word	0x08010581
 8010578:	08010581 	.word	0x08010581
 801057c:	08010581 	.word	0x08010581
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010580:	bf00      	nop
  }

  return (USBD_OK);
 8010582:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010584:	4618      	mov	r0, r3
 8010586:	370c      	adds	r7, #12
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr

08010590 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801059a:	6879      	ldr	r1, [r7, #4]
 801059c:	4805      	ldr	r0, [pc, #20]	; (80105b4 <CDC_Receive_FS+0x24>)
 801059e:	f7fe fda0 	bl	800f0e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80105a2:	4804      	ldr	r0, [pc, #16]	; (80105b4 <CDC_Receive_FS+0x24>)
 80105a4:	f7fe fdb6 	bl	800f114 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80105a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3708      	adds	r7, #8
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	200008ac 	.word	0x200008ac

080105b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80105b8:	b480      	push	{r7}
 80105ba:	b087      	sub	sp, #28
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	4613      	mov	r3, r2
 80105c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80105c6:	2300      	movs	r3, #0
 80105c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80105ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	371c      	adds	r7, #28
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr
	...

080105dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105dc:	b480      	push	{r7}
 80105de:	b083      	sub	sp, #12
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	4603      	mov	r3, r0
 80105e4:	6039      	str	r1, [r7, #0]
 80105e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	2212      	movs	r2, #18
 80105ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80105ee:	4b03      	ldr	r3, [pc, #12]	; (80105fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr
 80105fc:	2000014c 	.word	0x2000014c

08010600 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	4603      	mov	r3, r0
 8010608:	6039      	str	r1, [r7, #0]
 801060a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	2204      	movs	r2, #4
 8010610:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010612:	4b03      	ldr	r3, [pc, #12]	; (8010620 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010614:	4618      	mov	r0, r3
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr
 8010620:	20000160 	.word	0x20000160

08010624 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	4603      	mov	r3, r0
 801062c:	6039      	str	r1, [r7, #0]
 801062e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010630:	79fb      	ldrb	r3, [r7, #7]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d105      	bne.n	8010642 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	4907      	ldr	r1, [pc, #28]	; (8010658 <USBD_FS_ProductStrDescriptor+0x34>)
 801063a:	4808      	ldr	r0, [pc, #32]	; (801065c <USBD_FS_ProductStrDescriptor+0x38>)
 801063c:	f7ff fe1d 	bl	801027a <USBD_GetString>
 8010640:	e004      	b.n	801064c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010642:	683a      	ldr	r2, [r7, #0]
 8010644:	4904      	ldr	r1, [pc, #16]	; (8010658 <USBD_FS_ProductStrDescriptor+0x34>)
 8010646:	4805      	ldr	r0, [pc, #20]	; (801065c <USBD_FS_ProductStrDescriptor+0x38>)
 8010648:	f7ff fe17 	bl	801027a <USBD_GetString>
  }
  return USBD_StrDesc;
 801064c:	4b02      	ldr	r3, [pc, #8]	; (8010658 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801064e:	4618      	mov	r0, r3
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	20001b7c 	.word	0x20001b7c
 801065c:	080130a8 	.word	0x080130a8

08010660 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	4603      	mov	r3, r0
 8010668:	6039      	str	r1, [r7, #0]
 801066a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801066c:	683a      	ldr	r2, [r7, #0]
 801066e:	4904      	ldr	r1, [pc, #16]	; (8010680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010670:	4804      	ldr	r0, [pc, #16]	; (8010684 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010672:	f7ff fe02 	bl	801027a <USBD_GetString>
  return USBD_StrDesc;
 8010676:	4b02      	ldr	r3, [pc, #8]	; (8010680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	20001b7c 	.word	0x20001b7c
 8010684:	080130c0 	.word	0x080130c0

08010688 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	4603      	mov	r3, r0
 8010690:	6039      	str	r1, [r7, #0]
 8010692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	221a      	movs	r2, #26
 8010698:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801069a:	f000 f843 	bl	8010724 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801069e:	4b02      	ldr	r3, [pc, #8]	; (80106a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	20000164 	.word	0x20000164

080106ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	4603      	mov	r3, r0
 80106b4:	6039      	str	r1, [r7, #0]
 80106b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80106b8:	79fb      	ldrb	r3, [r7, #7]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d105      	bne.n	80106ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	4907      	ldr	r1, [pc, #28]	; (80106e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80106c2:	4808      	ldr	r0, [pc, #32]	; (80106e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80106c4:	f7ff fdd9 	bl	801027a <USBD_GetString>
 80106c8:	e004      	b.n	80106d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80106ca:	683a      	ldr	r2, [r7, #0]
 80106cc:	4904      	ldr	r1, [pc, #16]	; (80106e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80106ce:	4805      	ldr	r0, [pc, #20]	; (80106e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80106d0:	f7ff fdd3 	bl	801027a <USBD_GetString>
  }
  return USBD_StrDesc;
 80106d4:	4b02      	ldr	r3, [pc, #8]	; (80106e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3708      	adds	r7, #8
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	20001b7c 	.word	0x20001b7c
 80106e4:	080130d4 	.word	0x080130d4

080106e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	4603      	mov	r3, r0
 80106f0:	6039      	str	r1, [r7, #0]
 80106f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80106f4:	79fb      	ldrb	r3, [r7, #7]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d105      	bne.n	8010706 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80106fa:	683a      	ldr	r2, [r7, #0]
 80106fc:	4907      	ldr	r1, [pc, #28]	; (801071c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80106fe:	4808      	ldr	r0, [pc, #32]	; (8010720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010700:	f7ff fdbb 	bl	801027a <USBD_GetString>
 8010704:	e004      	b.n	8010710 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	4904      	ldr	r1, [pc, #16]	; (801071c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801070a:	4805      	ldr	r0, [pc, #20]	; (8010720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801070c:	f7ff fdb5 	bl	801027a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010710:	4b02      	ldr	r3, [pc, #8]	; (801071c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010712:	4618      	mov	r0, r3
 8010714:	3708      	adds	r7, #8
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	20001b7c 	.word	0x20001b7c
 8010720:	080130e0 	.word	0x080130e0

08010724 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b084      	sub	sp, #16
 8010728:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801072a:	4b0f      	ldr	r3, [pc, #60]	; (8010768 <Get_SerialNum+0x44>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010730:	4b0e      	ldr	r3, [pc, #56]	; (801076c <Get_SerialNum+0x48>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010736:	4b0e      	ldr	r3, [pc, #56]	; (8010770 <Get_SerialNum+0x4c>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4413      	add	r3, r2
 8010742:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d009      	beq.n	801075e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801074a:	2208      	movs	r2, #8
 801074c:	4909      	ldr	r1, [pc, #36]	; (8010774 <Get_SerialNum+0x50>)
 801074e:	68f8      	ldr	r0, [r7, #12]
 8010750:	f000 f814 	bl	801077c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010754:	2204      	movs	r2, #4
 8010756:	4908      	ldr	r1, [pc, #32]	; (8010778 <Get_SerialNum+0x54>)
 8010758:	68b8      	ldr	r0, [r7, #8]
 801075a:	f000 f80f 	bl	801077c <IntToUnicode>
  }
}
 801075e:	bf00      	nop
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	1fff7a10 	.word	0x1fff7a10
 801076c:	1fff7a14 	.word	0x1fff7a14
 8010770:	1fff7a18 	.word	0x1fff7a18
 8010774:	20000166 	.word	0x20000166
 8010778:	20000176 	.word	0x20000176

0801077c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801077c:	b480      	push	{r7}
 801077e:	b087      	sub	sp, #28
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	4613      	mov	r3, r2
 8010788:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801078a:	2300      	movs	r3, #0
 801078c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801078e:	2300      	movs	r3, #0
 8010790:	75fb      	strb	r3, [r7, #23]
 8010792:	e027      	b.n	80107e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	0f1b      	lsrs	r3, r3, #28
 8010798:	2b09      	cmp	r3, #9
 801079a:	d80b      	bhi.n	80107b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	0f1b      	lsrs	r3, r3, #28
 80107a0:	b2da      	uxtb	r2, r3
 80107a2:	7dfb      	ldrb	r3, [r7, #23]
 80107a4:	005b      	lsls	r3, r3, #1
 80107a6:	4619      	mov	r1, r3
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	440b      	add	r3, r1
 80107ac:	3230      	adds	r2, #48	; 0x30
 80107ae:	b2d2      	uxtb	r2, r2
 80107b0:	701a      	strb	r2, [r3, #0]
 80107b2:	e00a      	b.n	80107ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	0f1b      	lsrs	r3, r3, #28
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	7dfb      	ldrb	r3, [r7, #23]
 80107bc:	005b      	lsls	r3, r3, #1
 80107be:	4619      	mov	r1, r3
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	440b      	add	r3, r1
 80107c4:	3237      	adds	r2, #55	; 0x37
 80107c6:	b2d2      	uxtb	r2, r2
 80107c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	011b      	lsls	r3, r3, #4
 80107ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80107d0:	7dfb      	ldrb	r3, [r7, #23]
 80107d2:	005b      	lsls	r3, r3, #1
 80107d4:	3301      	adds	r3, #1
 80107d6:	68ba      	ldr	r2, [r7, #8]
 80107d8:	4413      	add	r3, r2
 80107da:	2200      	movs	r2, #0
 80107dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80107de:	7dfb      	ldrb	r3, [r7, #23]
 80107e0:	3301      	adds	r3, #1
 80107e2:	75fb      	strb	r3, [r7, #23]
 80107e4:	7dfa      	ldrb	r2, [r7, #23]
 80107e6:	79fb      	ldrb	r3, [r7, #7]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d3d3      	bcc.n	8010794 <IntToUnicode+0x18>
  }
}
 80107ec:	bf00      	nop
 80107ee:	bf00      	nop
 80107f0:	371c      	adds	r7, #28
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr
	...

080107fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b08a      	sub	sp, #40	; 0x28
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010804:	f107 0314 	add.w	r3, r7, #20
 8010808:	2200      	movs	r2, #0
 801080a:	601a      	str	r2, [r3, #0]
 801080c:	605a      	str	r2, [r3, #4]
 801080e:	609a      	str	r2, [r3, #8]
 8010810:	60da      	str	r2, [r3, #12]
 8010812:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801081c:	d13a      	bne.n	8010894 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801081e:	2300      	movs	r3, #0
 8010820:	613b      	str	r3, [r7, #16]
 8010822:	4b1e      	ldr	r3, [pc, #120]	; (801089c <HAL_PCD_MspInit+0xa0>)
 8010824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010826:	4a1d      	ldr	r2, [pc, #116]	; (801089c <HAL_PCD_MspInit+0xa0>)
 8010828:	f043 0301 	orr.w	r3, r3, #1
 801082c:	6313      	str	r3, [r2, #48]	; 0x30
 801082e:	4b1b      	ldr	r3, [pc, #108]	; (801089c <HAL_PCD_MspInit+0xa0>)
 8010830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	613b      	str	r3, [r7, #16]
 8010838:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801083a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801083e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010840:	2302      	movs	r3, #2
 8010842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010844:	2300      	movs	r3, #0
 8010846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010848:	2303      	movs	r3, #3
 801084a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801084c:	230a      	movs	r3, #10
 801084e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010850:	f107 0314 	add.w	r3, r7, #20
 8010854:	4619      	mov	r1, r3
 8010856:	4812      	ldr	r0, [pc, #72]	; (80108a0 <HAL_PCD_MspInit+0xa4>)
 8010858:	f7f9 f976 	bl	8009b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801085c:	4b0f      	ldr	r3, [pc, #60]	; (801089c <HAL_PCD_MspInit+0xa0>)
 801085e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010860:	4a0e      	ldr	r2, [pc, #56]	; (801089c <HAL_PCD_MspInit+0xa0>)
 8010862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010866:	6353      	str	r3, [r2, #52]	; 0x34
 8010868:	2300      	movs	r3, #0
 801086a:	60fb      	str	r3, [r7, #12]
 801086c:	4b0b      	ldr	r3, [pc, #44]	; (801089c <HAL_PCD_MspInit+0xa0>)
 801086e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010870:	4a0a      	ldr	r2, [pc, #40]	; (801089c <HAL_PCD_MspInit+0xa0>)
 8010872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010876:	6453      	str	r3, [r2, #68]	; 0x44
 8010878:	4b08      	ldr	r3, [pc, #32]	; (801089c <HAL_PCD_MspInit+0xa0>)
 801087a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801087c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010880:	60fb      	str	r3, [r7, #12]
 8010882:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010884:	2200      	movs	r2, #0
 8010886:	2100      	movs	r1, #0
 8010888:	2043      	movs	r0, #67	; 0x43
 801088a:	f7f9 f894 	bl	80099b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801088e:	2043      	movs	r0, #67	; 0x43
 8010890:	f7f9 f8ad 	bl	80099ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010894:	bf00      	nop
 8010896:	3728      	adds	r7, #40	; 0x28
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	40023800 	.word	0x40023800
 80108a0:	40020000 	.word	0x40020000

080108a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80108b8:	4619      	mov	r1, r3
 80108ba:	4610      	mov	r0, r2
 80108bc:	f7fe fcf6 	bl	800f2ac <USBD_LL_SetupStage>
}
 80108c0:	bf00      	nop
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	460b      	mov	r3, r1
 80108d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80108da:	78fa      	ldrb	r2, [r7, #3]
 80108dc:	6879      	ldr	r1, [r7, #4]
 80108de:	4613      	mov	r3, r2
 80108e0:	00db      	lsls	r3, r3, #3
 80108e2:	1a9b      	subs	r3, r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	440b      	add	r3, r1
 80108e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	78fb      	ldrb	r3, [r7, #3]
 80108f0:	4619      	mov	r1, r3
 80108f2:	f7fe fd30 	bl	800f356 <USBD_LL_DataOutStage>
}
 80108f6:	bf00      	nop
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108fe:	b580      	push	{r7, lr}
 8010900:	b082      	sub	sp, #8
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
 8010906:	460b      	mov	r3, r1
 8010908:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010910:	78fa      	ldrb	r2, [r7, #3]
 8010912:	6879      	ldr	r1, [r7, #4]
 8010914:	4613      	mov	r3, r2
 8010916:	00db      	lsls	r3, r3, #3
 8010918:	1a9b      	subs	r3, r3, r2
 801091a:	009b      	lsls	r3, r3, #2
 801091c:	440b      	add	r3, r1
 801091e:	3348      	adds	r3, #72	; 0x48
 8010920:	681a      	ldr	r2, [r3, #0]
 8010922:	78fb      	ldrb	r3, [r7, #3]
 8010924:	4619      	mov	r1, r3
 8010926:	f7fe fd79 	bl	800f41c <USBD_LL_DataInStage>
}
 801092a:	bf00      	nop
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010940:	4618      	mov	r0, r3
 8010942:	f7fe fe8d 	bl	800f660 <USBD_LL_SOF>
}
 8010946:	bf00      	nop
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}

0801094e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801094e:	b580      	push	{r7, lr}
 8010950:	b084      	sub	sp, #16
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010956:	2301      	movs	r3, #1
 8010958:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d102      	bne.n	8010968 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010962:	2300      	movs	r3, #0
 8010964:	73fb      	strb	r3, [r7, #15]
 8010966:	e008      	b.n	801097a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	2b02      	cmp	r3, #2
 801096e:	d102      	bne.n	8010976 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010970:	2301      	movs	r3, #1
 8010972:	73fb      	strb	r3, [r7, #15]
 8010974:	e001      	b.n	801097a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010976:	f7f7 fcb5 	bl	80082e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010980:	7bfa      	ldrb	r2, [r7, #15]
 8010982:	4611      	mov	r1, r2
 8010984:	4618      	mov	r0, r3
 8010986:	f7fe fe2d 	bl	800f5e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010990:	4618      	mov	r0, r3
 8010992:	f7fe fdd9 	bl	800f548 <USBD_LL_Reset>
}
 8010996:	bf00      	nop
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
	...

080109a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7fe fe28 	bl	800f604 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	6812      	ldr	r2, [r2, #0]
 80109c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80109c6:	f043 0301 	orr.w	r3, r3, #1
 80109ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a1b      	ldr	r3, [r3, #32]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d005      	beq.n	80109e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109d4:	4b04      	ldr	r3, [pc, #16]	; (80109e8 <HAL_PCD_SuspendCallback+0x48>)
 80109d6:	691b      	ldr	r3, [r3, #16]
 80109d8:	4a03      	ldr	r2, [pc, #12]	; (80109e8 <HAL_PCD_SuspendCallback+0x48>)
 80109da:	f043 0306 	orr.w	r3, r3, #6
 80109de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80109e0:	bf00      	nop
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	e000ed00 	.word	0xe000ed00

080109ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fe fe18 	bl	800f630 <USBD_LL_Resume>
}
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	460b      	mov	r3, r1
 8010a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010a1a:	78fa      	ldrb	r2, [r7, #3]
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7fe fe66 	bl	800f6f0 <USBD_LL_IsoOUTIncomplete>
}
 8010a24:	bf00      	nop
 8010a26:	3708      	adds	r7, #8
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	460b      	mov	r3, r1
 8010a36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010a3e:	78fa      	ldrb	r2, [r7, #3]
 8010a40:	4611      	mov	r1, r2
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fe fe2e 	bl	800f6a4 <USBD_LL_IsoINIncomplete>
}
 8010a48:	bf00      	nop
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7fe fe6c 	bl	800f73c <USBD_LL_DevConnected>
}
 8010a64:	bf00      	nop
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7fe fe69 	bl	800f752 <USBD_LL_DevDisconnected>
}
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d13c      	bne.n	8010b12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010a98:	4a20      	ldr	r2, [pc, #128]	; (8010b1c <USBD_LL_Init+0x94>)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4a1e      	ldr	r2, [pc, #120]	; (8010b1c <USBD_LL_Init+0x94>)
 8010aa4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010aa8:	4b1c      	ldr	r3, [pc, #112]	; (8010b1c <USBD_LL_Init+0x94>)
 8010aaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010aae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010ab0:	4b1a      	ldr	r3, [pc, #104]	; (8010b1c <USBD_LL_Init+0x94>)
 8010ab2:	2204      	movs	r2, #4
 8010ab4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010ab6:	4b19      	ldr	r3, [pc, #100]	; (8010b1c <USBD_LL_Init+0x94>)
 8010ab8:	2202      	movs	r2, #2
 8010aba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010abc:	4b17      	ldr	r3, [pc, #92]	; (8010b1c <USBD_LL_Init+0x94>)
 8010abe:	2200      	movs	r2, #0
 8010ac0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010ac2:	4b16      	ldr	r3, [pc, #88]	; (8010b1c <USBD_LL_Init+0x94>)
 8010ac4:	2202      	movs	r2, #2
 8010ac6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010ac8:	4b14      	ldr	r3, [pc, #80]	; (8010b1c <USBD_LL_Init+0x94>)
 8010aca:	2200      	movs	r2, #0
 8010acc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010ace:	4b13      	ldr	r3, [pc, #76]	; (8010b1c <USBD_LL_Init+0x94>)
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010ad4:	4b11      	ldr	r3, [pc, #68]	; (8010b1c <USBD_LL_Init+0x94>)
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010ada:	4b10      	ldr	r3, [pc, #64]	; (8010b1c <USBD_LL_Init+0x94>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010ae0:	4b0e      	ldr	r3, [pc, #56]	; (8010b1c <USBD_LL_Init+0x94>)
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010ae6:	480d      	ldr	r0, [pc, #52]	; (8010b1c <USBD_LL_Init+0x94>)
 8010ae8:	f7f9 f9f3 	bl	8009ed2 <HAL_PCD_Init>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d001      	beq.n	8010af6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010af2:	f7f7 fbf7 	bl	80082e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010af6:	2180      	movs	r1, #128	; 0x80
 8010af8:	4808      	ldr	r0, [pc, #32]	; (8010b1c <USBD_LL_Init+0x94>)
 8010afa:	f7fa fb50 	bl	800b19e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010afe:	2240      	movs	r2, #64	; 0x40
 8010b00:	2100      	movs	r1, #0
 8010b02:	4806      	ldr	r0, [pc, #24]	; (8010b1c <USBD_LL_Init+0x94>)
 8010b04:	f7fa fb04 	bl	800b110 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010b08:	2280      	movs	r2, #128	; 0x80
 8010b0a:	2101      	movs	r1, #1
 8010b0c:	4803      	ldr	r0, [pc, #12]	; (8010b1c <USBD_LL_Init+0x94>)
 8010b0e:	f7fa faff 	bl	800b110 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010b12:	2300      	movs	r3, #0
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	20001d7c 	.word	0x20001d7c

08010b20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7f9 fae8 	bl	800a10c <HAL_PCD_Start>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b40:	7bfb      	ldrb	r3, [r7, #15]
 8010b42:	4618      	mov	r0, r3
 8010b44:	f000 f942 	bl	8010dcc <USBD_Get_USB_Status>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3710      	adds	r7, #16
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b084      	sub	sp, #16
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	4608      	mov	r0, r1
 8010b60:	4611      	mov	r1, r2
 8010b62:	461a      	mov	r2, r3
 8010b64:	4603      	mov	r3, r0
 8010b66:	70fb      	strb	r3, [r7, #3]
 8010b68:	460b      	mov	r3, r1
 8010b6a:	70bb      	strb	r3, [r7, #2]
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b70:	2300      	movs	r3, #0
 8010b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b74:	2300      	movs	r3, #0
 8010b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010b7e:	78bb      	ldrb	r3, [r7, #2]
 8010b80:	883a      	ldrh	r2, [r7, #0]
 8010b82:	78f9      	ldrb	r1, [r7, #3]
 8010b84:	f7f9 fecc 	bl	800a920 <HAL_PCD_EP_Open>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b8c:	7bfb      	ldrb	r3, [r7, #15]
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f000 f91c 	bl	8010dcc <USBD_Get_USB_Status>
 8010b94:	4603      	mov	r3, r0
 8010b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b084      	sub	sp, #16
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
 8010baa:	460b      	mov	r3, r1
 8010bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010bbc:	78fa      	ldrb	r2, [r7, #3]
 8010bbe:	4611      	mov	r1, r2
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7f9 ff15 	bl	800a9f0 <HAL_PCD_EP_Close>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bca:	7bfb      	ldrb	r3, [r7, #15]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f000 f8fd 	bl	8010dcc <USBD_Get_USB_Status>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	460b      	mov	r3, r1
 8010bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bec:	2300      	movs	r3, #0
 8010bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010bfa:	78fa      	ldrb	r2, [r7, #3]
 8010bfc:	4611      	mov	r1, r2
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7f9 ffed 	bl	800abde <HAL_PCD_EP_SetStall>
 8010c04:	4603      	mov	r3, r0
 8010c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c08:	7bfb      	ldrb	r3, [r7, #15]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f000 f8de 	bl	8010dcc <USBD_Get_USB_Status>
 8010c10:	4603      	mov	r3, r0
 8010c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3710      	adds	r7, #16
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b084      	sub	sp, #16
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
 8010c26:	460b      	mov	r3, r1
 8010c28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c38:	78fa      	ldrb	r2, [r7, #3]
 8010c3a:	4611      	mov	r1, r2
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7fa f832 	bl	800aca6 <HAL_PCD_EP_ClrStall>
 8010c42:	4603      	mov	r3, r0
 8010c44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c46:	7bfb      	ldrb	r3, [r7, #15]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f000 f8bf 	bl	8010dcc <USBD_Get_USB_Status>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c52:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b085      	sub	sp, #20
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	460b      	mov	r3, r1
 8010c66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	da0b      	bge.n	8010c90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010c78:	78fb      	ldrb	r3, [r7, #3]
 8010c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c7e:	68f9      	ldr	r1, [r7, #12]
 8010c80:	4613      	mov	r3, r2
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	1a9b      	subs	r3, r3, r2
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	440b      	add	r3, r1
 8010c8a:	333e      	adds	r3, #62	; 0x3e
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	e00b      	b.n	8010ca8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010c90:	78fb      	ldrb	r3, [r7, #3]
 8010c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c96:	68f9      	ldr	r1, [r7, #12]
 8010c98:	4613      	mov	r3, r2
 8010c9a:	00db      	lsls	r3, r3, #3
 8010c9c:	1a9b      	subs	r3, r3, r2
 8010c9e:	009b      	lsls	r3, r3, #2
 8010ca0:	440b      	add	r3, r1
 8010ca2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010ca6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3714      	adds	r7, #20
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr

08010cb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010cce:	78fa      	ldrb	r2, [r7, #3]
 8010cd0:	4611      	mov	r1, r2
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7f9 fdff 	bl	800a8d6 <HAL_PCD_SetAddress>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cdc:	7bfb      	ldrb	r3, [r7, #15]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f000 f874 	bl	8010dcc <USBD_Get_USB_Status>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3710      	adds	r7, #16
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b086      	sub	sp, #24
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	60f8      	str	r0, [r7, #12]
 8010cfa:	607a      	str	r2, [r7, #4]
 8010cfc:	603b      	str	r3, [r7, #0]
 8010cfe:	460b      	mov	r3, r1
 8010d00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d02:	2300      	movs	r3, #0
 8010d04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d06:	2300      	movs	r3, #0
 8010d08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010d10:	7af9      	ldrb	r1, [r7, #11]
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	f7f9 ff18 	bl	800ab4a <HAL_PCD_EP_Transmit>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
 8010d20:	4618      	mov	r0, r3
 8010d22:	f000 f853 	bl	8010dcc <USBD_Get_USB_Status>
 8010d26:	4603      	mov	r3, r0
 8010d28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3718      	adds	r7, #24
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	607a      	str	r2, [r7, #4]
 8010d3e:	603b      	str	r3, [r7, #0]
 8010d40:	460b      	mov	r3, r1
 8010d42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d44:	2300      	movs	r3, #0
 8010d46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010d52:	7af9      	ldrb	r1, [r7, #11]
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	f7f9 fe94 	bl	800aa84 <HAL_PCD_EP_Receive>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d60:	7dfb      	ldrb	r3, [r7, #23]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 f832 	bl	8010dcc <USBD_Get_USB_Status>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3718      	adds	r7, #24
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b082      	sub	sp, #8
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
 8010d7e:	460b      	mov	r3, r1
 8010d80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010d88:	78fa      	ldrb	r2, [r7, #3]
 8010d8a:	4611      	mov	r1, r2
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7f9 fec4 	bl	800ab1a <HAL_PCD_EP_GetRxCount>
 8010d92:	4603      	mov	r3, r0
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010da4:	4b03      	ldr	r3, [pc, #12]	; (8010db4 <USBD_static_malloc+0x18>)
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	370c      	adds	r7, #12
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr
 8010db2:	bf00      	nop
 8010db4:	20000264 	.word	0x20000264

08010db8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]

}
 8010dc0:	bf00      	nop
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b085      	sub	sp, #20
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010dda:	79fb      	ldrb	r3, [r7, #7]
 8010ddc:	2b03      	cmp	r3, #3
 8010dde:	d817      	bhi.n	8010e10 <USBD_Get_USB_Status+0x44>
 8010de0:	a201      	add	r2, pc, #4	; (adr r2, 8010de8 <USBD_Get_USB_Status+0x1c>)
 8010de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de6:	bf00      	nop
 8010de8:	08010df9 	.word	0x08010df9
 8010dec:	08010dff 	.word	0x08010dff
 8010df0:	08010e05 	.word	0x08010e05
 8010df4:	08010e0b 	.word	0x08010e0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8010dfc:	e00b      	b.n	8010e16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010dfe:	2303      	movs	r3, #3
 8010e00:	73fb      	strb	r3, [r7, #15]
    break;
 8010e02:	e008      	b.n	8010e16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e04:	2301      	movs	r3, #1
 8010e06:	73fb      	strb	r3, [r7, #15]
    break;
 8010e08:	e005      	b.n	8010e16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e0a:	2303      	movs	r3, #3
 8010e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8010e0e:	e002      	b.n	8010e16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e10:	2303      	movs	r3, #3
 8010e12:	73fb      	strb	r3, [r7, #15]
    break;
 8010e14:	bf00      	nop
  }
  return usb_status;
 8010e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3714      	adds	r7, #20
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr

08010e24 <__assert_func>:
 8010e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e26:	4614      	mov	r4, r2
 8010e28:	461a      	mov	r2, r3
 8010e2a:	4b09      	ldr	r3, [pc, #36]	; (8010e50 <__assert_func+0x2c>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	4605      	mov	r5, r0
 8010e30:	68d8      	ldr	r0, [r3, #12]
 8010e32:	b14c      	cbz	r4, 8010e48 <__assert_func+0x24>
 8010e34:	4b07      	ldr	r3, [pc, #28]	; (8010e54 <__assert_func+0x30>)
 8010e36:	9100      	str	r1, [sp, #0]
 8010e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e3c:	4906      	ldr	r1, [pc, #24]	; (8010e58 <__assert_func+0x34>)
 8010e3e:	462b      	mov	r3, r5
 8010e40:	f000 f814 	bl	8010e6c <fiprintf>
 8010e44:	f000 fdf4 	bl	8011a30 <abort>
 8010e48:	4b04      	ldr	r3, [pc, #16]	; (8010e5c <__assert_func+0x38>)
 8010e4a:	461c      	mov	r4, r3
 8010e4c:	e7f3      	b.n	8010e36 <__assert_func+0x12>
 8010e4e:	bf00      	nop
 8010e50:	20000180 	.word	0x20000180
 8010e54:	080132b8 	.word	0x080132b8
 8010e58:	080132c5 	.word	0x080132c5
 8010e5c:	080132f3 	.word	0x080132f3

08010e60 <__errno>:
 8010e60:	4b01      	ldr	r3, [pc, #4]	; (8010e68 <__errno+0x8>)
 8010e62:	6818      	ldr	r0, [r3, #0]
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop
 8010e68:	20000180 	.word	0x20000180

08010e6c <fiprintf>:
 8010e6c:	b40e      	push	{r1, r2, r3}
 8010e6e:	b503      	push	{r0, r1, lr}
 8010e70:	4601      	mov	r1, r0
 8010e72:	ab03      	add	r3, sp, #12
 8010e74:	4805      	ldr	r0, [pc, #20]	; (8010e8c <fiprintf+0x20>)
 8010e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e7a:	6800      	ldr	r0, [r0, #0]
 8010e7c:	9301      	str	r3, [sp, #4]
 8010e7e:	f000 f933 	bl	80110e8 <_vfiprintf_r>
 8010e82:	b002      	add	sp, #8
 8010e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e88:	b003      	add	sp, #12
 8010e8a:	4770      	bx	lr
 8010e8c:	20000180 	.word	0x20000180

08010e90 <__libc_init_array>:
 8010e90:	b570      	push	{r4, r5, r6, lr}
 8010e92:	4d0d      	ldr	r5, [pc, #52]	; (8010ec8 <__libc_init_array+0x38>)
 8010e94:	4c0d      	ldr	r4, [pc, #52]	; (8010ecc <__libc_init_array+0x3c>)
 8010e96:	1b64      	subs	r4, r4, r5
 8010e98:	10a4      	asrs	r4, r4, #2
 8010e9a:	2600      	movs	r6, #0
 8010e9c:	42a6      	cmp	r6, r4
 8010e9e:	d109      	bne.n	8010eb4 <__libc_init_array+0x24>
 8010ea0:	4d0b      	ldr	r5, [pc, #44]	; (8010ed0 <__libc_init_array+0x40>)
 8010ea2:	4c0c      	ldr	r4, [pc, #48]	; (8010ed4 <__libc_init_array+0x44>)
 8010ea4:	f001 fa8a 	bl	80123bc <_init>
 8010ea8:	1b64      	subs	r4, r4, r5
 8010eaa:	10a4      	asrs	r4, r4, #2
 8010eac:	2600      	movs	r6, #0
 8010eae:	42a6      	cmp	r6, r4
 8010eb0:	d105      	bne.n	8010ebe <__libc_init_array+0x2e>
 8010eb2:	bd70      	pop	{r4, r5, r6, pc}
 8010eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eb8:	4798      	blx	r3
 8010eba:	3601      	adds	r6, #1
 8010ebc:	e7ee      	b.n	8010e9c <__libc_init_array+0xc>
 8010ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ec2:	4798      	blx	r3
 8010ec4:	3601      	adds	r6, #1
 8010ec6:	e7f2      	b.n	8010eae <__libc_init_array+0x1e>
 8010ec8:	08013394 	.word	0x08013394
 8010ecc:	08013394 	.word	0x08013394
 8010ed0:	08013394 	.word	0x08013394
 8010ed4:	08013398 	.word	0x08013398

08010ed8 <malloc>:
 8010ed8:	4b02      	ldr	r3, [pc, #8]	; (8010ee4 <malloc+0xc>)
 8010eda:	4601      	mov	r1, r0
 8010edc:	6818      	ldr	r0, [r3, #0]
 8010ede:	f000 b87f 	b.w	8010fe0 <_malloc_r>
 8010ee2:	bf00      	nop
 8010ee4:	20000180 	.word	0x20000180

08010ee8 <free>:
 8010ee8:	4b02      	ldr	r3, [pc, #8]	; (8010ef4 <free+0xc>)
 8010eea:	4601      	mov	r1, r0
 8010eec:	6818      	ldr	r0, [r3, #0]
 8010eee:	f000 b827 	b.w	8010f40 <_free_r>
 8010ef2:	bf00      	nop
 8010ef4:	20000180 	.word	0x20000180

08010ef8 <memcmp>:
 8010ef8:	b530      	push	{r4, r5, lr}
 8010efa:	3901      	subs	r1, #1
 8010efc:	2400      	movs	r4, #0
 8010efe:	42a2      	cmp	r2, r4
 8010f00:	d101      	bne.n	8010f06 <memcmp+0xe>
 8010f02:	2000      	movs	r0, #0
 8010f04:	e005      	b.n	8010f12 <memcmp+0x1a>
 8010f06:	5d03      	ldrb	r3, [r0, r4]
 8010f08:	3401      	adds	r4, #1
 8010f0a:	5d0d      	ldrb	r5, [r1, r4]
 8010f0c:	42ab      	cmp	r3, r5
 8010f0e:	d0f6      	beq.n	8010efe <memcmp+0x6>
 8010f10:	1b58      	subs	r0, r3, r5
 8010f12:	bd30      	pop	{r4, r5, pc}

08010f14 <memcpy>:
 8010f14:	440a      	add	r2, r1
 8010f16:	4291      	cmp	r1, r2
 8010f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f1c:	d100      	bne.n	8010f20 <memcpy+0xc>
 8010f1e:	4770      	bx	lr
 8010f20:	b510      	push	{r4, lr}
 8010f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f2a:	4291      	cmp	r1, r2
 8010f2c:	d1f9      	bne.n	8010f22 <memcpy+0xe>
 8010f2e:	bd10      	pop	{r4, pc}

08010f30 <memset>:
 8010f30:	4402      	add	r2, r0
 8010f32:	4603      	mov	r3, r0
 8010f34:	4293      	cmp	r3, r2
 8010f36:	d100      	bne.n	8010f3a <memset+0xa>
 8010f38:	4770      	bx	lr
 8010f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8010f3e:	e7f9      	b.n	8010f34 <memset+0x4>

08010f40 <_free_r>:
 8010f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f42:	2900      	cmp	r1, #0
 8010f44:	d048      	beq.n	8010fd8 <_free_r+0x98>
 8010f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f4a:	9001      	str	r0, [sp, #4]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8010f52:	bfb8      	it	lt
 8010f54:	18e4      	addlt	r4, r4, r3
 8010f56:	f000 ffab 	bl	8011eb0 <__malloc_lock>
 8010f5a:	4a20      	ldr	r2, [pc, #128]	; (8010fdc <_free_r+0x9c>)
 8010f5c:	9801      	ldr	r0, [sp, #4]
 8010f5e:	6813      	ldr	r3, [r2, #0]
 8010f60:	4615      	mov	r5, r2
 8010f62:	b933      	cbnz	r3, 8010f72 <_free_r+0x32>
 8010f64:	6063      	str	r3, [r4, #4]
 8010f66:	6014      	str	r4, [r2, #0]
 8010f68:	b003      	add	sp, #12
 8010f6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f6e:	f000 bfa5 	b.w	8011ebc <__malloc_unlock>
 8010f72:	42a3      	cmp	r3, r4
 8010f74:	d90b      	bls.n	8010f8e <_free_r+0x4e>
 8010f76:	6821      	ldr	r1, [r4, #0]
 8010f78:	1862      	adds	r2, r4, r1
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	bf04      	itt	eq
 8010f7e:	681a      	ldreq	r2, [r3, #0]
 8010f80:	685b      	ldreq	r3, [r3, #4]
 8010f82:	6063      	str	r3, [r4, #4]
 8010f84:	bf04      	itt	eq
 8010f86:	1852      	addeq	r2, r2, r1
 8010f88:	6022      	streq	r2, [r4, #0]
 8010f8a:	602c      	str	r4, [r5, #0]
 8010f8c:	e7ec      	b.n	8010f68 <_free_r+0x28>
 8010f8e:	461a      	mov	r2, r3
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	b10b      	cbz	r3, 8010f98 <_free_r+0x58>
 8010f94:	42a3      	cmp	r3, r4
 8010f96:	d9fa      	bls.n	8010f8e <_free_r+0x4e>
 8010f98:	6811      	ldr	r1, [r2, #0]
 8010f9a:	1855      	adds	r5, r2, r1
 8010f9c:	42a5      	cmp	r5, r4
 8010f9e:	d10b      	bne.n	8010fb8 <_free_r+0x78>
 8010fa0:	6824      	ldr	r4, [r4, #0]
 8010fa2:	4421      	add	r1, r4
 8010fa4:	1854      	adds	r4, r2, r1
 8010fa6:	42a3      	cmp	r3, r4
 8010fa8:	6011      	str	r1, [r2, #0]
 8010faa:	d1dd      	bne.n	8010f68 <_free_r+0x28>
 8010fac:	681c      	ldr	r4, [r3, #0]
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	6053      	str	r3, [r2, #4]
 8010fb2:	4421      	add	r1, r4
 8010fb4:	6011      	str	r1, [r2, #0]
 8010fb6:	e7d7      	b.n	8010f68 <_free_r+0x28>
 8010fb8:	d902      	bls.n	8010fc0 <_free_r+0x80>
 8010fba:	230c      	movs	r3, #12
 8010fbc:	6003      	str	r3, [r0, #0]
 8010fbe:	e7d3      	b.n	8010f68 <_free_r+0x28>
 8010fc0:	6825      	ldr	r5, [r4, #0]
 8010fc2:	1961      	adds	r1, r4, r5
 8010fc4:	428b      	cmp	r3, r1
 8010fc6:	bf04      	itt	eq
 8010fc8:	6819      	ldreq	r1, [r3, #0]
 8010fca:	685b      	ldreq	r3, [r3, #4]
 8010fcc:	6063      	str	r3, [r4, #4]
 8010fce:	bf04      	itt	eq
 8010fd0:	1949      	addeq	r1, r1, r5
 8010fd2:	6021      	streq	r1, [r4, #0]
 8010fd4:	6054      	str	r4, [r2, #4]
 8010fd6:	e7c7      	b.n	8010f68 <_free_r+0x28>
 8010fd8:	b003      	add	sp, #12
 8010fda:	bd30      	pop	{r4, r5, pc}
 8010fdc:	20000484 	.word	0x20000484

08010fe0 <_malloc_r>:
 8010fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fe2:	1ccd      	adds	r5, r1, #3
 8010fe4:	f025 0503 	bic.w	r5, r5, #3
 8010fe8:	3508      	adds	r5, #8
 8010fea:	2d0c      	cmp	r5, #12
 8010fec:	bf38      	it	cc
 8010fee:	250c      	movcc	r5, #12
 8010ff0:	2d00      	cmp	r5, #0
 8010ff2:	4606      	mov	r6, r0
 8010ff4:	db01      	blt.n	8010ffa <_malloc_r+0x1a>
 8010ff6:	42a9      	cmp	r1, r5
 8010ff8:	d903      	bls.n	8011002 <_malloc_r+0x22>
 8010ffa:	230c      	movs	r3, #12
 8010ffc:	6033      	str	r3, [r6, #0]
 8010ffe:	2000      	movs	r0, #0
 8011000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011002:	f000 ff55 	bl	8011eb0 <__malloc_lock>
 8011006:	4921      	ldr	r1, [pc, #132]	; (801108c <_malloc_r+0xac>)
 8011008:	680a      	ldr	r2, [r1, #0]
 801100a:	4614      	mov	r4, r2
 801100c:	b99c      	cbnz	r4, 8011036 <_malloc_r+0x56>
 801100e:	4f20      	ldr	r7, [pc, #128]	; (8011090 <_malloc_r+0xb0>)
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	b923      	cbnz	r3, 801101e <_malloc_r+0x3e>
 8011014:	4621      	mov	r1, r4
 8011016:	4630      	mov	r0, r6
 8011018:	f000 fbb8 	bl	801178c <_sbrk_r>
 801101c:	6038      	str	r0, [r7, #0]
 801101e:	4629      	mov	r1, r5
 8011020:	4630      	mov	r0, r6
 8011022:	f000 fbb3 	bl	801178c <_sbrk_r>
 8011026:	1c43      	adds	r3, r0, #1
 8011028:	d123      	bne.n	8011072 <_malloc_r+0x92>
 801102a:	230c      	movs	r3, #12
 801102c:	6033      	str	r3, [r6, #0]
 801102e:	4630      	mov	r0, r6
 8011030:	f000 ff44 	bl	8011ebc <__malloc_unlock>
 8011034:	e7e3      	b.n	8010ffe <_malloc_r+0x1e>
 8011036:	6823      	ldr	r3, [r4, #0]
 8011038:	1b5b      	subs	r3, r3, r5
 801103a:	d417      	bmi.n	801106c <_malloc_r+0x8c>
 801103c:	2b0b      	cmp	r3, #11
 801103e:	d903      	bls.n	8011048 <_malloc_r+0x68>
 8011040:	6023      	str	r3, [r4, #0]
 8011042:	441c      	add	r4, r3
 8011044:	6025      	str	r5, [r4, #0]
 8011046:	e004      	b.n	8011052 <_malloc_r+0x72>
 8011048:	6863      	ldr	r3, [r4, #4]
 801104a:	42a2      	cmp	r2, r4
 801104c:	bf0c      	ite	eq
 801104e:	600b      	streq	r3, [r1, #0]
 8011050:	6053      	strne	r3, [r2, #4]
 8011052:	4630      	mov	r0, r6
 8011054:	f000 ff32 	bl	8011ebc <__malloc_unlock>
 8011058:	f104 000b 	add.w	r0, r4, #11
 801105c:	1d23      	adds	r3, r4, #4
 801105e:	f020 0007 	bic.w	r0, r0, #7
 8011062:	1ac2      	subs	r2, r0, r3
 8011064:	d0cc      	beq.n	8011000 <_malloc_r+0x20>
 8011066:	1a1b      	subs	r3, r3, r0
 8011068:	50a3      	str	r3, [r4, r2]
 801106a:	e7c9      	b.n	8011000 <_malloc_r+0x20>
 801106c:	4622      	mov	r2, r4
 801106e:	6864      	ldr	r4, [r4, #4]
 8011070:	e7cc      	b.n	801100c <_malloc_r+0x2c>
 8011072:	1cc4      	adds	r4, r0, #3
 8011074:	f024 0403 	bic.w	r4, r4, #3
 8011078:	42a0      	cmp	r0, r4
 801107a:	d0e3      	beq.n	8011044 <_malloc_r+0x64>
 801107c:	1a21      	subs	r1, r4, r0
 801107e:	4630      	mov	r0, r6
 8011080:	f000 fb84 	bl	801178c <_sbrk_r>
 8011084:	3001      	adds	r0, #1
 8011086:	d1dd      	bne.n	8011044 <_malloc_r+0x64>
 8011088:	e7cf      	b.n	801102a <_malloc_r+0x4a>
 801108a:	bf00      	nop
 801108c:	20000484 	.word	0x20000484
 8011090:	20000488 	.word	0x20000488

08011094 <__sfputc_r>:
 8011094:	6893      	ldr	r3, [r2, #8]
 8011096:	3b01      	subs	r3, #1
 8011098:	2b00      	cmp	r3, #0
 801109a:	b410      	push	{r4}
 801109c:	6093      	str	r3, [r2, #8]
 801109e:	da08      	bge.n	80110b2 <__sfputc_r+0x1e>
 80110a0:	6994      	ldr	r4, [r2, #24]
 80110a2:	42a3      	cmp	r3, r4
 80110a4:	db01      	blt.n	80110aa <__sfputc_r+0x16>
 80110a6:	290a      	cmp	r1, #10
 80110a8:	d103      	bne.n	80110b2 <__sfputc_r+0x1e>
 80110aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110ae:	f000 bbff 	b.w	80118b0 <__swbuf_r>
 80110b2:	6813      	ldr	r3, [r2, #0]
 80110b4:	1c58      	adds	r0, r3, #1
 80110b6:	6010      	str	r0, [r2, #0]
 80110b8:	7019      	strb	r1, [r3, #0]
 80110ba:	4608      	mov	r0, r1
 80110bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110c0:	4770      	bx	lr

080110c2 <__sfputs_r>:
 80110c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110c4:	4606      	mov	r6, r0
 80110c6:	460f      	mov	r7, r1
 80110c8:	4614      	mov	r4, r2
 80110ca:	18d5      	adds	r5, r2, r3
 80110cc:	42ac      	cmp	r4, r5
 80110ce:	d101      	bne.n	80110d4 <__sfputs_r+0x12>
 80110d0:	2000      	movs	r0, #0
 80110d2:	e007      	b.n	80110e4 <__sfputs_r+0x22>
 80110d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110d8:	463a      	mov	r2, r7
 80110da:	4630      	mov	r0, r6
 80110dc:	f7ff ffda 	bl	8011094 <__sfputc_r>
 80110e0:	1c43      	adds	r3, r0, #1
 80110e2:	d1f3      	bne.n	80110cc <__sfputs_r+0xa>
 80110e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110e8 <_vfiprintf_r>:
 80110e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ec:	460d      	mov	r5, r1
 80110ee:	b09d      	sub	sp, #116	; 0x74
 80110f0:	4614      	mov	r4, r2
 80110f2:	4698      	mov	r8, r3
 80110f4:	4606      	mov	r6, r0
 80110f6:	b118      	cbz	r0, 8011100 <_vfiprintf_r+0x18>
 80110f8:	6983      	ldr	r3, [r0, #24]
 80110fa:	b90b      	cbnz	r3, 8011100 <_vfiprintf_r+0x18>
 80110fc:	f000 fdba 	bl	8011c74 <__sinit>
 8011100:	4b89      	ldr	r3, [pc, #548]	; (8011328 <_vfiprintf_r+0x240>)
 8011102:	429d      	cmp	r5, r3
 8011104:	d11b      	bne.n	801113e <_vfiprintf_r+0x56>
 8011106:	6875      	ldr	r5, [r6, #4]
 8011108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801110a:	07d9      	lsls	r1, r3, #31
 801110c:	d405      	bmi.n	801111a <_vfiprintf_r+0x32>
 801110e:	89ab      	ldrh	r3, [r5, #12]
 8011110:	059a      	lsls	r2, r3, #22
 8011112:	d402      	bmi.n	801111a <_vfiprintf_r+0x32>
 8011114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011116:	f000 fe4b 	bl	8011db0 <__retarget_lock_acquire_recursive>
 801111a:	89ab      	ldrh	r3, [r5, #12]
 801111c:	071b      	lsls	r3, r3, #28
 801111e:	d501      	bpl.n	8011124 <_vfiprintf_r+0x3c>
 8011120:	692b      	ldr	r3, [r5, #16]
 8011122:	b9eb      	cbnz	r3, 8011160 <_vfiprintf_r+0x78>
 8011124:	4629      	mov	r1, r5
 8011126:	4630      	mov	r0, r6
 8011128:	f000 fc14 	bl	8011954 <__swsetup_r>
 801112c:	b1c0      	cbz	r0, 8011160 <_vfiprintf_r+0x78>
 801112e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011130:	07dc      	lsls	r4, r3, #31
 8011132:	d50e      	bpl.n	8011152 <_vfiprintf_r+0x6a>
 8011134:	f04f 30ff 	mov.w	r0, #4294967295
 8011138:	b01d      	add	sp, #116	; 0x74
 801113a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801113e:	4b7b      	ldr	r3, [pc, #492]	; (801132c <_vfiprintf_r+0x244>)
 8011140:	429d      	cmp	r5, r3
 8011142:	d101      	bne.n	8011148 <_vfiprintf_r+0x60>
 8011144:	68b5      	ldr	r5, [r6, #8]
 8011146:	e7df      	b.n	8011108 <_vfiprintf_r+0x20>
 8011148:	4b79      	ldr	r3, [pc, #484]	; (8011330 <_vfiprintf_r+0x248>)
 801114a:	429d      	cmp	r5, r3
 801114c:	bf08      	it	eq
 801114e:	68f5      	ldreq	r5, [r6, #12]
 8011150:	e7da      	b.n	8011108 <_vfiprintf_r+0x20>
 8011152:	89ab      	ldrh	r3, [r5, #12]
 8011154:	0598      	lsls	r0, r3, #22
 8011156:	d4ed      	bmi.n	8011134 <_vfiprintf_r+0x4c>
 8011158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801115a:	f000 fe2a 	bl	8011db2 <__retarget_lock_release_recursive>
 801115e:	e7e9      	b.n	8011134 <_vfiprintf_r+0x4c>
 8011160:	2300      	movs	r3, #0
 8011162:	9309      	str	r3, [sp, #36]	; 0x24
 8011164:	2320      	movs	r3, #32
 8011166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801116a:	f8cd 800c 	str.w	r8, [sp, #12]
 801116e:	2330      	movs	r3, #48	; 0x30
 8011170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011334 <_vfiprintf_r+0x24c>
 8011174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011178:	f04f 0901 	mov.w	r9, #1
 801117c:	4623      	mov	r3, r4
 801117e:	469a      	mov	sl, r3
 8011180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011184:	b10a      	cbz	r2, 801118a <_vfiprintf_r+0xa2>
 8011186:	2a25      	cmp	r2, #37	; 0x25
 8011188:	d1f9      	bne.n	801117e <_vfiprintf_r+0x96>
 801118a:	ebba 0b04 	subs.w	fp, sl, r4
 801118e:	d00b      	beq.n	80111a8 <_vfiprintf_r+0xc0>
 8011190:	465b      	mov	r3, fp
 8011192:	4622      	mov	r2, r4
 8011194:	4629      	mov	r1, r5
 8011196:	4630      	mov	r0, r6
 8011198:	f7ff ff93 	bl	80110c2 <__sfputs_r>
 801119c:	3001      	adds	r0, #1
 801119e:	f000 80aa 	beq.w	80112f6 <_vfiprintf_r+0x20e>
 80111a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111a4:	445a      	add	r2, fp
 80111a6:	9209      	str	r2, [sp, #36]	; 0x24
 80111a8:	f89a 3000 	ldrb.w	r3, [sl]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f000 80a2 	beq.w	80112f6 <_vfiprintf_r+0x20e>
 80111b2:	2300      	movs	r3, #0
 80111b4:	f04f 32ff 	mov.w	r2, #4294967295
 80111b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111bc:	f10a 0a01 	add.w	sl, sl, #1
 80111c0:	9304      	str	r3, [sp, #16]
 80111c2:	9307      	str	r3, [sp, #28]
 80111c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111c8:	931a      	str	r3, [sp, #104]	; 0x68
 80111ca:	4654      	mov	r4, sl
 80111cc:	2205      	movs	r2, #5
 80111ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d2:	4858      	ldr	r0, [pc, #352]	; (8011334 <_vfiprintf_r+0x24c>)
 80111d4:	f7ef f824 	bl	8000220 <memchr>
 80111d8:	9a04      	ldr	r2, [sp, #16]
 80111da:	b9d8      	cbnz	r0, 8011214 <_vfiprintf_r+0x12c>
 80111dc:	06d1      	lsls	r1, r2, #27
 80111de:	bf44      	itt	mi
 80111e0:	2320      	movmi	r3, #32
 80111e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111e6:	0713      	lsls	r3, r2, #28
 80111e8:	bf44      	itt	mi
 80111ea:	232b      	movmi	r3, #43	; 0x2b
 80111ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111f0:	f89a 3000 	ldrb.w	r3, [sl]
 80111f4:	2b2a      	cmp	r3, #42	; 0x2a
 80111f6:	d015      	beq.n	8011224 <_vfiprintf_r+0x13c>
 80111f8:	9a07      	ldr	r2, [sp, #28]
 80111fa:	4654      	mov	r4, sl
 80111fc:	2000      	movs	r0, #0
 80111fe:	f04f 0c0a 	mov.w	ip, #10
 8011202:	4621      	mov	r1, r4
 8011204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011208:	3b30      	subs	r3, #48	; 0x30
 801120a:	2b09      	cmp	r3, #9
 801120c:	d94e      	bls.n	80112ac <_vfiprintf_r+0x1c4>
 801120e:	b1b0      	cbz	r0, 801123e <_vfiprintf_r+0x156>
 8011210:	9207      	str	r2, [sp, #28]
 8011212:	e014      	b.n	801123e <_vfiprintf_r+0x156>
 8011214:	eba0 0308 	sub.w	r3, r0, r8
 8011218:	fa09 f303 	lsl.w	r3, r9, r3
 801121c:	4313      	orrs	r3, r2
 801121e:	9304      	str	r3, [sp, #16]
 8011220:	46a2      	mov	sl, r4
 8011222:	e7d2      	b.n	80111ca <_vfiprintf_r+0xe2>
 8011224:	9b03      	ldr	r3, [sp, #12]
 8011226:	1d19      	adds	r1, r3, #4
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	9103      	str	r1, [sp, #12]
 801122c:	2b00      	cmp	r3, #0
 801122e:	bfbb      	ittet	lt
 8011230:	425b      	neglt	r3, r3
 8011232:	f042 0202 	orrlt.w	r2, r2, #2
 8011236:	9307      	strge	r3, [sp, #28]
 8011238:	9307      	strlt	r3, [sp, #28]
 801123a:	bfb8      	it	lt
 801123c:	9204      	strlt	r2, [sp, #16]
 801123e:	7823      	ldrb	r3, [r4, #0]
 8011240:	2b2e      	cmp	r3, #46	; 0x2e
 8011242:	d10c      	bne.n	801125e <_vfiprintf_r+0x176>
 8011244:	7863      	ldrb	r3, [r4, #1]
 8011246:	2b2a      	cmp	r3, #42	; 0x2a
 8011248:	d135      	bne.n	80112b6 <_vfiprintf_r+0x1ce>
 801124a:	9b03      	ldr	r3, [sp, #12]
 801124c:	1d1a      	adds	r2, r3, #4
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	9203      	str	r2, [sp, #12]
 8011252:	2b00      	cmp	r3, #0
 8011254:	bfb8      	it	lt
 8011256:	f04f 33ff 	movlt.w	r3, #4294967295
 801125a:	3402      	adds	r4, #2
 801125c:	9305      	str	r3, [sp, #20]
 801125e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011344 <_vfiprintf_r+0x25c>
 8011262:	7821      	ldrb	r1, [r4, #0]
 8011264:	2203      	movs	r2, #3
 8011266:	4650      	mov	r0, sl
 8011268:	f7ee ffda 	bl	8000220 <memchr>
 801126c:	b140      	cbz	r0, 8011280 <_vfiprintf_r+0x198>
 801126e:	2340      	movs	r3, #64	; 0x40
 8011270:	eba0 000a 	sub.w	r0, r0, sl
 8011274:	fa03 f000 	lsl.w	r0, r3, r0
 8011278:	9b04      	ldr	r3, [sp, #16]
 801127a:	4303      	orrs	r3, r0
 801127c:	3401      	adds	r4, #1
 801127e:	9304      	str	r3, [sp, #16]
 8011280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011284:	482c      	ldr	r0, [pc, #176]	; (8011338 <_vfiprintf_r+0x250>)
 8011286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801128a:	2206      	movs	r2, #6
 801128c:	f7ee ffc8 	bl	8000220 <memchr>
 8011290:	2800      	cmp	r0, #0
 8011292:	d03f      	beq.n	8011314 <_vfiprintf_r+0x22c>
 8011294:	4b29      	ldr	r3, [pc, #164]	; (801133c <_vfiprintf_r+0x254>)
 8011296:	bb1b      	cbnz	r3, 80112e0 <_vfiprintf_r+0x1f8>
 8011298:	9b03      	ldr	r3, [sp, #12]
 801129a:	3307      	adds	r3, #7
 801129c:	f023 0307 	bic.w	r3, r3, #7
 80112a0:	3308      	adds	r3, #8
 80112a2:	9303      	str	r3, [sp, #12]
 80112a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112a6:	443b      	add	r3, r7
 80112a8:	9309      	str	r3, [sp, #36]	; 0x24
 80112aa:	e767      	b.n	801117c <_vfiprintf_r+0x94>
 80112ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80112b0:	460c      	mov	r4, r1
 80112b2:	2001      	movs	r0, #1
 80112b4:	e7a5      	b.n	8011202 <_vfiprintf_r+0x11a>
 80112b6:	2300      	movs	r3, #0
 80112b8:	3401      	adds	r4, #1
 80112ba:	9305      	str	r3, [sp, #20]
 80112bc:	4619      	mov	r1, r3
 80112be:	f04f 0c0a 	mov.w	ip, #10
 80112c2:	4620      	mov	r0, r4
 80112c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112c8:	3a30      	subs	r2, #48	; 0x30
 80112ca:	2a09      	cmp	r2, #9
 80112cc:	d903      	bls.n	80112d6 <_vfiprintf_r+0x1ee>
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d0c5      	beq.n	801125e <_vfiprintf_r+0x176>
 80112d2:	9105      	str	r1, [sp, #20]
 80112d4:	e7c3      	b.n	801125e <_vfiprintf_r+0x176>
 80112d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80112da:	4604      	mov	r4, r0
 80112dc:	2301      	movs	r3, #1
 80112de:	e7f0      	b.n	80112c2 <_vfiprintf_r+0x1da>
 80112e0:	ab03      	add	r3, sp, #12
 80112e2:	9300      	str	r3, [sp, #0]
 80112e4:	462a      	mov	r2, r5
 80112e6:	4b16      	ldr	r3, [pc, #88]	; (8011340 <_vfiprintf_r+0x258>)
 80112e8:	a904      	add	r1, sp, #16
 80112ea:	4630      	mov	r0, r6
 80112ec:	f3af 8000 	nop.w
 80112f0:	4607      	mov	r7, r0
 80112f2:	1c78      	adds	r0, r7, #1
 80112f4:	d1d6      	bne.n	80112a4 <_vfiprintf_r+0x1bc>
 80112f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112f8:	07d9      	lsls	r1, r3, #31
 80112fa:	d405      	bmi.n	8011308 <_vfiprintf_r+0x220>
 80112fc:	89ab      	ldrh	r3, [r5, #12]
 80112fe:	059a      	lsls	r2, r3, #22
 8011300:	d402      	bmi.n	8011308 <_vfiprintf_r+0x220>
 8011302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011304:	f000 fd55 	bl	8011db2 <__retarget_lock_release_recursive>
 8011308:	89ab      	ldrh	r3, [r5, #12]
 801130a:	065b      	lsls	r3, r3, #25
 801130c:	f53f af12 	bmi.w	8011134 <_vfiprintf_r+0x4c>
 8011310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011312:	e711      	b.n	8011138 <_vfiprintf_r+0x50>
 8011314:	ab03      	add	r3, sp, #12
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	462a      	mov	r2, r5
 801131a:	4b09      	ldr	r3, [pc, #36]	; (8011340 <_vfiprintf_r+0x258>)
 801131c:	a904      	add	r1, sp, #16
 801131e:	4630      	mov	r0, r6
 8011320:	f000 f880 	bl	8011424 <_printf_i>
 8011324:	e7e4      	b.n	80112f0 <_vfiprintf_r+0x208>
 8011326:	bf00      	nop
 8011328:	0801334c 	.word	0x0801334c
 801132c:	0801336c 	.word	0x0801336c
 8011330:	0801332c 	.word	0x0801332c
 8011334:	080132f8 	.word	0x080132f8
 8011338:	08013302 	.word	0x08013302
 801133c:	00000000 	.word	0x00000000
 8011340:	080110c3 	.word	0x080110c3
 8011344:	080132fe 	.word	0x080132fe

08011348 <_printf_common>:
 8011348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801134c:	4616      	mov	r6, r2
 801134e:	4699      	mov	r9, r3
 8011350:	688a      	ldr	r2, [r1, #8]
 8011352:	690b      	ldr	r3, [r1, #16]
 8011354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011358:	4293      	cmp	r3, r2
 801135a:	bfb8      	it	lt
 801135c:	4613      	movlt	r3, r2
 801135e:	6033      	str	r3, [r6, #0]
 8011360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011364:	4607      	mov	r7, r0
 8011366:	460c      	mov	r4, r1
 8011368:	b10a      	cbz	r2, 801136e <_printf_common+0x26>
 801136a:	3301      	adds	r3, #1
 801136c:	6033      	str	r3, [r6, #0]
 801136e:	6823      	ldr	r3, [r4, #0]
 8011370:	0699      	lsls	r1, r3, #26
 8011372:	bf42      	ittt	mi
 8011374:	6833      	ldrmi	r3, [r6, #0]
 8011376:	3302      	addmi	r3, #2
 8011378:	6033      	strmi	r3, [r6, #0]
 801137a:	6825      	ldr	r5, [r4, #0]
 801137c:	f015 0506 	ands.w	r5, r5, #6
 8011380:	d106      	bne.n	8011390 <_printf_common+0x48>
 8011382:	f104 0a19 	add.w	sl, r4, #25
 8011386:	68e3      	ldr	r3, [r4, #12]
 8011388:	6832      	ldr	r2, [r6, #0]
 801138a:	1a9b      	subs	r3, r3, r2
 801138c:	42ab      	cmp	r3, r5
 801138e:	dc26      	bgt.n	80113de <_printf_common+0x96>
 8011390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011394:	1e13      	subs	r3, r2, #0
 8011396:	6822      	ldr	r2, [r4, #0]
 8011398:	bf18      	it	ne
 801139a:	2301      	movne	r3, #1
 801139c:	0692      	lsls	r2, r2, #26
 801139e:	d42b      	bmi.n	80113f8 <_printf_common+0xb0>
 80113a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80113a4:	4649      	mov	r1, r9
 80113a6:	4638      	mov	r0, r7
 80113a8:	47c0      	blx	r8
 80113aa:	3001      	adds	r0, #1
 80113ac:	d01e      	beq.n	80113ec <_printf_common+0xa4>
 80113ae:	6823      	ldr	r3, [r4, #0]
 80113b0:	68e5      	ldr	r5, [r4, #12]
 80113b2:	6832      	ldr	r2, [r6, #0]
 80113b4:	f003 0306 	and.w	r3, r3, #6
 80113b8:	2b04      	cmp	r3, #4
 80113ba:	bf08      	it	eq
 80113bc:	1aad      	subeq	r5, r5, r2
 80113be:	68a3      	ldr	r3, [r4, #8]
 80113c0:	6922      	ldr	r2, [r4, #16]
 80113c2:	bf0c      	ite	eq
 80113c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113c8:	2500      	movne	r5, #0
 80113ca:	4293      	cmp	r3, r2
 80113cc:	bfc4      	itt	gt
 80113ce:	1a9b      	subgt	r3, r3, r2
 80113d0:	18ed      	addgt	r5, r5, r3
 80113d2:	2600      	movs	r6, #0
 80113d4:	341a      	adds	r4, #26
 80113d6:	42b5      	cmp	r5, r6
 80113d8:	d11a      	bne.n	8011410 <_printf_common+0xc8>
 80113da:	2000      	movs	r0, #0
 80113dc:	e008      	b.n	80113f0 <_printf_common+0xa8>
 80113de:	2301      	movs	r3, #1
 80113e0:	4652      	mov	r2, sl
 80113e2:	4649      	mov	r1, r9
 80113e4:	4638      	mov	r0, r7
 80113e6:	47c0      	blx	r8
 80113e8:	3001      	adds	r0, #1
 80113ea:	d103      	bne.n	80113f4 <_printf_common+0xac>
 80113ec:	f04f 30ff 	mov.w	r0, #4294967295
 80113f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113f4:	3501      	adds	r5, #1
 80113f6:	e7c6      	b.n	8011386 <_printf_common+0x3e>
 80113f8:	18e1      	adds	r1, r4, r3
 80113fa:	1c5a      	adds	r2, r3, #1
 80113fc:	2030      	movs	r0, #48	; 0x30
 80113fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011402:	4422      	add	r2, r4
 8011404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801140c:	3302      	adds	r3, #2
 801140e:	e7c7      	b.n	80113a0 <_printf_common+0x58>
 8011410:	2301      	movs	r3, #1
 8011412:	4622      	mov	r2, r4
 8011414:	4649      	mov	r1, r9
 8011416:	4638      	mov	r0, r7
 8011418:	47c0      	blx	r8
 801141a:	3001      	adds	r0, #1
 801141c:	d0e6      	beq.n	80113ec <_printf_common+0xa4>
 801141e:	3601      	adds	r6, #1
 8011420:	e7d9      	b.n	80113d6 <_printf_common+0x8e>
	...

08011424 <_printf_i>:
 8011424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011428:	460c      	mov	r4, r1
 801142a:	4691      	mov	r9, r2
 801142c:	7e27      	ldrb	r7, [r4, #24]
 801142e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011430:	2f78      	cmp	r7, #120	; 0x78
 8011432:	4680      	mov	r8, r0
 8011434:	469a      	mov	sl, r3
 8011436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801143a:	d807      	bhi.n	801144c <_printf_i+0x28>
 801143c:	2f62      	cmp	r7, #98	; 0x62
 801143e:	d80a      	bhi.n	8011456 <_printf_i+0x32>
 8011440:	2f00      	cmp	r7, #0
 8011442:	f000 80d8 	beq.w	80115f6 <_printf_i+0x1d2>
 8011446:	2f58      	cmp	r7, #88	; 0x58
 8011448:	f000 80a3 	beq.w	8011592 <_printf_i+0x16e>
 801144c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011454:	e03a      	b.n	80114cc <_printf_i+0xa8>
 8011456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801145a:	2b15      	cmp	r3, #21
 801145c:	d8f6      	bhi.n	801144c <_printf_i+0x28>
 801145e:	a001      	add	r0, pc, #4	; (adr r0, 8011464 <_printf_i+0x40>)
 8011460:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011464:	080114bd 	.word	0x080114bd
 8011468:	080114d1 	.word	0x080114d1
 801146c:	0801144d 	.word	0x0801144d
 8011470:	0801144d 	.word	0x0801144d
 8011474:	0801144d 	.word	0x0801144d
 8011478:	0801144d 	.word	0x0801144d
 801147c:	080114d1 	.word	0x080114d1
 8011480:	0801144d 	.word	0x0801144d
 8011484:	0801144d 	.word	0x0801144d
 8011488:	0801144d 	.word	0x0801144d
 801148c:	0801144d 	.word	0x0801144d
 8011490:	080115dd 	.word	0x080115dd
 8011494:	08011501 	.word	0x08011501
 8011498:	080115bf 	.word	0x080115bf
 801149c:	0801144d 	.word	0x0801144d
 80114a0:	0801144d 	.word	0x0801144d
 80114a4:	080115ff 	.word	0x080115ff
 80114a8:	0801144d 	.word	0x0801144d
 80114ac:	08011501 	.word	0x08011501
 80114b0:	0801144d 	.word	0x0801144d
 80114b4:	0801144d 	.word	0x0801144d
 80114b8:	080115c7 	.word	0x080115c7
 80114bc:	680b      	ldr	r3, [r1, #0]
 80114be:	1d1a      	adds	r2, r3, #4
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	600a      	str	r2, [r1, #0]
 80114c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80114c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114cc:	2301      	movs	r3, #1
 80114ce:	e0a3      	b.n	8011618 <_printf_i+0x1f4>
 80114d0:	6825      	ldr	r5, [r4, #0]
 80114d2:	6808      	ldr	r0, [r1, #0]
 80114d4:	062e      	lsls	r6, r5, #24
 80114d6:	f100 0304 	add.w	r3, r0, #4
 80114da:	d50a      	bpl.n	80114f2 <_printf_i+0xce>
 80114dc:	6805      	ldr	r5, [r0, #0]
 80114de:	600b      	str	r3, [r1, #0]
 80114e0:	2d00      	cmp	r5, #0
 80114e2:	da03      	bge.n	80114ec <_printf_i+0xc8>
 80114e4:	232d      	movs	r3, #45	; 0x2d
 80114e6:	426d      	negs	r5, r5
 80114e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114ec:	485e      	ldr	r0, [pc, #376]	; (8011668 <_printf_i+0x244>)
 80114ee:	230a      	movs	r3, #10
 80114f0:	e019      	b.n	8011526 <_printf_i+0x102>
 80114f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80114f6:	6805      	ldr	r5, [r0, #0]
 80114f8:	600b      	str	r3, [r1, #0]
 80114fa:	bf18      	it	ne
 80114fc:	b22d      	sxthne	r5, r5
 80114fe:	e7ef      	b.n	80114e0 <_printf_i+0xbc>
 8011500:	680b      	ldr	r3, [r1, #0]
 8011502:	6825      	ldr	r5, [r4, #0]
 8011504:	1d18      	adds	r0, r3, #4
 8011506:	6008      	str	r0, [r1, #0]
 8011508:	0628      	lsls	r0, r5, #24
 801150a:	d501      	bpl.n	8011510 <_printf_i+0xec>
 801150c:	681d      	ldr	r5, [r3, #0]
 801150e:	e002      	b.n	8011516 <_printf_i+0xf2>
 8011510:	0669      	lsls	r1, r5, #25
 8011512:	d5fb      	bpl.n	801150c <_printf_i+0xe8>
 8011514:	881d      	ldrh	r5, [r3, #0]
 8011516:	4854      	ldr	r0, [pc, #336]	; (8011668 <_printf_i+0x244>)
 8011518:	2f6f      	cmp	r7, #111	; 0x6f
 801151a:	bf0c      	ite	eq
 801151c:	2308      	moveq	r3, #8
 801151e:	230a      	movne	r3, #10
 8011520:	2100      	movs	r1, #0
 8011522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011526:	6866      	ldr	r6, [r4, #4]
 8011528:	60a6      	str	r6, [r4, #8]
 801152a:	2e00      	cmp	r6, #0
 801152c:	bfa2      	ittt	ge
 801152e:	6821      	ldrge	r1, [r4, #0]
 8011530:	f021 0104 	bicge.w	r1, r1, #4
 8011534:	6021      	strge	r1, [r4, #0]
 8011536:	b90d      	cbnz	r5, 801153c <_printf_i+0x118>
 8011538:	2e00      	cmp	r6, #0
 801153a:	d04d      	beq.n	80115d8 <_printf_i+0x1b4>
 801153c:	4616      	mov	r6, r2
 801153e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011542:	fb03 5711 	mls	r7, r3, r1, r5
 8011546:	5dc7      	ldrb	r7, [r0, r7]
 8011548:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801154c:	462f      	mov	r7, r5
 801154e:	42bb      	cmp	r3, r7
 8011550:	460d      	mov	r5, r1
 8011552:	d9f4      	bls.n	801153e <_printf_i+0x11a>
 8011554:	2b08      	cmp	r3, #8
 8011556:	d10b      	bne.n	8011570 <_printf_i+0x14c>
 8011558:	6823      	ldr	r3, [r4, #0]
 801155a:	07df      	lsls	r7, r3, #31
 801155c:	d508      	bpl.n	8011570 <_printf_i+0x14c>
 801155e:	6923      	ldr	r3, [r4, #16]
 8011560:	6861      	ldr	r1, [r4, #4]
 8011562:	4299      	cmp	r1, r3
 8011564:	bfde      	ittt	le
 8011566:	2330      	movle	r3, #48	; 0x30
 8011568:	f806 3c01 	strble.w	r3, [r6, #-1]
 801156c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011570:	1b92      	subs	r2, r2, r6
 8011572:	6122      	str	r2, [r4, #16]
 8011574:	f8cd a000 	str.w	sl, [sp]
 8011578:	464b      	mov	r3, r9
 801157a:	aa03      	add	r2, sp, #12
 801157c:	4621      	mov	r1, r4
 801157e:	4640      	mov	r0, r8
 8011580:	f7ff fee2 	bl	8011348 <_printf_common>
 8011584:	3001      	adds	r0, #1
 8011586:	d14c      	bne.n	8011622 <_printf_i+0x1fe>
 8011588:	f04f 30ff 	mov.w	r0, #4294967295
 801158c:	b004      	add	sp, #16
 801158e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011592:	4835      	ldr	r0, [pc, #212]	; (8011668 <_printf_i+0x244>)
 8011594:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011598:	6823      	ldr	r3, [r4, #0]
 801159a:	680e      	ldr	r6, [r1, #0]
 801159c:	061f      	lsls	r7, r3, #24
 801159e:	f856 5b04 	ldr.w	r5, [r6], #4
 80115a2:	600e      	str	r6, [r1, #0]
 80115a4:	d514      	bpl.n	80115d0 <_printf_i+0x1ac>
 80115a6:	07d9      	lsls	r1, r3, #31
 80115a8:	bf44      	itt	mi
 80115aa:	f043 0320 	orrmi.w	r3, r3, #32
 80115ae:	6023      	strmi	r3, [r4, #0]
 80115b0:	b91d      	cbnz	r5, 80115ba <_printf_i+0x196>
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	f023 0320 	bic.w	r3, r3, #32
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	2310      	movs	r3, #16
 80115bc:	e7b0      	b.n	8011520 <_printf_i+0xfc>
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	f043 0320 	orr.w	r3, r3, #32
 80115c4:	6023      	str	r3, [r4, #0]
 80115c6:	2378      	movs	r3, #120	; 0x78
 80115c8:	4828      	ldr	r0, [pc, #160]	; (801166c <_printf_i+0x248>)
 80115ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80115ce:	e7e3      	b.n	8011598 <_printf_i+0x174>
 80115d0:	065e      	lsls	r6, r3, #25
 80115d2:	bf48      	it	mi
 80115d4:	b2ad      	uxthmi	r5, r5
 80115d6:	e7e6      	b.n	80115a6 <_printf_i+0x182>
 80115d8:	4616      	mov	r6, r2
 80115da:	e7bb      	b.n	8011554 <_printf_i+0x130>
 80115dc:	680b      	ldr	r3, [r1, #0]
 80115de:	6826      	ldr	r6, [r4, #0]
 80115e0:	6960      	ldr	r0, [r4, #20]
 80115e2:	1d1d      	adds	r5, r3, #4
 80115e4:	600d      	str	r5, [r1, #0]
 80115e6:	0635      	lsls	r5, r6, #24
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	d501      	bpl.n	80115f0 <_printf_i+0x1cc>
 80115ec:	6018      	str	r0, [r3, #0]
 80115ee:	e002      	b.n	80115f6 <_printf_i+0x1d2>
 80115f0:	0671      	lsls	r1, r6, #25
 80115f2:	d5fb      	bpl.n	80115ec <_printf_i+0x1c8>
 80115f4:	8018      	strh	r0, [r3, #0]
 80115f6:	2300      	movs	r3, #0
 80115f8:	6123      	str	r3, [r4, #16]
 80115fa:	4616      	mov	r6, r2
 80115fc:	e7ba      	b.n	8011574 <_printf_i+0x150>
 80115fe:	680b      	ldr	r3, [r1, #0]
 8011600:	1d1a      	adds	r2, r3, #4
 8011602:	600a      	str	r2, [r1, #0]
 8011604:	681e      	ldr	r6, [r3, #0]
 8011606:	6862      	ldr	r2, [r4, #4]
 8011608:	2100      	movs	r1, #0
 801160a:	4630      	mov	r0, r6
 801160c:	f7ee fe08 	bl	8000220 <memchr>
 8011610:	b108      	cbz	r0, 8011616 <_printf_i+0x1f2>
 8011612:	1b80      	subs	r0, r0, r6
 8011614:	6060      	str	r0, [r4, #4]
 8011616:	6863      	ldr	r3, [r4, #4]
 8011618:	6123      	str	r3, [r4, #16]
 801161a:	2300      	movs	r3, #0
 801161c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011620:	e7a8      	b.n	8011574 <_printf_i+0x150>
 8011622:	6923      	ldr	r3, [r4, #16]
 8011624:	4632      	mov	r2, r6
 8011626:	4649      	mov	r1, r9
 8011628:	4640      	mov	r0, r8
 801162a:	47d0      	blx	sl
 801162c:	3001      	adds	r0, #1
 801162e:	d0ab      	beq.n	8011588 <_printf_i+0x164>
 8011630:	6823      	ldr	r3, [r4, #0]
 8011632:	079b      	lsls	r3, r3, #30
 8011634:	d413      	bmi.n	801165e <_printf_i+0x23a>
 8011636:	68e0      	ldr	r0, [r4, #12]
 8011638:	9b03      	ldr	r3, [sp, #12]
 801163a:	4298      	cmp	r0, r3
 801163c:	bfb8      	it	lt
 801163e:	4618      	movlt	r0, r3
 8011640:	e7a4      	b.n	801158c <_printf_i+0x168>
 8011642:	2301      	movs	r3, #1
 8011644:	4632      	mov	r2, r6
 8011646:	4649      	mov	r1, r9
 8011648:	4640      	mov	r0, r8
 801164a:	47d0      	blx	sl
 801164c:	3001      	adds	r0, #1
 801164e:	d09b      	beq.n	8011588 <_printf_i+0x164>
 8011650:	3501      	adds	r5, #1
 8011652:	68e3      	ldr	r3, [r4, #12]
 8011654:	9903      	ldr	r1, [sp, #12]
 8011656:	1a5b      	subs	r3, r3, r1
 8011658:	42ab      	cmp	r3, r5
 801165a:	dcf2      	bgt.n	8011642 <_printf_i+0x21e>
 801165c:	e7eb      	b.n	8011636 <_printf_i+0x212>
 801165e:	2500      	movs	r5, #0
 8011660:	f104 0619 	add.w	r6, r4, #25
 8011664:	e7f5      	b.n	8011652 <_printf_i+0x22e>
 8011666:	bf00      	nop
 8011668:	08013309 	.word	0x08013309
 801166c:	0801331a 	.word	0x0801331a

08011670 <iprintf>:
 8011670:	b40f      	push	{r0, r1, r2, r3}
 8011672:	4b0a      	ldr	r3, [pc, #40]	; (801169c <iprintf+0x2c>)
 8011674:	b513      	push	{r0, r1, r4, lr}
 8011676:	681c      	ldr	r4, [r3, #0]
 8011678:	b124      	cbz	r4, 8011684 <iprintf+0x14>
 801167a:	69a3      	ldr	r3, [r4, #24]
 801167c:	b913      	cbnz	r3, 8011684 <iprintf+0x14>
 801167e:	4620      	mov	r0, r4
 8011680:	f000 faf8 	bl	8011c74 <__sinit>
 8011684:	ab05      	add	r3, sp, #20
 8011686:	9a04      	ldr	r2, [sp, #16]
 8011688:	68a1      	ldr	r1, [r4, #8]
 801168a:	9301      	str	r3, [sp, #4]
 801168c:	4620      	mov	r0, r4
 801168e:	f7ff fd2b 	bl	80110e8 <_vfiprintf_r>
 8011692:	b002      	add	sp, #8
 8011694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011698:	b004      	add	sp, #16
 801169a:	4770      	bx	lr
 801169c:	20000180 	.word	0x20000180

080116a0 <_puts_r>:
 80116a0:	b570      	push	{r4, r5, r6, lr}
 80116a2:	460e      	mov	r6, r1
 80116a4:	4605      	mov	r5, r0
 80116a6:	b118      	cbz	r0, 80116b0 <_puts_r+0x10>
 80116a8:	6983      	ldr	r3, [r0, #24]
 80116aa:	b90b      	cbnz	r3, 80116b0 <_puts_r+0x10>
 80116ac:	f000 fae2 	bl	8011c74 <__sinit>
 80116b0:	69ab      	ldr	r3, [r5, #24]
 80116b2:	68ac      	ldr	r4, [r5, #8]
 80116b4:	b913      	cbnz	r3, 80116bc <_puts_r+0x1c>
 80116b6:	4628      	mov	r0, r5
 80116b8:	f000 fadc 	bl	8011c74 <__sinit>
 80116bc:	4b2c      	ldr	r3, [pc, #176]	; (8011770 <_puts_r+0xd0>)
 80116be:	429c      	cmp	r4, r3
 80116c0:	d120      	bne.n	8011704 <_puts_r+0x64>
 80116c2:	686c      	ldr	r4, [r5, #4]
 80116c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116c6:	07db      	lsls	r3, r3, #31
 80116c8:	d405      	bmi.n	80116d6 <_puts_r+0x36>
 80116ca:	89a3      	ldrh	r3, [r4, #12]
 80116cc:	0598      	lsls	r0, r3, #22
 80116ce:	d402      	bmi.n	80116d6 <_puts_r+0x36>
 80116d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116d2:	f000 fb6d 	bl	8011db0 <__retarget_lock_acquire_recursive>
 80116d6:	89a3      	ldrh	r3, [r4, #12]
 80116d8:	0719      	lsls	r1, r3, #28
 80116da:	d51d      	bpl.n	8011718 <_puts_r+0x78>
 80116dc:	6923      	ldr	r3, [r4, #16]
 80116de:	b1db      	cbz	r3, 8011718 <_puts_r+0x78>
 80116e0:	3e01      	subs	r6, #1
 80116e2:	68a3      	ldr	r3, [r4, #8]
 80116e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80116e8:	3b01      	subs	r3, #1
 80116ea:	60a3      	str	r3, [r4, #8]
 80116ec:	bb39      	cbnz	r1, 801173e <_puts_r+0x9e>
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	da38      	bge.n	8011764 <_puts_r+0xc4>
 80116f2:	4622      	mov	r2, r4
 80116f4:	210a      	movs	r1, #10
 80116f6:	4628      	mov	r0, r5
 80116f8:	f000 f8da 	bl	80118b0 <__swbuf_r>
 80116fc:	3001      	adds	r0, #1
 80116fe:	d011      	beq.n	8011724 <_puts_r+0x84>
 8011700:	250a      	movs	r5, #10
 8011702:	e011      	b.n	8011728 <_puts_r+0x88>
 8011704:	4b1b      	ldr	r3, [pc, #108]	; (8011774 <_puts_r+0xd4>)
 8011706:	429c      	cmp	r4, r3
 8011708:	d101      	bne.n	801170e <_puts_r+0x6e>
 801170a:	68ac      	ldr	r4, [r5, #8]
 801170c:	e7da      	b.n	80116c4 <_puts_r+0x24>
 801170e:	4b1a      	ldr	r3, [pc, #104]	; (8011778 <_puts_r+0xd8>)
 8011710:	429c      	cmp	r4, r3
 8011712:	bf08      	it	eq
 8011714:	68ec      	ldreq	r4, [r5, #12]
 8011716:	e7d5      	b.n	80116c4 <_puts_r+0x24>
 8011718:	4621      	mov	r1, r4
 801171a:	4628      	mov	r0, r5
 801171c:	f000 f91a 	bl	8011954 <__swsetup_r>
 8011720:	2800      	cmp	r0, #0
 8011722:	d0dd      	beq.n	80116e0 <_puts_r+0x40>
 8011724:	f04f 35ff 	mov.w	r5, #4294967295
 8011728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801172a:	07da      	lsls	r2, r3, #31
 801172c:	d405      	bmi.n	801173a <_puts_r+0x9a>
 801172e:	89a3      	ldrh	r3, [r4, #12]
 8011730:	059b      	lsls	r3, r3, #22
 8011732:	d402      	bmi.n	801173a <_puts_r+0x9a>
 8011734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011736:	f000 fb3c 	bl	8011db2 <__retarget_lock_release_recursive>
 801173a:	4628      	mov	r0, r5
 801173c:	bd70      	pop	{r4, r5, r6, pc}
 801173e:	2b00      	cmp	r3, #0
 8011740:	da04      	bge.n	801174c <_puts_r+0xac>
 8011742:	69a2      	ldr	r2, [r4, #24]
 8011744:	429a      	cmp	r2, r3
 8011746:	dc06      	bgt.n	8011756 <_puts_r+0xb6>
 8011748:	290a      	cmp	r1, #10
 801174a:	d004      	beq.n	8011756 <_puts_r+0xb6>
 801174c:	6823      	ldr	r3, [r4, #0]
 801174e:	1c5a      	adds	r2, r3, #1
 8011750:	6022      	str	r2, [r4, #0]
 8011752:	7019      	strb	r1, [r3, #0]
 8011754:	e7c5      	b.n	80116e2 <_puts_r+0x42>
 8011756:	4622      	mov	r2, r4
 8011758:	4628      	mov	r0, r5
 801175a:	f000 f8a9 	bl	80118b0 <__swbuf_r>
 801175e:	3001      	adds	r0, #1
 8011760:	d1bf      	bne.n	80116e2 <_puts_r+0x42>
 8011762:	e7df      	b.n	8011724 <_puts_r+0x84>
 8011764:	6823      	ldr	r3, [r4, #0]
 8011766:	250a      	movs	r5, #10
 8011768:	1c5a      	adds	r2, r3, #1
 801176a:	6022      	str	r2, [r4, #0]
 801176c:	701d      	strb	r5, [r3, #0]
 801176e:	e7db      	b.n	8011728 <_puts_r+0x88>
 8011770:	0801334c 	.word	0x0801334c
 8011774:	0801336c 	.word	0x0801336c
 8011778:	0801332c 	.word	0x0801332c

0801177c <puts>:
 801177c:	4b02      	ldr	r3, [pc, #8]	; (8011788 <puts+0xc>)
 801177e:	4601      	mov	r1, r0
 8011780:	6818      	ldr	r0, [r3, #0]
 8011782:	f7ff bf8d 	b.w	80116a0 <_puts_r>
 8011786:	bf00      	nop
 8011788:	20000180 	.word	0x20000180

0801178c <_sbrk_r>:
 801178c:	b538      	push	{r3, r4, r5, lr}
 801178e:	4d06      	ldr	r5, [pc, #24]	; (80117a8 <_sbrk_r+0x1c>)
 8011790:	2300      	movs	r3, #0
 8011792:	4604      	mov	r4, r0
 8011794:	4608      	mov	r0, r1
 8011796:	602b      	str	r3, [r5, #0]
 8011798:	f7f7 fcb8 	bl	800910c <_sbrk>
 801179c:	1c43      	adds	r3, r0, #1
 801179e:	d102      	bne.n	80117a6 <_sbrk_r+0x1a>
 80117a0:	682b      	ldr	r3, [r5, #0]
 80117a2:	b103      	cbz	r3, 80117a6 <_sbrk_r+0x1a>
 80117a4:	6023      	str	r3, [r4, #0]
 80117a6:	bd38      	pop	{r3, r4, r5, pc}
 80117a8:	20002190 	.word	0x20002190

080117ac <sniprintf>:
 80117ac:	b40c      	push	{r2, r3}
 80117ae:	b530      	push	{r4, r5, lr}
 80117b0:	4b17      	ldr	r3, [pc, #92]	; (8011810 <sniprintf+0x64>)
 80117b2:	1e0c      	subs	r4, r1, #0
 80117b4:	681d      	ldr	r5, [r3, #0]
 80117b6:	b09d      	sub	sp, #116	; 0x74
 80117b8:	da08      	bge.n	80117cc <sniprintf+0x20>
 80117ba:	238b      	movs	r3, #139	; 0x8b
 80117bc:	602b      	str	r3, [r5, #0]
 80117be:	f04f 30ff 	mov.w	r0, #4294967295
 80117c2:	b01d      	add	sp, #116	; 0x74
 80117c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80117c8:	b002      	add	sp, #8
 80117ca:	4770      	bx	lr
 80117cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80117d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80117d4:	bf14      	ite	ne
 80117d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80117da:	4623      	moveq	r3, r4
 80117dc:	9304      	str	r3, [sp, #16]
 80117de:	9307      	str	r3, [sp, #28]
 80117e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80117e4:	9002      	str	r0, [sp, #8]
 80117e6:	9006      	str	r0, [sp, #24]
 80117e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80117ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80117ee:	ab21      	add	r3, sp, #132	; 0x84
 80117f0:	a902      	add	r1, sp, #8
 80117f2:	4628      	mov	r0, r5
 80117f4:	9301      	str	r3, [sp, #4]
 80117f6:	f000 fbe9 	bl	8011fcc <_svfiprintf_r>
 80117fa:	1c43      	adds	r3, r0, #1
 80117fc:	bfbc      	itt	lt
 80117fe:	238b      	movlt	r3, #139	; 0x8b
 8011800:	602b      	strlt	r3, [r5, #0]
 8011802:	2c00      	cmp	r4, #0
 8011804:	d0dd      	beq.n	80117c2 <sniprintf+0x16>
 8011806:	9b02      	ldr	r3, [sp, #8]
 8011808:	2200      	movs	r2, #0
 801180a:	701a      	strb	r2, [r3, #0]
 801180c:	e7d9      	b.n	80117c2 <sniprintf+0x16>
 801180e:	bf00      	nop
 8011810:	20000180 	.word	0x20000180

08011814 <siprintf>:
 8011814:	b40e      	push	{r1, r2, r3}
 8011816:	b500      	push	{lr}
 8011818:	b09c      	sub	sp, #112	; 0x70
 801181a:	ab1d      	add	r3, sp, #116	; 0x74
 801181c:	9002      	str	r0, [sp, #8]
 801181e:	9006      	str	r0, [sp, #24]
 8011820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011824:	4809      	ldr	r0, [pc, #36]	; (801184c <siprintf+0x38>)
 8011826:	9107      	str	r1, [sp, #28]
 8011828:	9104      	str	r1, [sp, #16]
 801182a:	4909      	ldr	r1, [pc, #36]	; (8011850 <siprintf+0x3c>)
 801182c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011830:	9105      	str	r1, [sp, #20]
 8011832:	6800      	ldr	r0, [r0, #0]
 8011834:	9301      	str	r3, [sp, #4]
 8011836:	a902      	add	r1, sp, #8
 8011838:	f000 fbc8 	bl	8011fcc <_svfiprintf_r>
 801183c:	9b02      	ldr	r3, [sp, #8]
 801183e:	2200      	movs	r2, #0
 8011840:	701a      	strb	r2, [r3, #0]
 8011842:	b01c      	add	sp, #112	; 0x70
 8011844:	f85d eb04 	ldr.w	lr, [sp], #4
 8011848:	b003      	add	sp, #12
 801184a:	4770      	bx	lr
 801184c:	20000180 	.word	0x20000180
 8011850:	ffff0208 	.word	0xffff0208

08011854 <strchr>:
 8011854:	b2c9      	uxtb	r1, r1
 8011856:	4603      	mov	r3, r0
 8011858:	f810 2b01 	ldrb.w	r2, [r0], #1
 801185c:	b11a      	cbz	r2, 8011866 <strchr+0x12>
 801185e:	428a      	cmp	r2, r1
 8011860:	d1f9      	bne.n	8011856 <strchr+0x2>
 8011862:	4618      	mov	r0, r3
 8011864:	4770      	bx	lr
 8011866:	2900      	cmp	r1, #0
 8011868:	bf18      	it	ne
 801186a:	2300      	movne	r3, #0
 801186c:	e7f9      	b.n	8011862 <strchr+0xe>

0801186e <strcspn>:
 801186e:	b570      	push	{r4, r5, r6, lr}
 8011870:	4603      	mov	r3, r0
 8011872:	461e      	mov	r6, r3
 8011874:	f813 4b01 	ldrb.w	r4, [r3], #1
 8011878:	b144      	cbz	r4, 801188c <strcspn+0x1e>
 801187a:	1e4a      	subs	r2, r1, #1
 801187c:	e001      	b.n	8011882 <strcspn+0x14>
 801187e:	42a5      	cmp	r5, r4
 8011880:	d004      	beq.n	801188c <strcspn+0x1e>
 8011882:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8011886:	2d00      	cmp	r5, #0
 8011888:	d1f9      	bne.n	801187e <strcspn+0x10>
 801188a:	e7f2      	b.n	8011872 <strcspn+0x4>
 801188c:	1a30      	subs	r0, r6, r0
 801188e:	bd70      	pop	{r4, r5, r6, pc}

08011890 <strspn>:
 8011890:	b570      	push	{r4, r5, r6, lr}
 8011892:	4603      	mov	r3, r0
 8011894:	461e      	mov	r6, r3
 8011896:	f813 4b01 	ldrb.w	r4, [r3], #1
 801189a:	b13c      	cbz	r4, 80118ac <strspn+0x1c>
 801189c:	1e4a      	subs	r2, r1, #1
 801189e:	e001      	b.n	80118a4 <strspn+0x14>
 80118a0:	42a5      	cmp	r5, r4
 80118a2:	d0f7      	beq.n	8011894 <strspn+0x4>
 80118a4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80118a8:	2d00      	cmp	r5, #0
 80118aa:	d1f9      	bne.n	80118a0 <strspn+0x10>
 80118ac:	1a30      	subs	r0, r6, r0
 80118ae:	bd70      	pop	{r4, r5, r6, pc}

080118b0 <__swbuf_r>:
 80118b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b2:	460e      	mov	r6, r1
 80118b4:	4614      	mov	r4, r2
 80118b6:	4605      	mov	r5, r0
 80118b8:	b118      	cbz	r0, 80118c2 <__swbuf_r+0x12>
 80118ba:	6983      	ldr	r3, [r0, #24]
 80118bc:	b90b      	cbnz	r3, 80118c2 <__swbuf_r+0x12>
 80118be:	f000 f9d9 	bl	8011c74 <__sinit>
 80118c2:	4b21      	ldr	r3, [pc, #132]	; (8011948 <__swbuf_r+0x98>)
 80118c4:	429c      	cmp	r4, r3
 80118c6:	d12b      	bne.n	8011920 <__swbuf_r+0x70>
 80118c8:	686c      	ldr	r4, [r5, #4]
 80118ca:	69a3      	ldr	r3, [r4, #24]
 80118cc:	60a3      	str	r3, [r4, #8]
 80118ce:	89a3      	ldrh	r3, [r4, #12]
 80118d0:	071a      	lsls	r2, r3, #28
 80118d2:	d52f      	bpl.n	8011934 <__swbuf_r+0x84>
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	b36b      	cbz	r3, 8011934 <__swbuf_r+0x84>
 80118d8:	6923      	ldr	r3, [r4, #16]
 80118da:	6820      	ldr	r0, [r4, #0]
 80118dc:	1ac0      	subs	r0, r0, r3
 80118de:	6963      	ldr	r3, [r4, #20]
 80118e0:	b2f6      	uxtb	r6, r6
 80118e2:	4283      	cmp	r3, r0
 80118e4:	4637      	mov	r7, r6
 80118e6:	dc04      	bgt.n	80118f2 <__swbuf_r+0x42>
 80118e8:	4621      	mov	r1, r4
 80118ea:	4628      	mov	r0, r5
 80118ec:	f000 f92e 	bl	8011b4c <_fflush_r>
 80118f0:	bb30      	cbnz	r0, 8011940 <__swbuf_r+0x90>
 80118f2:	68a3      	ldr	r3, [r4, #8]
 80118f4:	3b01      	subs	r3, #1
 80118f6:	60a3      	str	r3, [r4, #8]
 80118f8:	6823      	ldr	r3, [r4, #0]
 80118fa:	1c5a      	adds	r2, r3, #1
 80118fc:	6022      	str	r2, [r4, #0]
 80118fe:	701e      	strb	r6, [r3, #0]
 8011900:	6963      	ldr	r3, [r4, #20]
 8011902:	3001      	adds	r0, #1
 8011904:	4283      	cmp	r3, r0
 8011906:	d004      	beq.n	8011912 <__swbuf_r+0x62>
 8011908:	89a3      	ldrh	r3, [r4, #12]
 801190a:	07db      	lsls	r3, r3, #31
 801190c:	d506      	bpl.n	801191c <__swbuf_r+0x6c>
 801190e:	2e0a      	cmp	r6, #10
 8011910:	d104      	bne.n	801191c <__swbuf_r+0x6c>
 8011912:	4621      	mov	r1, r4
 8011914:	4628      	mov	r0, r5
 8011916:	f000 f919 	bl	8011b4c <_fflush_r>
 801191a:	b988      	cbnz	r0, 8011940 <__swbuf_r+0x90>
 801191c:	4638      	mov	r0, r7
 801191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011920:	4b0a      	ldr	r3, [pc, #40]	; (801194c <__swbuf_r+0x9c>)
 8011922:	429c      	cmp	r4, r3
 8011924:	d101      	bne.n	801192a <__swbuf_r+0x7a>
 8011926:	68ac      	ldr	r4, [r5, #8]
 8011928:	e7cf      	b.n	80118ca <__swbuf_r+0x1a>
 801192a:	4b09      	ldr	r3, [pc, #36]	; (8011950 <__swbuf_r+0xa0>)
 801192c:	429c      	cmp	r4, r3
 801192e:	bf08      	it	eq
 8011930:	68ec      	ldreq	r4, [r5, #12]
 8011932:	e7ca      	b.n	80118ca <__swbuf_r+0x1a>
 8011934:	4621      	mov	r1, r4
 8011936:	4628      	mov	r0, r5
 8011938:	f000 f80c 	bl	8011954 <__swsetup_r>
 801193c:	2800      	cmp	r0, #0
 801193e:	d0cb      	beq.n	80118d8 <__swbuf_r+0x28>
 8011940:	f04f 37ff 	mov.w	r7, #4294967295
 8011944:	e7ea      	b.n	801191c <__swbuf_r+0x6c>
 8011946:	bf00      	nop
 8011948:	0801334c 	.word	0x0801334c
 801194c:	0801336c 	.word	0x0801336c
 8011950:	0801332c 	.word	0x0801332c

08011954 <__swsetup_r>:
 8011954:	4b32      	ldr	r3, [pc, #200]	; (8011a20 <__swsetup_r+0xcc>)
 8011956:	b570      	push	{r4, r5, r6, lr}
 8011958:	681d      	ldr	r5, [r3, #0]
 801195a:	4606      	mov	r6, r0
 801195c:	460c      	mov	r4, r1
 801195e:	b125      	cbz	r5, 801196a <__swsetup_r+0x16>
 8011960:	69ab      	ldr	r3, [r5, #24]
 8011962:	b913      	cbnz	r3, 801196a <__swsetup_r+0x16>
 8011964:	4628      	mov	r0, r5
 8011966:	f000 f985 	bl	8011c74 <__sinit>
 801196a:	4b2e      	ldr	r3, [pc, #184]	; (8011a24 <__swsetup_r+0xd0>)
 801196c:	429c      	cmp	r4, r3
 801196e:	d10f      	bne.n	8011990 <__swsetup_r+0x3c>
 8011970:	686c      	ldr	r4, [r5, #4]
 8011972:	89a3      	ldrh	r3, [r4, #12]
 8011974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011978:	0719      	lsls	r1, r3, #28
 801197a:	d42c      	bmi.n	80119d6 <__swsetup_r+0x82>
 801197c:	06dd      	lsls	r5, r3, #27
 801197e:	d411      	bmi.n	80119a4 <__swsetup_r+0x50>
 8011980:	2309      	movs	r3, #9
 8011982:	6033      	str	r3, [r6, #0]
 8011984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011988:	81a3      	strh	r3, [r4, #12]
 801198a:	f04f 30ff 	mov.w	r0, #4294967295
 801198e:	e03e      	b.n	8011a0e <__swsetup_r+0xba>
 8011990:	4b25      	ldr	r3, [pc, #148]	; (8011a28 <__swsetup_r+0xd4>)
 8011992:	429c      	cmp	r4, r3
 8011994:	d101      	bne.n	801199a <__swsetup_r+0x46>
 8011996:	68ac      	ldr	r4, [r5, #8]
 8011998:	e7eb      	b.n	8011972 <__swsetup_r+0x1e>
 801199a:	4b24      	ldr	r3, [pc, #144]	; (8011a2c <__swsetup_r+0xd8>)
 801199c:	429c      	cmp	r4, r3
 801199e:	bf08      	it	eq
 80119a0:	68ec      	ldreq	r4, [r5, #12]
 80119a2:	e7e6      	b.n	8011972 <__swsetup_r+0x1e>
 80119a4:	0758      	lsls	r0, r3, #29
 80119a6:	d512      	bpl.n	80119ce <__swsetup_r+0x7a>
 80119a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119aa:	b141      	cbz	r1, 80119be <__swsetup_r+0x6a>
 80119ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119b0:	4299      	cmp	r1, r3
 80119b2:	d002      	beq.n	80119ba <__swsetup_r+0x66>
 80119b4:	4630      	mov	r0, r6
 80119b6:	f7ff fac3 	bl	8010f40 <_free_r>
 80119ba:	2300      	movs	r3, #0
 80119bc:	6363      	str	r3, [r4, #52]	; 0x34
 80119be:	89a3      	ldrh	r3, [r4, #12]
 80119c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119c4:	81a3      	strh	r3, [r4, #12]
 80119c6:	2300      	movs	r3, #0
 80119c8:	6063      	str	r3, [r4, #4]
 80119ca:	6923      	ldr	r3, [r4, #16]
 80119cc:	6023      	str	r3, [r4, #0]
 80119ce:	89a3      	ldrh	r3, [r4, #12]
 80119d0:	f043 0308 	orr.w	r3, r3, #8
 80119d4:	81a3      	strh	r3, [r4, #12]
 80119d6:	6923      	ldr	r3, [r4, #16]
 80119d8:	b94b      	cbnz	r3, 80119ee <__swsetup_r+0x9a>
 80119da:	89a3      	ldrh	r3, [r4, #12]
 80119dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80119e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119e4:	d003      	beq.n	80119ee <__swsetup_r+0x9a>
 80119e6:	4621      	mov	r1, r4
 80119e8:	4630      	mov	r0, r6
 80119ea:	f000 fa07 	bl	8011dfc <__smakebuf_r>
 80119ee:	89a0      	ldrh	r0, [r4, #12]
 80119f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119f4:	f010 0301 	ands.w	r3, r0, #1
 80119f8:	d00a      	beq.n	8011a10 <__swsetup_r+0xbc>
 80119fa:	2300      	movs	r3, #0
 80119fc:	60a3      	str	r3, [r4, #8]
 80119fe:	6963      	ldr	r3, [r4, #20]
 8011a00:	425b      	negs	r3, r3
 8011a02:	61a3      	str	r3, [r4, #24]
 8011a04:	6923      	ldr	r3, [r4, #16]
 8011a06:	b943      	cbnz	r3, 8011a1a <__swsetup_r+0xc6>
 8011a08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a0c:	d1ba      	bne.n	8011984 <__swsetup_r+0x30>
 8011a0e:	bd70      	pop	{r4, r5, r6, pc}
 8011a10:	0781      	lsls	r1, r0, #30
 8011a12:	bf58      	it	pl
 8011a14:	6963      	ldrpl	r3, [r4, #20]
 8011a16:	60a3      	str	r3, [r4, #8]
 8011a18:	e7f4      	b.n	8011a04 <__swsetup_r+0xb0>
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	e7f7      	b.n	8011a0e <__swsetup_r+0xba>
 8011a1e:	bf00      	nop
 8011a20:	20000180 	.word	0x20000180
 8011a24:	0801334c 	.word	0x0801334c
 8011a28:	0801336c 	.word	0x0801336c
 8011a2c:	0801332c 	.word	0x0801332c

08011a30 <abort>:
 8011a30:	b508      	push	{r3, lr}
 8011a32:	2006      	movs	r0, #6
 8011a34:	f000 fbf2 	bl	801221c <raise>
 8011a38:	2001      	movs	r0, #1
 8011a3a:	f7f7 faef 	bl	800901c <_exit>
	...

08011a40 <__sflush_r>:
 8011a40:	898a      	ldrh	r2, [r1, #12]
 8011a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a46:	4605      	mov	r5, r0
 8011a48:	0710      	lsls	r0, r2, #28
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	d458      	bmi.n	8011b00 <__sflush_r+0xc0>
 8011a4e:	684b      	ldr	r3, [r1, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	dc05      	bgt.n	8011a60 <__sflush_r+0x20>
 8011a54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	dc02      	bgt.n	8011a60 <__sflush_r+0x20>
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a62:	2e00      	cmp	r6, #0
 8011a64:	d0f9      	beq.n	8011a5a <__sflush_r+0x1a>
 8011a66:	2300      	movs	r3, #0
 8011a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a6c:	682f      	ldr	r7, [r5, #0]
 8011a6e:	602b      	str	r3, [r5, #0]
 8011a70:	d032      	beq.n	8011ad8 <__sflush_r+0x98>
 8011a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a74:	89a3      	ldrh	r3, [r4, #12]
 8011a76:	075a      	lsls	r2, r3, #29
 8011a78:	d505      	bpl.n	8011a86 <__sflush_r+0x46>
 8011a7a:	6863      	ldr	r3, [r4, #4]
 8011a7c:	1ac0      	subs	r0, r0, r3
 8011a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a80:	b10b      	cbz	r3, 8011a86 <__sflush_r+0x46>
 8011a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a84:	1ac0      	subs	r0, r0, r3
 8011a86:	2300      	movs	r3, #0
 8011a88:	4602      	mov	r2, r0
 8011a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a8c:	6a21      	ldr	r1, [r4, #32]
 8011a8e:	4628      	mov	r0, r5
 8011a90:	47b0      	blx	r6
 8011a92:	1c43      	adds	r3, r0, #1
 8011a94:	89a3      	ldrh	r3, [r4, #12]
 8011a96:	d106      	bne.n	8011aa6 <__sflush_r+0x66>
 8011a98:	6829      	ldr	r1, [r5, #0]
 8011a9a:	291d      	cmp	r1, #29
 8011a9c:	d82c      	bhi.n	8011af8 <__sflush_r+0xb8>
 8011a9e:	4a2a      	ldr	r2, [pc, #168]	; (8011b48 <__sflush_r+0x108>)
 8011aa0:	40ca      	lsrs	r2, r1
 8011aa2:	07d6      	lsls	r6, r2, #31
 8011aa4:	d528      	bpl.n	8011af8 <__sflush_r+0xb8>
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	6062      	str	r2, [r4, #4]
 8011aaa:	04d9      	lsls	r1, r3, #19
 8011aac:	6922      	ldr	r2, [r4, #16]
 8011aae:	6022      	str	r2, [r4, #0]
 8011ab0:	d504      	bpl.n	8011abc <__sflush_r+0x7c>
 8011ab2:	1c42      	adds	r2, r0, #1
 8011ab4:	d101      	bne.n	8011aba <__sflush_r+0x7a>
 8011ab6:	682b      	ldr	r3, [r5, #0]
 8011ab8:	b903      	cbnz	r3, 8011abc <__sflush_r+0x7c>
 8011aba:	6560      	str	r0, [r4, #84]	; 0x54
 8011abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011abe:	602f      	str	r7, [r5, #0]
 8011ac0:	2900      	cmp	r1, #0
 8011ac2:	d0ca      	beq.n	8011a5a <__sflush_r+0x1a>
 8011ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ac8:	4299      	cmp	r1, r3
 8011aca:	d002      	beq.n	8011ad2 <__sflush_r+0x92>
 8011acc:	4628      	mov	r0, r5
 8011ace:	f7ff fa37 	bl	8010f40 <_free_r>
 8011ad2:	2000      	movs	r0, #0
 8011ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8011ad6:	e7c1      	b.n	8011a5c <__sflush_r+0x1c>
 8011ad8:	6a21      	ldr	r1, [r4, #32]
 8011ada:	2301      	movs	r3, #1
 8011adc:	4628      	mov	r0, r5
 8011ade:	47b0      	blx	r6
 8011ae0:	1c41      	adds	r1, r0, #1
 8011ae2:	d1c7      	bne.n	8011a74 <__sflush_r+0x34>
 8011ae4:	682b      	ldr	r3, [r5, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d0c4      	beq.n	8011a74 <__sflush_r+0x34>
 8011aea:	2b1d      	cmp	r3, #29
 8011aec:	d001      	beq.n	8011af2 <__sflush_r+0xb2>
 8011aee:	2b16      	cmp	r3, #22
 8011af0:	d101      	bne.n	8011af6 <__sflush_r+0xb6>
 8011af2:	602f      	str	r7, [r5, #0]
 8011af4:	e7b1      	b.n	8011a5a <__sflush_r+0x1a>
 8011af6:	89a3      	ldrh	r3, [r4, #12]
 8011af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011afc:	81a3      	strh	r3, [r4, #12]
 8011afe:	e7ad      	b.n	8011a5c <__sflush_r+0x1c>
 8011b00:	690f      	ldr	r7, [r1, #16]
 8011b02:	2f00      	cmp	r7, #0
 8011b04:	d0a9      	beq.n	8011a5a <__sflush_r+0x1a>
 8011b06:	0793      	lsls	r3, r2, #30
 8011b08:	680e      	ldr	r6, [r1, #0]
 8011b0a:	bf08      	it	eq
 8011b0c:	694b      	ldreq	r3, [r1, #20]
 8011b0e:	600f      	str	r7, [r1, #0]
 8011b10:	bf18      	it	ne
 8011b12:	2300      	movne	r3, #0
 8011b14:	eba6 0807 	sub.w	r8, r6, r7
 8011b18:	608b      	str	r3, [r1, #8]
 8011b1a:	f1b8 0f00 	cmp.w	r8, #0
 8011b1e:	dd9c      	ble.n	8011a5a <__sflush_r+0x1a>
 8011b20:	6a21      	ldr	r1, [r4, #32]
 8011b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b24:	4643      	mov	r3, r8
 8011b26:	463a      	mov	r2, r7
 8011b28:	4628      	mov	r0, r5
 8011b2a:	47b0      	blx	r6
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	dc06      	bgt.n	8011b3e <__sflush_r+0xfe>
 8011b30:	89a3      	ldrh	r3, [r4, #12]
 8011b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b36:	81a3      	strh	r3, [r4, #12]
 8011b38:	f04f 30ff 	mov.w	r0, #4294967295
 8011b3c:	e78e      	b.n	8011a5c <__sflush_r+0x1c>
 8011b3e:	4407      	add	r7, r0
 8011b40:	eba8 0800 	sub.w	r8, r8, r0
 8011b44:	e7e9      	b.n	8011b1a <__sflush_r+0xda>
 8011b46:	bf00      	nop
 8011b48:	20400001 	.word	0x20400001

08011b4c <_fflush_r>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	690b      	ldr	r3, [r1, #16]
 8011b50:	4605      	mov	r5, r0
 8011b52:	460c      	mov	r4, r1
 8011b54:	b913      	cbnz	r3, 8011b5c <_fflush_r+0x10>
 8011b56:	2500      	movs	r5, #0
 8011b58:	4628      	mov	r0, r5
 8011b5a:	bd38      	pop	{r3, r4, r5, pc}
 8011b5c:	b118      	cbz	r0, 8011b66 <_fflush_r+0x1a>
 8011b5e:	6983      	ldr	r3, [r0, #24]
 8011b60:	b90b      	cbnz	r3, 8011b66 <_fflush_r+0x1a>
 8011b62:	f000 f887 	bl	8011c74 <__sinit>
 8011b66:	4b14      	ldr	r3, [pc, #80]	; (8011bb8 <_fflush_r+0x6c>)
 8011b68:	429c      	cmp	r4, r3
 8011b6a:	d11b      	bne.n	8011ba4 <_fflush_r+0x58>
 8011b6c:	686c      	ldr	r4, [r5, #4]
 8011b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d0ef      	beq.n	8011b56 <_fflush_r+0xa>
 8011b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b78:	07d0      	lsls	r0, r2, #31
 8011b7a:	d404      	bmi.n	8011b86 <_fflush_r+0x3a>
 8011b7c:	0599      	lsls	r1, r3, #22
 8011b7e:	d402      	bmi.n	8011b86 <_fflush_r+0x3a>
 8011b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b82:	f000 f915 	bl	8011db0 <__retarget_lock_acquire_recursive>
 8011b86:	4628      	mov	r0, r5
 8011b88:	4621      	mov	r1, r4
 8011b8a:	f7ff ff59 	bl	8011a40 <__sflush_r>
 8011b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b90:	07da      	lsls	r2, r3, #31
 8011b92:	4605      	mov	r5, r0
 8011b94:	d4e0      	bmi.n	8011b58 <_fflush_r+0xc>
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	059b      	lsls	r3, r3, #22
 8011b9a:	d4dd      	bmi.n	8011b58 <_fflush_r+0xc>
 8011b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b9e:	f000 f908 	bl	8011db2 <__retarget_lock_release_recursive>
 8011ba2:	e7d9      	b.n	8011b58 <_fflush_r+0xc>
 8011ba4:	4b05      	ldr	r3, [pc, #20]	; (8011bbc <_fflush_r+0x70>)
 8011ba6:	429c      	cmp	r4, r3
 8011ba8:	d101      	bne.n	8011bae <_fflush_r+0x62>
 8011baa:	68ac      	ldr	r4, [r5, #8]
 8011bac:	e7df      	b.n	8011b6e <_fflush_r+0x22>
 8011bae:	4b04      	ldr	r3, [pc, #16]	; (8011bc0 <_fflush_r+0x74>)
 8011bb0:	429c      	cmp	r4, r3
 8011bb2:	bf08      	it	eq
 8011bb4:	68ec      	ldreq	r4, [r5, #12]
 8011bb6:	e7da      	b.n	8011b6e <_fflush_r+0x22>
 8011bb8:	0801334c 	.word	0x0801334c
 8011bbc:	0801336c 	.word	0x0801336c
 8011bc0:	0801332c 	.word	0x0801332c

08011bc4 <std>:
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	b510      	push	{r4, lr}
 8011bc8:	4604      	mov	r4, r0
 8011bca:	e9c0 3300 	strd	r3, r3, [r0]
 8011bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bd2:	6083      	str	r3, [r0, #8]
 8011bd4:	8181      	strh	r1, [r0, #12]
 8011bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8011bd8:	81c2      	strh	r2, [r0, #14]
 8011bda:	6183      	str	r3, [r0, #24]
 8011bdc:	4619      	mov	r1, r3
 8011bde:	2208      	movs	r2, #8
 8011be0:	305c      	adds	r0, #92	; 0x5c
 8011be2:	f7ff f9a5 	bl	8010f30 <memset>
 8011be6:	4b05      	ldr	r3, [pc, #20]	; (8011bfc <std+0x38>)
 8011be8:	6263      	str	r3, [r4, #36]	; 0x24
 8011bea:	4b05      	ldr	r3, [pc, #20]	; (8011c00 <std+0x3c>)
 8011bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8011bee:	4b05      	ldr	r3, [pc, #20]	; (8011c04 <std+0x40>)
 8011bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011bf2:	4b05      	ldr	r3, [pc, #20]	; (8011c08 <std+0x44>)
 8011bf4:	6224      	str	r4, [r4, #32]
 8011bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8011bf8:	bd10      	pop	{r4, pc}
 8011bfa:	bf00      	nop
 8011bfc:	08012255 	.word	0x08012255
 8011c00:	08012277 	.word	0x08012277
 8011c04:	080122af 	.word	0x080122af
 8011c08:	080122d3 	.word	0x080122d3

08011c0c <_cleanup_r>:
 8011c0c:	4901      	ldr	r1, [pc, #4]	; (8011c14 <_cleanup_r+0x8>)
 8011c0e:	f000 b8af 	b.w	8011d70 <_fwalk_reent>
 8011c12:	bf00      	nop
 8011c14:	08011b4d 	.word	0x08011b4d

08011c18 <__sfmoreglue>:
 8011c18:	b570      	push	{r4, r5, r6, lr}
 8011c1a:	1e4a      	subs	r2, r1, #1
 8011c1c:	2568      	movs	r5, #104	; 0x68
 8011c1e:	4355      	muls	r5, r2
 8011c20:	460e      	mov	r6, r1
 8011c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c26:	f7ff f9db 	bl	8010fe0 <_malloc_r>
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	b140      	cbz	r0, 8011c40 <__sfmoreglue+0x28>
 8011c2e:	2100      	movs	r1, #0
 8011c30:	e9c0 1600 	strd	r1, r6, [r0]
 8011c34:	300c      	adds	r0, #12
 8011c36:	60a0      	str	r0, [r4, #8]
 8011c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c3c:	f7ff f978 	bl	8010f30 <memset>
 8011c40:	4620      	mov	r0, r4
 8011c42:	bd70      	pop	{r4, r5, r6, pc}

08011c44 <__sfp_lock_acquire>:
 8011c44:	4801      	ldr	r0, [pc, #4]	; (8011c4c <__sfp_lock_acquire+0x8>)
 8011c46:	f000 b8b3 	b.w	8011db0 <__retarget_lock_acquire_recursive>
 8011c4a:	bf00      	nop
 8011c4c:	2000218c 	.word	0x2000218c

08011c50 <__sfp_lock_release>:
 8011c50:	4801      	ldr	r0, [pc, #4]	; (8011c58 <__sfp_lock_release+0x8>)
 8011c52:	f000 b8ae 	b.w	8011db2 <__retarget_lock_release_recursive>
 8011c56:	bf00      	nop
 8011c58:	2000218c 	.word	0x2000218c

08011c5c <__sinit_lock_acquire>:
 8011c5c:	4801      	ldr	r0, [pc, #4]	; (8011c64 <__sinit_lock_acquire+0x8>)
 8011c5e:	f000 b8a7 	b.w	8011db0 <__retarget_lock_acquire_recursive>
 8011c62:	bf00      	nop
 8011c64:	20002187 	.word	0x20002187

08011c68 <__sinit_lock_release>:
 8011c68:	4801      	ldr	r0, [pc, #4]	; (8011c70 <__sinit_lock_release+0x8>)
 8011c6a:	f000 b8a2 	b.w	8011db2 <__retarget_lock_release_recursive>
 8011c6e:	bf00      	nop
 8011c70:	20002187 	.word	0x20002187

08011c74 <__sinit>:
 8011c74:	b510      	push	{r4, lr}
 8011c76:	4604      	mov	r4, r0
 8011c78:	f7ff fff0 	bl	8011c5c <__sinit_lock_acquire>
 8011c7c:	69a3      	ldr	r3, [r4, #24]
 8011c7e:	b11b      	cbz	r3, 8011c88 <__sinit+0x14>
 8011c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c84:	f7ff bff0 	b.w	8011c68 <__sinit_lock_release>
 8011c88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c8c:	6523      	str	r3, [r4, #80]	; 0x50
 8011c8e:	4b13      	ldr	r3, [pc, #76]	; (8011cdc <__sinit+0x68>)
 8011c90:	4a13      	ldr	r2, [pc, #76]	; (8011ce0 <__sinit+0x6c>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c96:	42a3      	cmp	r3, r4
 8011c98:	bf04      	itt	eq
 8011c9a:	2301      	moveq	r3, #1
 8011c9c:	61a3      	streq	r3, [r4, #24]
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f000 f820 	bl	8011ce4 <__sfp>
 8011ca4:	6060      	str	r0, [r4, #4]
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f000 f81c 	bl	8011ce4 <__sfp>
 8011cac:	60a0      	str	r0, [r4, #8]
 8011cae:	4620      	mov	r0, r4
 8011cb0:	f000 f818 	bl	8011ce4 <__sfp>
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	60e0      	str	r0, [r4, #12]
 8011cb8:	2104      	movs	r1, #4
 8011cba:	6860      	ldr	r0, [r4, #4]
 8011cbc:	f7ff ff82 	bl	8011bc4 <std>
 8011cc0:	68a0      	ldr	r0, [r4, #8]
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	2109      	movs	r1, #9
 8011cc6:	f7ff ff7d 	bl	8011bc4 <std>
 8011cca:	68e0      	ldr	r0, [r4, #12]
 8011ccc:	2202      	movs	r2, #2
 8011cce:	2112      	movs	r1, #18
 8011cd0:	f7ff ff78 	bl	8011bc4 <std>
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	61a3      	str	r3, [r4, #24]
 8011cd8:	e7d2      	b.n	8011c80 <__sinit+0xc>
 8011cda:	bf00      	nop
 8011cdc:	080132f4 	.word	0x080132f4
 8011ce0:	08011c0d 	.word	0x08011c0d

08011ce4 <__sfp>:
 8011ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce6:	4607      	mov	r7, r0
 8011ce8:	f7ff ffac 	bl	8011c44 <__sfp_lock_acquire>
 8011cec:	4b1e      	ldr	r3, [pc, #120]	; (8011d68 <__sfp+0x84>)
 8011cee:	681e      	ldr	r6, [r3, #0]
 8011cf0:	69b3      	ldr	r3, [r6, #24]
 8011cf2:	b913      	cbnz	r3, 8011cfa <__sfp+0x16>
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	f7ff ffbd 	bl	8011c74 <__sinit>
 8011cfa:	3648      	adds	r6, #72	; 0x48
 8011cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011d00:	3b01      	subs	r3, #1
 8011d02:	d503      	bpl.n	8011d0c <__sfp+0x28>
 8011d04:	6833      	ldr	r3, [r6, #0]
 8011d06:	b30b      	cbz	r3, 8011d4c <__sfp+0x68>
 8011d08:	6836      	ldr	r6, [r6, #0]
 8011d0a:	e7f7      	b.n	8011cfc <__sfp+0x18>
 8011d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011d10:	b9d5      	cbnz	r5, 8011d48 <__sfp+0x64>
 8011d12:	4b16      	ldr	r3, [pc, #88]	; (8011d6c <__sfp+0x88>)
 8011d14:	60e3      	str	r3, [r4, #12]
 8011d16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d1a:	6665      	str	r5, [r4, #100]	; 0x64
 8011d1c:	f000 f847 	bl	8011dae <__retarget_lock_init_recursive>
 8011d20:	f7ff ff96 	bl	8011c50 <__sfp_lock_release>
 8011d24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011d28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011d2c:	6025      	str	r5, [r4, #0]
 8011d2e:	61a5      	str	r5, [r4, #24]
 8011d30:	2208      	movs	r2, #8
 8011d32:	4629      	mov	r1, r5
 8011d34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011d38:	f7ff f8fa 	bl	8010f30 <memset>
 8011d3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011d40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011d44:	4620      	mov	r0, r4
 8011d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d48:	3468      	adds	r4, #104	; 0x68
 8011d4a:	e7d9      	b.n	8011d00 <__sfp+0x1c>
 8011d4c:	2104      	movs	r1, #4
 8011d4e:	4638      	mov	r0, r7
 8011d50:	f7ff ff62 	bl	8011c18 <__sfmoreglue>
 8011d54:	4604      	mov	r4, r0
 8011d56:	6030      	str	r0, [r6, #0]
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d1d5      	bne.n	8011d08 <__sfp+0x24>
 8011d5c:	f7ff ff78 	bl	8011c50 <__sfp_lock_release>
 8011d60:	230c      	movs	r3, #12
 8011d62:	603b      	str	r3, [r7, #0]
 8011d64:	e7ee      	b.n	8011d44 <__sfp+0x60>
 8011d66:	bf00      	nop
 8011d68:	080132f4 	.word	0x080132f4
 8011d6c:	ffff0001 	.word	0xffff0001

08011d70 <_fwalk_reent>:
 8011d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d74:	4606      	mov	r6, r0
 8011d76:	4688      	mov	r8, r1
 8011d78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d7c:	2700      	movs	r7, #0
 8011d7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d82:	f1b9 0901 	subs.w	r9, r9, #1
 8011d86:	d505      	bpl.n	8011d94 <_fwalk_reent+0x24>
 8011d88:	6824      	ldr	r4, [r4, #0]
 8011d8a:	2c00      	cmp	r4, #0
 8011d8c:	d1f7      	bne.n	8011d7e <_fwalk_reent+0xe>
 8011d8e:	4638      	mov	r0, r7
 8011d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d94:	89ab      	ldrh	r3, [r5, #12]
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d907      	bls.n	8011daa <_fwalk_reent+0x3a>
 8011d9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d9e:	3301      	adds	r3, #1
 8011da0:	d003      	beq.n	8011daa <_fwalk_reent+0x3a>
 8011da2:	4629      	mov	r1, r5
 8011da4:	4630      	mov	r0, r6
 8011da6:	47c0      	blx	r8
 8011da8:	4307      	orrs	r7, r0
 8011daa:	3568      	adds	r5, #104	; 0x68
 8011dac:	e7e9      	b.n	8011d82 <_fwalk_reent+0x12>

08011dae <__retarget_lock_init_recursive>:
 8011dae:	4770      	bx	lr

08011db0 <__retarget_lock_acquire_recursive>:
 8011db0:	4770      	bx	lr

08011db2 <__retarget_lock_release_recursive>:
 8011db2:	4770      	bx	lr

08011db4 <__swhatbuf_r>:
 8011db4:	b570      	push	{r4, r5, r6, lr}
 8011db6:	460e      	mov	r6, r1
 8011db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dbc:	2900      	cmp	r1, #0
 8011dbe:	b096      	sub	sp, #88	; 0x58
 8011dc0:	4614      	mov	r4, r2
 8011dc2:	461d      	mov	r5, r3
 8011dc4:	da07      	bge.n	8011dd6 <__swhatbuf_r+0x22>
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	602b      	str	r3, [r5, #0]
 8011dca:	89b3      	ldrh	r3, [r6, #12]
 8011dcc:	061a      	lsls	r2, r3, #24
 8011dce:	d410      	bmi.n	8011df2 <__swhatbuf_r+0x3e>
 8011dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dd4:	e00e      	b.n	8011df4 <__swhatbuf_r+0x40>
 8011dd6:	466a      	mov	r2, sp
 8011dd8:	f000 faa2 	bl	8012320 <_fstat_r>
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	dbf2      	blt.n	8011dc6 <__swhatbuf_r+0x12>
 8011de0:	9a01      	ldr	r2, [sp, #4]
 8011de2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011de6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011dea:	425a      	negs	r2, r3
 8011dec:	415a      	adcs	r2, r3
 8011dee:	602a      	str	r2, [r5, #0]
 8011df0:	e7ee      	b.n	8011dd0 <__swhatbuf_r+0x1c>
 8011df2:	2340      	movs	r3, #64	; 0x40
 8011df4:	2000      	movs	r0, #0
 8011df6:	6023      	str	r3, [r4, #0]
 8011df8:	b016      	add	sp, #88	; 0x58
 8011dfa:	bd70      	pop	{r4, r5, r6, pc}

08011dfc <__smakebuf_r>:
 8011dfc:	898b      	ldrh	r3, [r1, #12]
 8011dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e00:	079d      	lsls	r5, r3, #30
 8011e02:	4606      	mov	r6, r0
 8011e04:	460c      	mov	r4, r1
 8011e06:	d507      	bpl.n	8011e18 <__smakebuf_r+0x1c>
 8011e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e0c:	6023      	str	r3, [r4, #0]
 8011e0e:	6123      	str	r3, [r4, #16]
 8011e10:	2301      	movs	r3, #1
 8011e12:	6163      	str	r3, [r4, #20]
 8011e14:	b002      	add	sp, #8
 8011e16:	bd70      	pop	{r4, r5, r6, pc}
 8011e18:	ab01      	add	r3, sp, #4
 8011e1a:	466a      	mov	r2, sp
 8011e1c:	f7ff ffca 	bl	8011db4 <__swhatbuf_r>
 8011e20:	9900      	ldr	r1, [sp, #0]
 8011e22:	4605      	mov	r5, r0
 8011e24:	4630      	mov	r0, r6
 8011e26:	f7ff f8db 	bl	8010fe0 <_malloc_r>
 8011e2a:	b948      	cbnz	r0, 8011e40 <__smakebuf_r+0x44>
 8011e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e30:	059a      	lsls	r2, r3, #22
 8011e32:	d4ef      	bmi.n	8011e14 <__smakebuf_r+0x18>
 8011e34:	f023 0303 	bic.w	r3, r3, #3
 8011e38:	f043 0302 	orr.w	r3, r3, #2
 8011e3c:	81a3      	strh	r3, [r4, #12]
 8011e3e:	e7e3      	b.n	8011e08 <__smakebuf_r+0xc>
 8011e40:	4b0d      	ldr	r3, [pc, #52]	; (8011e78 <__smakebuf_r+0x7c>)
 8011e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e44:	89a3      	ldrh	r3, [r4, #12]
 8011e46:	6020      	str	r0, [r4, #0]
 8011e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e4c:	81a3      	strh	r3, [r4, #12]
 8011e4e:	9b00      	ldr	r3, [sp, #0]
 8011e50:	6163      	str	r3, [r4, #20]
 8011e52:	9b01      	ldr	r3, [sp, #4]
 8011e54:	6120      	str	r0, [r4, #16]
 8011e56:	b15b      	cbz	r3, 8011e70 <__smakebuf_r+0x74>
 8011e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f000 fa71 	bl	8012344 <_isatty_r>
 8011e62:	b128      	cbz	r0, 8011e70 <__smakebuf_r+0x74>
 8011e64:	89a3      	ldrh	r3, [r4, #12]
 8011e66:	f023 0303 	bic.w	r3, r3, #3
 8011e6a:	f043 0301 	orr.w	r3, r3, #1
 8011e6e:	81a3      	strh	r3, [r4, #12]
 8011e70:	89a0      	ldrh	r0, [r4, #12]
 8011e72:	4305      	orrs	r5, r0
 8011e74:	81a5      	strh	r5, [r4, #12]
 8011e76:	e7cd      	b.n	8011e14 <__smakebuf_r+0x18>
 8011e78:	08011c0d 	.word	0x08011c0d

08011e7c <memmove>:
 8011e7c:	4288      	cmp	r0, r1
 8011e7e:	b510      	push	{r4, lr}
 8011e80:	eb01 0402 	add.w	r4, r1, r2
 8011e84:	d902      	bls.n	8011e8c <memmove+0x10>
 8011e86:	4284      	cmp	r4, r0
 8011e88:	4623      	mov	r3, r4
 8011e8a:	d807      	bhi.n	8011e9c <memmove+0x20>
 8011e8c:	1e43      	subs	r3, r0, #1
 8011e8e:	42a1      	cmp	r1, r4
 8011e90:	d008      	beq.n	8011ea4 <memmove+0x28>
 8011e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e9a:	e7f8      	b.n	8011e8e <memmove+0x12>
 8011e9c:	4402      	add	r2, r0
 8011e9e:	4601      	mov	r1, r0
 8011ea0:	428a      	cmp	r2, r1
 8011ea2:	d100      	bne.n	8011ea6 <memmove+0x2a>
 8011ea4:	bd10      	pop	{r4, pc}
 8011ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011eae:	e7f7      	b.n	8011ea0 <memmove+0x24>

08011eb0 <__malloc_lock>:
 8011eb0:	4801      	ldr	r0, [pc, #4]	; (8011eb8 <__malloc_lock+0x8>)
 8011eb2:	f7ff bf7d 	b.w	8011db0 <__retarget_lock_acquire_recursive>
 8011eb6:	bf00      	nop
 8011eb8:	20002188 	.word	0x20002188

08011ebc <__malloc_unlock>:
 8011ebc:	4801      	ldr	r0, [pc, #4]	; (8011ec4 <__malloc_unlock+0x8>)
 8011ebe:	f7ff bf78 	b.w	8011db2 <__retarget_lock_release_recursive>
 8011ec2:	bf00      	nop
 8011ec4:	20002188 	.word	0x20002188

08011ec8 <_realloc_r>:
 8011ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eca:	4607      	mov	r7, r0
 8011ecc:	4614      	mov	r4, r2
 8011ece:	460e      	mov	r6, r1
 8011ed0:	b921      	cbnz	r1, 8011edc <_realloc_r+0x14>
 8011ed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011ed6:	4611      	mov	r1, r2
 8011ed8:	f7ff b882 	b.w	8010fe0 <_malloc_r>
 8011edc:	b922      	cbnz	r2, 8011ee8 <_realloc_r+0x20>
 8011ede:	f7ff f82f 	bl	8010f40 <_free_r>
 8011ee2:	4625      	mov	r5, r4
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ee8:	f000 fa4e 	bl	8012388 <_malloc_usable_size_r>
 8011eec:	42a0      	cmp	r0, r4
 8011eee:	d20f      	bcs.n	8011f10 <_realloc_r+0x48>
 8011ef0:	4621      	mov	r1, r4
 8011ef2:	4638      	mov	r0, r7
 8011ef4:	f7ff f874 	bl	8010fe0 <_malloc_r>
 8011ef8:	4605      	mov	r5, r0
 8011efa:	2800      	cmp	r0, #0
 8011efc:	d0f2      	beq.n	8011ee4 <_realloc_r+0x1c>
 8011efe:	4631      	mov	r1, r6
 8011f00:	4622      	mov	r2, r4
 8011f02:	f7ff f807 	bl	8010f14 <memcpy>
 8011f06:	4631      	mov	r1, r6
 8011f08:	4638      	mov	r0, r7
 8011f0a:	f7ff f819 	bl	8010f40 <_free_r>
 8011f0e:	e7e9      	b.n	8011ee4 <_realloc_r+0x1c>
 8011f10:	4635      	mov	r5, r6
 8011f12:	e7e7      	b.n	8011ee4 <_realloc_r+0x1c>

08011f14 <__ssputs_r>:
 8011f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f18:	688e      	ldr	r6, [r1, #8]
 8011f1a:	429e      	cmp	r6, r3
 8011f1c:	4682      	mov	sl, r0
 8011f1e:	460c      	mov	r4, r1
 8011f20:	4690      	mov	r8, r2
 8011f22:	461f      	mov	r7, r3
 8011f24:	d838      	bhi.n	8011f98 <__ssputs_r+0x84>
 8011f26:	898a      	ldrh	r2, [r1, #12]
 8011f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f2c:	d032      	beq.n	8011f94 <__ssputs_r+0x80>
 8011f2e:	6825      	ldr	r5, [r4, #0]
 8011f30:	6909      	ldr	r1, [r1, #16]
 8011f32:	eba5 0901 	sub.w	r9, r5, r1
 8011f36:	6965      	ldr	r5, [r4, #20]
 8011f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f40:	3301      	adds	r3, #1
 8011f42:	444b      	add	r3, r9
 8011f44:	106d      	asrs	r5, r5, #1
 8011f46:	429d      	cmp	r5, r3
 8011f48:	bf38      	it	cc
 8011f4a:	461d      	movcc	r5, r3
 8011f4c:	0553      	lsls	r3, r2, #21
 8011f4e:	d531      	bpl.n	8011fb4 <__ssputs_r+0xa0>
 8011f50:	4629      	mov	r1, r5
 8011f52:	f7ff f845 	bl	8010fe0 <_malloc_r>
 8011f56:	4606      	mov	r6, r0
 8011f58:	b950      	cbnz	r0, 8011f70 <__ssputs_r+0x5c>
 8011f5a:	230c      	movs	r3, #12
 8011f5c:	f8ca 3000 	str.w	r3, [sl]
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f66:	81a3      	strh	r3, [r4, #12]
 8011f68:	f04f 30ff 	mov.w	r0, #4294967295
 8011f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f70:	6921      	ldr	r1, [r4, #16]
 8011f72:	464a      	mov	r2, r9
 8011f74:	f7fe ffce 	bl	8010f14 <memcpy>
 8011f78:	89a3      	ldrh	r3, [r4, #12]
 8011f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f82:	81a3      	strh	r3, [r4, #12]
 8011f84:	6126      	str	r6, [r4, #16]
 8011f86:	6165      	str	r5, [r4, #20]
 8011f88:	444e      	add	r6, r9
 8011f8a:	eba5 0509 	sub.w	r5, r5, r9
 8011f8e:	6026      	str	r6, [r4, #0]
 8011f90:	60a5      	str	r5, [r4, #8]
 8011f92:	463e      	mov	r6, r7
 8011f94:	42be      	cmp	r6, r7
 8011f96:	d900      	bls.n	8011f9a <__ssputs_r+0x86>
 8011f98:	463e      	mov	r6, r7
 8011f9a:	4632      	mov	r2, r6
 8011f9c:	6820      	ldr	r0, [r4, #0]
 8011f9e:	4641      	mov	r1, r8
 8011fa0:	f7ff ff6c 	bl	8011e7c <memmove>
 8011fa4:	68a3      	ldr	r3, [r4, #8]
 8011fa6:	6822      	ldr	r2, [r4, #0]
 8011fa8:	1b9b      	subs	r3, r3, r6
 8011faa:	4432      	add	r2, r6
 8011fac:	60a3      	str	r3, [r4, #8]
 8011fae:	6022      	str	r2, [r4, #0]
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	e7db      	b.n	8011f6c <__ssputs_r+0x58>
 8011fb4:	462a      	mov	r2, r5
 8011fb6:	f7ff ff87 	bl	8011ec8 <_realloc_r>
 8011fba:	4606      	mov	r6, r0
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	d1e1      	bne.n	8011f84 <__ssputs_r+0x70>
 8011fc0:	6921      	ldr	r1, [r4, #16]
 8011fc2:	4650      	mov	r0, sl
 8011fc4:	f7fe ffbc 	bl	8010f40 <_free_r>
 8011fc8:	e7c7      	b.n	8011f5a <__ssputs_r+0x46>
	...

08011fcc <_svfiprintf_r>:
 8011fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd0:	4698      	mov	r8, r3
 8011fd2:	898b      	ldrh	r3, [r1, #12]
 8011fd4:	061b      	lsls	r3, r3, #24
 8011fd6:	b09d      	sub	sp, #116	; 0x74
 8011fd8:	4607      	mov	r7, r0
 8011fda:	460d      	mov	r5, r1
 8011fdc:	4614      	mov	r4, r2
 8011fde:	d50e      	bpl.n	8011ffe <_svfiprintf_r+0x32>
 8011fe0:	690b      	ldr	r3, [r1, #16]
 8011fe2:	b963      	cbnz	r3, 8011ffe <_svfiprintf_r+0x32>
 8011fe4:	2140      	movs	r1, #64	; 0x40
 8011fe6:	f7fe fffb 	bl	8010fe0 <_malloc_r>
 8011fea:	6028      	str	r0, [r5, #0]
 8011fec:	6128      	str	r0, [r5, #16]
 8011fee:	b920      	cbnz	r0, 8011ffa <_svfiprintf_r+0x2e>
 8011ff0:	230c      	movs	r3, #12
 8011ff2:	603b      	str	r3, [r7, #0]
 8011ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff8:	e0d1      	b.n	801219e <_svfiprintf_r+0x1d2>
 8011ffa:	2340      	movs	r3, #64	; 0x40
 8011ffc:	616b      	str	r3, [r5, #20]
 8011ffe:	2300      	movs	r3, #0
 8012000:	9309      	str	r3, [sp, #36]	; 0x24
 8012002:	2320      	movs	r3, #32
 8012004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012008:	f8cd 800c 	str.w	r8, [sp, #12]
 801200c:	2330      	movs	r3, #48	; 0x30
 801200e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80121b8 <_svfiprintf_r+0x1ec>
 8012012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012016:	f04f 0901 	mov.w	r9, #1
 801201a:	4623      	mov	r3, r4
 801201c:	469a      	mov	sl, r3
 801201e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012022:	b10a      	cbz	r2, 8012028 <_svfiprintf_r+0x5c>
 8012024:	2a25      	cmp	r2, #37	; 0x25
 8012026:	d1f9      	bne.n	801201c <_svfiprintf_r+0x50>
 8012028:	ebba 0b04 	subs.w	fp, sl, r4
 801202c:	d00b      	beq.n	8012046 <_svfiprintf_r+0x7a>
 801202e:	465b      	mov	r3, fp
 8012030:	4622      	mov	r2, r4
 8012032:	4629      	mov	r1, r5
 8012034:	4638      	mov	r0, r7
 8012036:	f7ff ff6d 	bl	8011f14 <__ssputs_r>
 801203a:	3001      	adds	r0, #1
 801203c:	f000 80aa 	beq.w	8012194 <_svfiprintf_r+0x1c8>
 8012040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012042:	445a      	add	r2, fp
 8012044:	9209      	str	r2, [sp, #36]	; 0x24
 8012046:	f89a 3000 	ldrb.w	r3, [sl]
 801204a:	2b00      	cmp	r3, #0
 801204c:	f000 80a2 	beq.w	8012194 <_svfiprintf_r+0x1c8>
 8012050:	2300      	movs	r3, #0
 8012052:	f04f 32ff 	mov.w	r2, #4294967295
 8012056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801205a:	f10a 0a01 	add.w	sl, sl, #1
 801205e:	9304      	str	r3, [sp, #16]
 8012060:	9307      	str	r3, [sp, #28]
 8012062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012066:	931a      	str	r3, [sp, #104]	; 0x68
 8012068:	4654      	mov	r4, sl
 801206a:	2205      	movs	r2, #5
 801206c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012070:	4851      	ldr	r0, [pc, #324]	; (80121b8 <_svfiprintf_r+0x1ec>)
 8012072:	f7ee f8d5 	bl	8000220 <memchr>
 8012076:	9a04      	ldr	r2, [sp, #16]
 8012078:	b9d8      	cbnz	r0, 80120b2 <_svfiprintf_r+0xe6>
 801207a:	06d0      	lsls	r0, r2, #27
 801207c:	bf44      	itt	mi
 801207e:	2320      	movmi	r3, #32
 8012080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012084:	0711      	lsls	r1, r2, #28
 8012086:	bf44      	itt	mi
 8012088:	232b      	movmi	r3, #43	; 0x2b
 801208a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801208e:	f89a 3000 	ldrb.w	r3, [sl]
 8012092:	2b2a      	cmp	r3, #42	; 0x2a
 8012094:	d015      	beq.n	80120c2 <_svfiprintf_r+0xf6>
 8012096:	9a07      	ldr	r2, [sp, #28]
 8012098:	4654      	mov	r4, sl
 801209a:	2000      	movs	r0, #0
 801209c:	f04f 0c0a 	mov.w	ip, #10
 80120a0:	4621      	mov	r1, r4
 80120a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120a6:	3b30      	subs	r3, #48	; 0x30
 80120a8:	2b09      	cmp	r3, #9
 80120aa:	d94e      	bls.n	801214a <_svfiprintf_r+0x17e>
 80120ac:	b1b0      	cbz	r0, 80120dc <_svfiprintf_r+0x110>
 80120ae:	9207      	str	r2, [sp, #28]
 80120b0:	e014      	b.n	80120dc <_svfiprintf_r+0x110>
 80120b2:	eba0 0308 	sub.w	r3, r0, r8
 80120b6:	fa09 f303 	lsl.w	r3, r9, r3
 80120ba:	4313      	orrs	r3, r2
 80120bc:	9304      	str	r3, [sp, #16]
 80120be:	46a2      	mov	sl, r4
 80120c0:	e7d2      	b.n	8012068 <_svfiprintf_r+0x9c>
 80120c2:	9b03      	ldr	r3, [sp, #12]
 80120c4:	1d19      	adds	r1, r3, #4
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	9103      	str	r1, [sp, #12]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	bfbb      	ittet	lt
 80120ce:	425b      	neglt	r3, r3
 80120d0:	f042 0202 	orrlt.w	r2, r2, #2
 80120d4:	9307      	strge	r3, [sp, #28]
 80120d6:	9307      	strlt	r3, [sp, #28]
 80120d8:	bfb8      	it	lt
 80120da:	9204      	strlt	r2, [sp, #16]
 80120dc:	7823      	ldrb	r3, [r4, #0]
 80120de:	2b2e      	cmp	r3, #46	; 0x2e
 80120e0:	d10c      	bne.n	80120fc <_svfiprintf_r+0x130>
 80120e2:	7863      	ldrb	r3, [r4, #1]
 80120e4:	2b2a      	cmp	r3, #42	; 0x2a
 80120e6:	d135      	bne.n	8012154 <_svfiprintf_r+0x188>
 80120e8:	9b03      	ldr	r3, [sp, #12]
 80120ea:	1d1a      	adds	r2, r3, #4
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	9203      	str	r2, [sp, #12]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	bfb8      	it	lt
 80120f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80120f8:	3402      	adds	r4, #2
 80120fa:	9305      	str	r3, [sp, #20]
 80120fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80121c8 <_svfiprintf_r+0x1fc>
 8012100:	7821      	ldrb	r1, [r4, #0]
 8012102:	2203      	movs	r2, #3
 8012104:	4650      	mov	r0, sl
 8012106:	f7ee f88b 	bl	8000220 <memchr>
 801210a:	b140      	cbz	r0, 801211e <_svfiprintf_r+0x152>
 801210c:	2340      	movs	r3, #64	; 0x40
 801210e:	eba0 000a 	sub.w	r0, r0, sl
 8012112:	fa03 f000 	lsl.w	r0, r3, r0
 8012116:	9b04      	ldr	r3, [sp, #16]
 8012118:	4303      	orrs	r3, r0
 801211a:	3401      	adds	r4, #1
 801211c:	9304      	str	r3, [sp, #16]
 801211e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012122:	4826      	ldr	r0, [pc, #152]	; (80121bc <_svfiprintf_r+0x1f0>)
 8012124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012128:	2206      	movs	r2, #6
 801212a:	f7ee f879 	bl	8000220 <memchr>
 801212e:	2800      	cmp	r0, #0
 8012130:	d038      	beq.n	80121a4 <_svfiprintf_r+0x1d8>
 8012132:	4b23      	ldr	r3, [pc, #140]	; (80121c0 <_svfiprintf_r+0x1f4>)
 8012134:	bb1b      	cbnz	r3, 801217e <_svfiprintf_r+0x1b2>
 8012136:	9b03      	ldr	r3, [sp, #12]
 8012138:	3307      	adds	r3, #7
 801213a:	f023 0307 	bic.w	r3, r3, #7
 801213e:	3308      	adds	r3, #8
 8012140:	9303      	str	r3, [sp, #12]
 8012142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012144:	4433      	add	r3, r6
 8012146:	9309      	str	r3, [sp, #36]	; 0x24
 8012148:	e767      	b.n	801201a <_svfiprintf_r+0x4e>
 801214a:	fb0c 3202 	mla	r2, ip, r2, r3
 801214e:	460c      	mov	r4, r1
 8012150:	2001      	movs	r0, #1
 8012152:	e7a5      	b.n	80120a0 <_svfiprintf_r+0xd4>
 8012154:	2300      	movs	r3, #0
 8012156:	3401      	adds	r4, #1
 8012158:	9305      	str	r3, [sp, #20]
 801215a:	4619      	mov	r1, r3
 801215c:	f04f 0c0a 	mov.w	ip, #10
 8012160:	4620      	mov	r0, r4
 8012162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012166:	3a30      	subs	r2, #48	; 0x30
 8012168:	2a09      	cmp	r2, #9
 801216a:	d903      	bls.n	8012174 <_svfiprintf_r+0x1a8>
 801216c:	2b00      	cmp	r3, #0
 801216e:	d0c5      	beq.n	80120fc <_svfiprintf_r+0x130>
 8012170:	9105      	str	r1, [sp, #20]
 8012172:	e7c3      	b.n	80120fc <_svfiprintf_r+0x130>
 8012174:	fb0c 2101 	mla	r1, ip, r1, r2
 8012178:	4604      	mov	r4, r0
 801217a:	2301      	movs	r3, #1
 801217c:	e7f0      	b.n	8012160 <_svfiprintf_r+0x194>
 801217e:	ab03      	add	r3, sp, #12
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	462a      	mov	r2, r5
 8012184:	4b0f      	ldr	r3, [pc, #60]	; (80121c4 <_svfiprintf_r+0x1f8>)
 8012186:	a904      	add	r1, sp, #16
 8012188:	4638      	mov	r0, r7
 801218a:	f3af 8000 	nop.w
 801218e:	1c42      	adds	r2, r0, #1
 8012190:	4606      	mov	r6, r0
 8012192:	d1d6      	bne.n	8012142 <_svfiprintf_r+0x176>
 8012194:	89ab      	ldrh	r3, [r5, #12]
 8012196:	065b      	lsls	r3, r3, #25
 8012198:	f53f af2c 	bmi.w	8011ff4 <_svfiprintf_r+0x28>
 801219c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801219e:	b01d      	add	sp, #116	; 0x74
 80121a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121a4:	ab03      	add	r3, sp, #12
 80121a6:	9300      	str	r3, [sp, #0]
 80121a8:	462a      	mov	r2, r5
 80121aa:	4b06      	ldr	r3, [pc, #24]	; (80121c4 <_svfiprintf_r+0x1f8>)
 80121ac:	a904      	add	r1, sp, #16
 80121ae:	4638      	mov	r0, r7
 80121b0:	f7ff f938 	bl	8011424 <_printf_i>
 80121b4:	e7eb      	b.n	801218e <_svfiprintf_r+0x1c2>
 80121b6:	bf00      	nop
 80121b8:	080132f8 	.word	0x080132f8
 80121bc:	08013302 	.word	0x08013302
 80121c0:	00000000 	.word	0x00000000
 80121c4:	08011f15 	.word	0x08011f15
 80121c8:	080132fe 	.word	0x080132fe

080121cc <_raise_r>:
 80121cc:	291f      	cmp	r1, #31
 80121ce:	b538      	push	{r3, r4, r5, lr}
 80121d0:	4604      	mov	r4, r0
 80121d2:	460d      	mov	r5, r1
 80121d4:	d904      	bls.n	80121e0 <_raise_r+0x14>
 80121d6:	2316      	movs	r3, #22
 80121d8:	6003      	str	r3, [r0, #0]
 80121da:	f04f 30ff 	mov.w	r0, #4294967295
 80121de:	bd38      	pop	{r3, r4, r5, pc}
 80121e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80121e2:	b112      	cbz	r2, 80121ea <_raise_r+0x1e>
 80121e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121e8:	b94b      	cbnz	r3, 80121fe <_raise_r+0x32>
 80121ea:	4620      	mov	r0, r4
 80121ec:	f000 f830 	bl	8012250 <_getpid_r>
 80121f0:	462a      	mov	r2, r5
 80121f2:	4601      	mov	r1, r0
 80121f4:	4620      	mov	r0, r4
 80121f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121fa:	f000 b817 	b.w	801222c <_kill_r>
 80121fe:	2b01      	cmp	r3, #1
 8012200:	d00a      	beq.n	8012218 <_raise_r+0x4c>
 8012202:	1c59      	adds	r1, r3, #1
 8012204:	d103      	bne.n	801220e <_raise_r+0x42>
 8012206:	2316      	movs	r3, #22
 8012208:	6003      	str	r3, [r0, #0]
 801220a:	2001      	movs	r0, #1
 801220c:	e7e7      	b.n	80121de <_raise_r+0x12>
 801220e:	2400      	movs	r4, #0
 8012210:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012214:	4628      	mov	r0, r5
 8012216:	4798      	blx	r3
 8012218:	2000      	movs	r0, #0
 801221a:	e7e0      	b.n	80121de <_raise_r+0x12>

0801221c <raise>:
 801221c:	4b02      	ldr	r3, [pc, #8]	; (8012228 <raise+0xc>)
 801221e:	4601      	mov	r1, r0
 8012220:	6818      	ldr	r0, [r3, #0]
 8012222:	f7ff bfd3 	b.w	80121cc <_raise_r>
 8012226:	bf00      	nop
 8012228:	20000180 	.word	0x20000180

0801222c <_kill_r>:
 801222c:	b538      	push	{r3, r4, r5, lr}
 801222e:	4d07      	ldr	r5, [pc, #28]	; (801224c <_kill_r+0x20>)
 8012230:	2300      	movs	r3, #0
 8012232:	4604      	mov	r4, r0
 8012234:	4608      	mov	r0, r1
 8012236:	4611      	mov	r1, r2
 8012238:	602b      	str	r3, [r5, #0]
 801223a:	f7f6 fedf 	bl	8008ffc <_kill>
 801223e:	1c43      	adds	r3, r0, #1
 8012240:	d102      	bne.n	8012248 <_kill_r+0x1c>
 8012242:	682b      	ldr	r3, [r5, #0]
 8012244:	b103      	cbz	r3, 8012248 <_kill_r+0x1c>
 8012246:	6023      	str	r3, [r4, #0]
 8012248:	bd38      	pop	{r3, r4, r5, pc}
 801224a:	bf00      	nop
 801224c:	20002190 	.word	0x20002190

08012250 <_getpid_r>:
 8012250:	f7f6 becc 	b.w	8008fec <_getpid>

08012254 <__sread>:
 8012254:	b510      	push	{r4, lr}
 8012256:	460c      	mov	r4, r1
 8012258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801225c:	f000 f89c 	bl	8012398 <_read_r>
 8012260:	2800      	cmp	r0, #0
 8012262:	bfab      	itete	ge
 8012264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012266:	89a3      	ldrhlt	r3, [r4, #12]
 8012268:	181b      	addge	r3, r3, r0
 801226a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801226e:	bfac      	ite	ge
 8012270:	6563      	strge	r3, [r4, #84]	; 0x54
 8012272:	81a3      	strhlt	r3, [r4, #12]
 8012274:	bd10      	pop	{r4, pc}

08012276 <__swrite>:
 8012276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801227a:	461f      	mov	r7, r3
 801227c:	898b      	ldrh	r3, [r1, #12]
 801227e:	05db      	lsls	r3, r3, #23
 8012280:	4605      	mov	r5, r0
 8012282:	460c      	mov	r4, r1
 8012284:	4616      	mov	r6, r2
 8012286:	d505      	bpl.n	8012294 <__swrite+0x1e>
 8012288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801228c:	2302      	movs	r3, #2
 801228e:	2200      	movs	r2, #0
 8012290:	f000 f868 	bl	8012364 <_lseek_r>
 8012294:	89a3      	ldrh	r3, [r4, #12]
 8012296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801229a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801229e:	81a3      	strh	r3, [r4, #12]
 80122a0:	4632      	mov	r2, r6
 80122a2:	463b      	mov	r3, r7
 80122a4:	4628      	mov	r0, r5
 80122a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122aa:	f000 b817 	b.w	80122dc <_write_r>

080122ae <__sseek>:
 80122ae:	b510      	push	{r4, lr}
 80122b0:	460c      	mov	r4, r1
 80122b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122b6:	f000 f855 	bl	8012364 <_lseek_r>
 80122ba:	1c43      	adds	r3, r0, #1
 80122bc:	89a3      	ldrh	r3, [r4, #12]
 80122be:	bf15      	itete	ne
 80122c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80122c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80122c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80122ca:	81a3      	strheq	r3, [r4, #12]
 80122cc:	bf18      	it	ne
 80122ce:	81a3      	strhne	r3, [r4, #12]
 80122d0:	bd10      	pop	{r4, pc}

080122d2 <__sclose>:
 80122d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122d6:	f000 b813 	b.w	8012300 <_close_r>
	...

080122dc <_write_r>:
 80122dc:	b538      	push	{r3, r4, r5, lr}
 80122de:	4d07      	ldr	r5, [pc, #28]	; (80122fc <_write_r+0x20>)
 80122e0:	4604      	mov	r4, r0
 80122e2:	4608      	mov	r0, r1
 80122e4:	4611      	mov	r1, r2
 80122e6:	2200      	movs	r2, #0
 80122e8:	602a      	str	r2, [r5, #0]
 80122ea:	461a      	mov	r2, r3
 80122ec:	f7f6 febd 	bl	800906a <_write>
 80122f0:	1c43      	adds	r3, r0, #1
 80122f2:	d102      	bne.n	80122fa <_write_r+0x1e>
 80122f4:	682b      	ldr	r3, [r5, #0]
 80122f6:	b103      	cbz	r3, 80122fa <_write_r+0x1e>
 80122f8:	6023      	str	r3, [r4, #0]
 80122fa:	bd38      	pop	{r3, r4, r5, pc}
 80122fc:	20002190 	.word	0x20002190

08012300 <_close_r>:
 8012300:	b538      	push	{r3, r4, r5, lr}
 8012302:	4d06      	ldr	r5, [pc, #24]	; (801231c <_close_r+0x1c>)
 8012304:	2300      	movs	r3, #0
 8012306:	4604      	mov	r4, r0
 8012308:	4608      	mov	r0, r1
 801230a:	602b      	str	r3, [r5, #0]
 801230c:	f7f6 fec9 	bl	80090a2 <_close>
 8012310:	1c43      	adds	r3, r0, #1
 8012312:	d102      	bne.n	801231a <_close_r+0x1a>
 8012314:	682b      	ldr	r3, [r5, #0]
 8012316:	b103      	cbz	r3, 801231a <_close_r+0x1a>
 8012318:	6023      	str	r3, [r4, #0]
 801231a:	bd38      	pop	{r3, r4, r5, pc}
 801231c:	20002190 	.word	0x20002190

08012320 <_fstat_r>:
 8012320:	b538      	push	{r3, r4, r5, lr}
 8012322:	4d07      	ldr	r5, [pc, #28]	; (8012340 <_fstat_r+0x20>)
 8012324:	2300      	movs	r3, #0
 8012326:	4604      	mov	r4, r0
 8012328:	4608      	mov	r0, r1
 801232a:	4611      	mov	r1, r2
 801232c:	602b      	str	r3, [r5, #0]
 801232e:	f7f6 fec4 	bl	80090ba <_fstat>
 8012332:	1c43      	adds	r3, r0, #1
 8012334:	d102      	bne.n	801233c <_fstat_r+0x1c>
 8012336:	682b      	ldr	r3, [r5, #0]
 8012338:	b103      	cbz	r3, 801233c <_fstat_r+0x1c>
 801233a:	6023      	str	r3, [r4, #0]
 801233c:	bd38      	pop	{r3, r4, r5, pc}
 801233e:	bf00      	nop
 8012340:	20002190 	.word	0x20002190

08012344 <_isatty_r>:
 8012344:	b538      	push	{r3, r4, r5, lr}
 8012346:	4d06      	ldr	r5, [pc, #24]	; (8012360 <_isatty_r+0x1c>)
 8012348:	2300      	movs	r3, #0
 801234a:	4604      	mov	r4, r0
 801234c:	4608      	mov	r0, r1
 801234e:	602b      	str	r3, [r5, #0]
 8012350:	f7f6 fec3 	bl	80090da <_isatty>
 8012354:	1c43      	adds	r3, r0, #1
 8012356:	d102      	bne.n	801235e <_isatty_r+0x1a>
 8012358:	682b      	ldr	r3, [r5, #0]
 801235a:	b103      	cbz	r3, 801235e <_isatty_r+0x1a>
 801235c:	6023      	str	r3, [r4, #0]
 801235e:	bd38      	pop	{r3, r4, r5, pc}
 8012360:	20002190 	.word	0x20002190

08012364 <_lseek_r>:
 8012364:	b538      	push	{r3, r4, r5, lr}
 8012366:	4d07      	ldr	r5, [pc, #28]	; (8012384 <_lseek_r+0x20>)
 8012368:	4604      	mov	r4, r0
 801236a:	4608      	mov	r0, r1
 801236c:	4611      	mov	r1, r2
 801236e:	2200      	movs	r2, #0
 8012370:	602a      	str	r2, [r5, #0]
 8012372:	461a      	mov	r2, r3
 8012374:	f7f6 febc 	bl	80090f0 <_lseek>
 8012378:	1c43      	adds	r3, r0, #1
 801237a:	d102      	bne.n	8012382 <_lseek_r+0x1e>
 801237c:	682b      	ldr	r3, [r5, #0]
 801237e:	b103      	cbz	r3, 8012382 <_lseek_r+0x1e>
 8012380:	6023      	str	r3, [r4, #0]
 8012382:	bd38      	pop	{r3, r4, r5, pc}
 8012384:	20002190 	.word	0x20002190

08012388 <_malloc_usable_size_r>:
 8012388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801238c:	1f18      	subs	r0, r3, #4
 801238e:	2b00      	cmp	r3, #0
 8012390:	bfbc      	itt	lt
 8012392:	580b      	ldrlt	r3, [r1, r0]
 8012394:	18c0      	addlt	r0, r0, r3
 8012396:	4770      	bx	lr

08012398 <_read_r>:
 8012398:	b538      	push	{r3, r4, r5, lr}
 801239a:	4d07      	ldr	r5, [pc, #28]	; (80123b8 <_read_r+0x20>)
 801239c:	4604      	mov	r4, r0
 801239e:	4608      	mov	r0, r1
 80123a0:	4611      	mov	r1, r2
 80123a2:	2200      	movs	r2, #0
 80123a4:	602a      	str	r2, [r5, #0]
 80123a6:	461a      	mov	r2, r3
 80123a8:	f7f6 fe42 	bl	8009030 <_read>
 80123ac:	1c43      	adds	r3, r0, #1
 80123ae:	d102      	bne.n	80123b6 <_read_r+0x1e>
 80123b0:	682b      	ldr	r3, [r5, #0]
 80123b2:	b103      	cbz	r3, 80123b6 <_read_r+0x1e>
 80123b4:	6023      	str	r3, [r4, #0]
 80123b6:	bd38      	pop	{r3, r4, r5, pc}
 80123b8:	20002190 	.word	0x20002190

080123bc <_init>:
 80123bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123be:	bf00      	nop
 80123c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123c2:	bc08      	pop	{r3}
 80123c4:	469e      	mov	lr, r3
 80123c6:	4770      	bx	lr

080123c8 <_fini>:
 80123c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ca:	bf00      	nop
 80123cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ce:	bc08      	pop	{r3}
 80123d0:	469e      	mov	lr, r3
 80123d2:	4770      	bx	lr
